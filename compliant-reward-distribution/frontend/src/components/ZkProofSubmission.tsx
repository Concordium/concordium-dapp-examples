import { useEffect, useState } from 'react';
import { Alert, Button, Form } from 'react-bootstrap';
import { useForm } from 'react-hook-form';
import sha256 from 'sha256';
import { Buffer } from 'buffer';
import { useNavigate } from 'react-router-dom';

import {
    AccountAddress,
    ConcordiumGRPCClient,
    CredentialDeploymentValues,
    CredentialStatement,
} from '@concordium/web-sdk';

import { WalletProvider } from '../wallet-connection';
import { getRecentBlock } from '../utils';
import { CONTEXT_STRING } from '../constants';
import { getStatement, submitZkProof } from '../apiReqeuests';

interface Props {
    prover: string | undefined;
    grpcClient: ConcordiumGRPCClient | undefined;
    provider: WalletProvider | undefined;
}

export function ZkProofSubmission(props: Props) {
    const { prover, provider, grpcClient } = props;

    const navigate = useNavigate();

    const [error, setError] = useState<string | undefined>(undefined);
    const [zkStatement, setZkStatement] = useState<CredentialStatement | undefined>(undefined);

    useEffect(() => {
        const fetchStatement = async () => {
            const statement: CredentialStatement = await getStatement();
            setZkStatement(statement);
        };

        fetchStatement();
    }, []);

    interface FormType {}
    const { handleSubmit } = useForm<FormType>({ mode: 'all' });

    async function onSubmit() {
        setError(undefined);

        try {
            if (!zkStatement) {
                throw Error(`'zkStatement' is undefined.`);
            }

            if (!provider || !prover) {
                throw Error(
                    `'provider' or 'prover' are undefined. Connect your wallet. Have an account in your wallet.`,
                );
            }

            const { blockHash: recentBlockHash, blockHeight: recentBlockHeight } = await getRecentBlock(grpcClient);

            const digest = [recentBlockHash.buffer, Buffer.from(CONTEXT_STRING)];
            // The zk proof request here is non-interactive (we don't request the challenge from the backend).
            // Instead the challenge consists of a recent block hash (so that the proof expires)
            // and a context string (to ensure the ZK proof cannot be replayed on different Concordium services).
            const challenge = sha256(digest.flatMap((item) => Array.from(item)));

            // Generate the ZK proof.
            const presentation = await provider.requestVerifiablePresentation(challenge, [zkStatement]);

            const accountInfoProver = await grpcClient?.getAccountInfo(AccountAddress.fromBase58(prover));
            const credIdConnectedAccount = (
                accountInfoProver?.accountCredentials[0].value.contents as CredentialDeploymentValues
            ).credId;

            // Check that the ZK proof was generated by the account address that is connected to this dApp.
            if (
                credIdConnectedAccount !==
                presentation.verifiableCredential[0].credentialSubject.id.replace(
                    /did:ccd:(mainnet|testnet):cred:/g,
                    '',
                )
            ) {
                throw Error(
                    `When approving the ZK proof in the wallet, select your connected account from the drop-down menu in the wallet (expect proof for account: ${prover}).`,
                );
            }

            await submitZkProof(presentation, recentBlockHeight);

            navigate('/finalPage');
        } catch (error) {
            setError((error as Error).message);
        }
    }

    return (
        <div className="centered">
            <div className="card">
                <h2 className="centered white">Proof Of Eligibility</h2>
                <br />
                <Form onSubmit={handleSubmit(onSubmit)}>
                    <div className="white">
                        To collect your reward, you must verify the below data using your Concordium ID.
                    </div>
                    <br />

                    <ul className="white">
                        <li>Your ID number</li>
                        <li>Your nationality</li>
                        <li>That you are over 18 years old</li>
                        <li>That your nationality is eligible*</li>
                    </ul>
                    <div className="white">* Not eligible nationalitites are: USA, and North Korea</div>

                    <br />
                    <Button variant="primary" type="submit">
                        Verify
                    </Button>
                    {error && <Alert variant="danger">{error}</Alert>}
                </Form>
            </div>
        </div>
    );
}
