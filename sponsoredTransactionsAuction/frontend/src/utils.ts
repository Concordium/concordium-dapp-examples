import { AccountAddress, TransactionHash } from '@concordium/web-sdk';

import { VERIFIER_URL } from './constants';

/**
 * This function sends the bidding signature and other parameters to the back end.
 * The back end will send the sponsored transaction on behalf of the user to the chain.
 *
 * @param signer - The account that signed the transferMessage.
 * @param nonce - The nonce (CIS3 standard) that was part of the message that was signed.
 * @param signature - The signature that was generated by the wallet.
 * @param expiryTimeSignature - The timestamp when the signature expires.
 * @param tokenID - The tokenID that was part of the message that was signed.
 * @param from - The from address that was part of the message that was signed.
 * @param tokenAmount - The tokenAmount that was part of the message that was signed.
 * @param itemIndexAuction - The itemIndexAuction that was part of the message that was signed.
 * @throws If the server responds with an error or the response of the server is malformed.
 * @returns The {@linkcode TransactionHash.Type} of the transaction submitted at the backend.
 */
export async function submitBid(
    signer: string,
    nonce: string,
    signature: string,
    expiryTimeSignature: string,
    tokenID: string | undefined,
    from: string,
    tokenAmount: string | undefined,
    itemIndexAuction: string | undefined,
) {
    const response = await fetch(`${VERIFIER_URL}/bid`, {
        method: 'POST',
        headers: new Headers({ 'content-type': 'application/json' }),
        body: JSON.stringify({
            signer,
            nonce: Number(nonce),
            signature,
            token_id: tokenID,
            from,
            token_amount: tokenAmount,
            item_index_auction: Number(itemIndexAuction),
            expiry_timestamp: expiryTimeSignature,
        }),
    });

    if (!response.ok) {
        const error = (await response.json()) as Error;
        throw new Error(`Unable to submit bid: ${JSON.stringify(error)}`);
    }
    const body = (await response.json()) as string;
    if (body) {
        return TransactionHash.fromHexString(body);
    }
    throw new Error('Unable to submit bid');
}

/**
 * This function validates if a string represents a valid accountAddress in base58 encoding.
 * The length, characters, and the checksum are validated.
 *
 * @param accountAddress - An account address represented as a base58 encoded string.
 * @returns An error message if validation fails.
 */
export function validateAccountAddress(accountAddress: string) {
    try {
        AccountAddress.fromBase58(accountAddress);
    } catch (e) {
        return `Please enter a valid account address. It is a base58 string with a fixed length of 50 characters. Original error: ${
            (e as Error).message
        }.`;
    }
}
