import { require_json_bigint } from './chunk-C3Y62267.js';
import { require_buffer } from './chunk-GNSLCM6O.js';
import { __commonJS, __export, __toESM } from './chunk-ANIWD3T6.js';

// node_modules/@noble/hashes/_assert.js
var require_assert = __commonJS({
    'node_modules/@noble/hashes/_assert.js'(exports) {
        'use strict';
        Object.defineProperty(exports, '__esModule', { value: true });
        exports.output = exports.exists = exports.hash = exports.bytes = exports.bool = exports.number = void 0;
        function number2(n) {
            if (!Number.isSafeInteger(n) || n < 0) throw new Error(`Wrong positive integer: ${n}`);
        }
        exports.number = number2;
        function bool(b) {
            if (typeof b !== 'boolean') throw new Error(`Expected boolean, not ${b}`);
        }
        exports.bool = bool;
        function isBytes4(a) {
            return (
                a instanceof Uint8Array || (a != null && typeof a === 'object' && a.constructor.name === 'Uint8Array')
            );
        }
        function bytes2(b, ...lengths) {
            if (!isBytes4(b)) throw new Error('Expected Uint8Array');
            if (lengths.length > 0 && !lengths.includes(b.length))
                throw new Error(`Expected Uint8Array of length ${lengths}, not of length=${b.length}`);
        }
        exports.bytes = bytes2;
        function hash3(hash4) {
            if (typeof hash4 !== 'function' || typeof hash4.create !== 'function')
                throw new Error('Hash should be wrapped by utils.wrapConstructor');
            number2(hash4.outputLen);
            number2(hash4.blockLen);
        }
        exports.hash = hash3;
        function exists2(instance, checkFinished = true) {
            if (instance.destroyed) throw new Error('Hash instance has been destroyed');
            if (checkFinished && instance.finished) throw new Error('Hash#digest() has already been called');
        }
        exports.exists = exists2;
        function output2(out, instance) {
            bytes2(out);
            const min = instance.outputLen;
            if (out.length < min) {
                throw new Error(`digestInto() expects output buffer of length at least ${min}`);
            }
        }
        exports.output = output2;
        var assert2 = { number: number2, bool, bytes: bytes2, hash: hash3, exists: exists2, output: output2 };
        exports.default = assert2;
    },
});

// node_modules/@noble/hashes/crypto.js
var require_crypto = __commonJS({
    'node_modules/@noble/hashes/crypto.js'(exports) {
        'use strict';
        Object.defineProperty(exports, '__esModule', { value: true });
        exports.crypto = void 0;
        exports.crypto = typeof globalThis === 'object' && 'crypto' in globalThis ? globalThis.crypto : void 0;
    },
});

// node_modules/@noble/hashes/utils.js
var require_utils = __commonJS({
    'node_modules/@noble/hashes/utils.js'(exports) {
        'use strict';
        Object.defineProperty(exports, '__esModule', { value: true });
        exports.randomBytes =
            exports.wrapXOFConstructorWithOpts =
            exports.wrapConstructorWithOpts =
            exports.wrapConstructor =
            exports.checkOpts =
            exports.Hash =
            exports.concatBytes =
            exports.toBytes =
            exports.utf8ToBytes =
            exports.asyncLoop =
            exports.nextTick =
            exports.hexToBytes =
            exports.bytesToHex =
            exports.isLE =
            exports.rotr =
            exports.createView =
            exports.u32 =
            exports.u8 =
                void 0;
        var crypto_1 = require_crypto();
        var u8 = (arr) => new Uint8Array(arr.buffer, arr.byteOffset, arr.byteLength);
        exports.u8 = u8;
        var u32 = (arr) => new Uint32Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 4));
        exports.u32 = u32;
        function isBytes4(a) {
            return (
                a instanceof Uint8Array || (a != null && typeof a === 'object' && a.constructor.name === 'Uint8Array')
            );
        }
        var createView2 = (arr) => new DataView(arr.buffer, arr.byteOffset, arr.byteLength);
        exports.createView = createView2;
        var rotr2 = (word, shift) => (word << (32 - shift)) | (word >>> shift);
        exports.rotr = rotr2;
        exports.isLE = new Uint8Array(new Uint32Array([287454020]).buffer)[0] === 68;
        if (!exports.isLE) throw new Error('Non little-endian hardware is not supported');
        var hexes2 = Array.from({ length: 256 }, (_, i) => i.toString(16).padStart(2, '0'));
        function bytesToHex(bytes2) {
            if (!isBytes4(bytes2)) throw new Error('Uint8Array expected');
            let hex2 = '';
            for (let i = 0; i < bytes2.length; i++) {
                hex2 += hexes2[bytes2[i]];
            }
            return hex2;
        }
        exports.bytesToHex = bytesToHex;
        var asciis = { _0: 48, _9: 57, _A: 65, _F: 70, _a: 97, _f: 102 };
        function asciiToBase16(char) {
            if (char >= asciis._0 && char <= asciis._9) return char - asciis._0;
            if (char >= asciis._A && char <= asciis._F) return char - (asciis._A - 10);
            if (char >= asciis._a && char <= asciis._f) return char - (asciis._a - 10);
            return;
        }
        function hexToBytes(hex2) {
            if (typeof hex2 !== 'string') throw new Error('hex string expected, got ' + typeof hex2);
            const hl = hex2.length;
            const al = hl / 2;
            if (hl % 2) throw new Error('padded hex string expected, got unpadded hex of length ' + hl);
            const array = new Uint8Array(al);
            for (let ai = 0, hi = 0; ai < al; ai++, hi += 2) {
                const n1 = asciiToBase16(hex2.charCodeAt(hi));
                const n2 = asciiToBase16(hex2.charCodeAt(hi + 1));
                if (n1 === void 0 || n2 === void 0) {
                    const char = hex2[hi] + hex2[hi + 1];
                    throw new Error('hex string expected, got non-hex character "' + char + '" at index ' + hi);
                }
                array[ai] = n1 * 16 + n2;
            }
            return array;
        }
        exports.hexToBytes = hexToBytes;
        var nextTick = async () => {};
        exports.nextTick = nextTick;
        async function asyncLoop2(iters, tick, cb) {
            let ts = Date.now();
            for (let i = 0; i < iters; i++) {
                cb(i);
                const diff = Date.now() - ts;
                if (diff >= 0 && diff < tick) continue;
                await (0, exports.nextTick)();
                ts += diff;
            }
        }
        exports.asyncLoop = asyncLoop2;
        function utf8ToBytes2(str2) {
            if (typeof str2 !== 'string') throw new Error(`utf8ToBytes expected string, got ${typeof str2}`);
            return new Uint8Array(new TextEncoder().encode(str2));
        }
        exports.utf8ToBytes = utf8ToBytes2;
        function toBytes2(data) {
            if (typeof data === 'string') data = utf8ToBytes2(data);
            if (!isBytes4(data)) throw new Error(`expected Uint8Array, got ${typeof data}`);
            return data;
        }
        exports.toBytes = toBytes2;
        function concatBytes2(...arrays) {
            let sum = 0;
            for (let i = 0; i < arrays.length; i++) {
                const a = arrays[i];
                if (!isBytes4(a)) throw new Error('Uint8Array expected');
                sum += a.length;
            }
            const res = new Uint8Array(sum);
            for (let i = 0, pad = 0; i < arrays.length; i++) {
                const a = arrays[i];
                res.set(a, pad);
                pad += a.length;
            }
            return res;
        }
        exports.concatBytes = concatBytes2;
        var Hash2 = class {
            // Safe version that clones internal state
            clone() {
                return this._cloneInto();
            }
        };
        exports.Hash = Hash2;
        var toStr2 = {}.toString;
        function checkOpts2(defaults, opts) {
            if (opts !== void 0 && toStr2.call(opts) !== '[object Object]')
                throw new Error('Options should be object or undefined');
            const merged = Object.assign(defaults, opts);
            return merged;
        }
        exports.checkOpts = checkOpts2;
        function wrapConstructor2(hashCons) {
            const hashC = (msg) => hashCons().update(toBytes2(msg)).digest();
            const tmp = hashCons();
            hashC.outputLen = tmp.outputLen;
            hashC.blockLen = tmp.blockLen;
            hashC.create = () => hashCons();
            return hashC;
        }
        exports.wrapConstructor = wrapConstructor2;
        function wrapConstructorWithOpts(hashCons) {
            const hashC = (msg, opts) => hashCons(opts).update(toBytes2(msg)).digest();
            const tmp = hashCons({});
            hashC.outputLen = tmp.outputLen;
            hashC.blockLen = tmp.blockLen;
            hashC.create = (opts) => hashCons(opts);
            return hashC;
        }
        exports.wrapConstructorWithOpts = wrapConstructorWithOpts;
        function wrapXOFConstructorWithOpts(hashCons) {
            const hashC = (msg, opts) => hashCons(opts).update(toBytes2(msg)).digest();
            const tmp = hashCons({});
            hashC.outputLen = tmp.outputLen;
            hashC.blockLen = tmp.blockLen;
            hashC.create = (opts) => hashCons(opts);
            return hashC;
        }
        exports.wrapXOFConstructorWithOpts = wrapXOFConstructorWithOpts;
        function randomBytes2(bytesLength = 32) {
            if (crypto_1.crypto && typeof crypto_1.crypto.getRandomValues === 'function') {
                return crypto_1.crypto.getRandomValues(new Uint8Array(bytesLength));
            }
            throw new Error('crypto.getRandomValues must be defined');
        }
        exports.randomBytes = randomBytes2;
    },
});

// node_modules/@noble/hashes/_sha2.js
var require_sha2 = __commonJS({
    'node_modules/@noble/hashes/_sha2.js'(exports) {
        'use strict';
        Object.defineProperty(exports, '__esModule', { value: true });
        exports.SHA2 = void 0;
        var _assert_js_1 = require_assert();
        var utils_js_1 = require_utils();
        function setBigUint642(view, byteOffset, value, isLE2) {
            if (typeof view.setBigUint64 === 'function') return view.setBigUint64(byteOffset, value, isLE2);
            const _32n2 = BigInt(32);
            const _u32_max = BigInt(4294967295);
            const wh = Number((value >> _32n2) & _u32_max);
            const wl = Number(value & _u32_max);
            const h = isLE2 ? 4 : 0;
            const l = isLE2 ? 0 : 4;
            view.setUint32(byteOffset + h, wh, isLE2);
            view.setUint32(byteOffset + l, wl, isLE2);
        }
        var SHA22 = class extends utils_js_1.Hash {
            constructor(blockLen, outputLen, padOffset, isLE2) {
                super();
                this.blockLen = blockLen;
                this.outputLen = outputLen;
                this.padOffset = padOffset;
                this.isLE = isLE2;
                this.finished = false;
                this.length = 0;
                this.pos = 0;
                this.destroyed = false;
                this.buffer = new Uint8Array(blockLen);
                this.view = (0, utils_js_1.createView)(this.buffer);
            }
            update(data) {
                (0, _assert_js_1.exists)(this);
                const { view, buffer, blockLen } = this;
                data = (0, utils_js_1.toBytes)(data);
                const len = data.length;
                for (let pos = 0; pos < len; ) {
                    const take = Math.min(blockLen - this.pos, len - pos);
                    if (take === blockLen) {
                        const dataView = (0, utils_js_1.createView)(data);
                        for (; blockLen <= len - pos; pos += blockLen) this.process(dataView, pos);
                        continue;
                    }
                    buffer.set(data.subarray(pos, pos + take), this.pos);
                    this.pos += take;
                    pos += take;
                    if (this.pos === blockLen) {
                        this.process(view, 0);
                        this.pos = 0;
                    }
                }
                this.length += data.length;
                this.roundClean();
                return this;
            }
            digestInto(out) {
                (0, _assert_js_1.exists)(this);
                (0, _assert_js_1.output)(out, this);
                this.finished = true;
                const { buffer, view, blockLen, isLE: isLE2 } = this;
                let { pos } = this;
                buffer[pos++] = 128;
                this.buffer.subarray(pos).fill(0);
                if (this.padOffset > blockLen - pos) {
                    this.process(view, 0);
                    pos = 0;
                }
                for (let i = pos; i < blockLen; i++) buffer[i] = 0;
                setBigUint642(view, blockLen - 8, BigInt(this.length * 8), isLE2);
                this.process(view, 0);
                const oview = (0, utils_js_1.createView)(out);
                const len = this.outputLen;
                if (len % 4) throw new Error('_sha2: outputLen should be aligned to 32bit');
                const outLen = len / 4;
                const state = this.get();
                if (outLen > state.length) throw new Error('_sha2: outputLen bigger than state');
                for (let i = 0; i < outLen; i++) oview.setUint32(4 * i, state[i], isLE2);
            }
            digest() {
                const { buffer, outputLen } = this;
                this.digestInto(buffer);
                const res = buffer.slice(0, outputLen);
                this.destroy();
                return res;
            }
            _cloneInto(to) {
                to || (to = new this.constructor());
                to.set(...this.get());
                const { blockLen, buffer, length, finished, destroyed, pos } = this;
                to.length = length;
                to.pos = pos;
                to.finished = finished;
                to.destroyed = destroyed;
                if (length % blockLen) to.buffer.set(buffer);
                return to;
            }
        };
        exports.SHA2 = SHA22;
    },
});

// node_modules/@noble/hashes/sha256.js
var require_sha256 = __commonJS({
    'node_modules/@noble/hashes/sha256.js'(exports) {
        'use strict';
        Object.defineProperty(exports, '__esModule', { value: true });
        exports.sha224 = exports.sha256 = void 0;
        var _sha2_js_1 = require_sha2();
        var utils_js_1 = require_utils();
        var Chi2 = (a, b, c) => (a & b) ^ (~a & c);
        var Maj2 = (a, b, c) => (a & b) ^ (a & c) ^ (b & c);
        var SHA256_K2 = new Uint32Array([
            1116352408, 1899447441, 3049323471, 3921009573, 961987163, 1508970993, 2453635748, 2870763221, 3624381080,
            310598401, 607225278, 1426881987, 1925078388, 2162078206, 2614888103, 3248222580, 3835390401, 4022224774,
            264347078, 604807628, 770255983, 1249150122, 1555081692, 1996064986, 2554220882, 2821834349, 2952996808,
            3210313671, 3336571891, 3584528711, 113926993, 338241895, 666307205, 773529912, 1294757372, 1396182291,
            1695183700, 1986661051, 2177026350, 2456956037, 2730485921, 2820302411, 3259730800, 3345764771, 3516065817,
            3600352804, 4094571909, 275423344, 430227734, 506948616, 659060556, 883997877, 958139571, 1322822218,
            1537002063, 1747873779, 1955562222, 2024104815, 2227730452, 2361852424, 2428436474, 2756734187, 3204031479,
            3329325298,
        ]);
        var IV2 = new Uint32Array([
            1779033703, 3144134277, 1013904242, 2773480762, 1359893119, 2600822924, 528734635, 1541459225,
        ]);
        var SHA256_W2 = new Uint32Array(64);
        var SHA2562 = class extends _sha2_js_1.SHA2 {
            constructor() {
                super(64, 32, 8, false);
                this.A = IV2[0] | 0;
                this.B = IV2[1] | 0;
                this.C = IV2[2] | 0;
                this.D = IV2[3] | 0;
                this.E = IV2[4] | 0;
                this.F = IV2[5] | 0;
                this.G = IV2[6] | 0;
                this.H = IV2[7] | 0;
            }
            get() {
                const { A, B, C, D, E, F, G: G2, H } = this;
                return [A, B, C, D, E, F, G2, H];
            }
            // prettier-ignore
            set(A, B, C, D, E, F, G2, H) {
        this.A = A | 0;
        this.B = B | 0;
        this.C = C | 0;
        this.D = D | 0;
        this.E = E | 0;
        this.F = F | 0;
        this.G = G2 | 0;
        this.H = H | 0;
      }
            process(view, offset) {
                for (let i = 0; i < 16; i++, offset += 4) SHA256_W2[i] = view.getUint32(offset, false);
                for (let i = 16; i < 64; i++) {
                    const W15 = SHA256_W2[i - 15];
                    const W2 = SHA256_W2[i - 2];
                    const s0 = (0, utils_js_1.rotr)(W15, 7) ^ (0, utils_js_1.rotr)(W15, 18) ^ (W15 >>> 3);
                    const s1 = (0, utils_js_1.rotr)(W2, 17) ^ (0, utils_js_1.rotr)(W2, 19) ^ (W2 >>> 10);
                    SHA256_W2[i] = (s1 + SHA256_W2[i - 7] + s0 + SHA256_W2[i - 16]) | 0;
                }
                let { A, B, C, D, E, F, G: G2, H } = this;
                for (let i = 0; i < 64; i++) {
                    const sigma1 =
                        (0, utils_js_1.rotr)(E, 6) ^ (0, utils_js_1.rotr)(E, 11) ^ (0, utils_js_1.rotr)(E, 25);
                    const T1 = (H + sigma1 + Chi2(E, F, G2) + SHA256_K2[i] + SHA256_W2[i]) | 0;
                    const sigma0 =
                        (0, utils_js_1.rotr)(A, 2) ^ (0, utils_js_1.rotr)(A, 13) ^ (0, utils_js_1.rotr)(A, 22);
                    const T2 = (sigma0 + Maj2(A, B, C)) | 0;
                    H = G2;
                    G2 = F;
                    F = E;
                    E = (D + T1) | 0;
                    D = C;
                    C = B;
                    B = A;
                    A = (T1 + T2) | 0;
                }
                A = (A + this.A) | 0;
                B = (B + this.B) | 0;
                C = (C + this.C) | 0;
                D = (D + this.D) | 0;
                E = (E + this.E) | 0;
                F = (F + this.F) | 0;
                G2 = (G2 + this.G) | 0;
                H = (H + this.H) | 0;
                this.set(A, B, C, D, E, F, G2, H);
            }
            roundClean() {
                SHA256_W2.fill(0);
            }
            destroy() {
                this.set(0, 0, 0, 0, 0, 0, 0, 0);
                this.buffer.fill(0);
            }
        };
        var SHA2242 = class extends SHA2562 {
            constructor() {
                super();
                this.A = 3238371032 | 0;
                this.B = 914150663 | 0;
                this.C = 812702999 | 0;
                this.D = 4144912697 | 0;
                this.E = 4290775857 | 0;
                this.F = 1750603025 | 0;
                this.G = 1694076839 | 0;
                this.H = 3204075428 | 0;
                this.outputLen = 28;
            }
        };
        exports.sha256 = (0, utils_js_1.wrapConstructor)(() => new SHA2562());
        exports.sha224 = (0, utils_js_1.wrapConstructor)(() => new SHA2242());
    },
});

// node_modules/base-x/src/index.js
var require_src = __commonJS({
    'node_modules/base-x/src/index.js'(exports, module) {
        'use strict';
        function base(ALPHABET) {
            if (ALPHABET.length >= 255) {
                throw new TypeError('Alphabet too long');
            }
            var BASE_MAP = new Uint8Array(256);
            for (var j = 0; j < BASE_MAP.length; j++) {
                BASE_MAP[j] = 255;
            }
            for (var i = 0; i < ALPHABET.length; i++) {
                var x = ALPHABET.charAt(i);
                var xc = x.charCodeAt(0);
                if (BASE_MAP[xc] !== 255) {
                    throw new TypeError(x + ' is ambiguous');
                }
                BASE_MAP[xc] = i;
            }
            var BASE = ALPHABET.length;
            var LEADER = ALPHABET.charAt(0);
            var FACTOR = Math.log(BASE) / Math.log(256);
            var iFACTOR = Math.log(256) / Math.log(BASE);
            function encode(source) {
                if (source instanceof Uint8Array) {
                } else if (ArrayBuffer.isView(source)) {
                    source = new Uint8Array(source.buffer, source.byteOffset, source.byteLength);
                } else if (Array.isArray(source)) {
                    source = Uint8Array.from(source);
                }
                if (!(source instanceof Uint8Array)) {
                    throw new TypeError('Expected Uint8Array');
                }
                if (source.length === 0) {
                    return '';
                }
                var zeroes = 0;
                var length = 0;
                var pbegin = 0;
                var pend = source.length;
                while (pbegin !== pend && source[pbegin] === 0) {
                    pbegin++;
                    zeroes++;
                }
                var size = ((pend - pbegin) * iFACTOR + 1) >>> 0;
                var b58 = new Uint8Array(size);
                while (pbegin !== pend) {
                    var carry = source[pbegin];
                    var i2 = 0;
                    for (var it1 = size - 1; (carry !== 0 || i2 < length) && it1 !== -1; it1--, i2++) {
                        carry += (256 * b58[it1]) >>> 0;
                        b58[it1] = carry % BASE >>> 0;
                        carry = (carry / BASE) >>> 0;
                    }
                    if (carry !== 0) {
                        throw new Error('Non-zero carry');
                    }
                    length = i2;
                    pbegin++;
                }
                var it2 = size - length;
                while (it2 !== size && b58[it2] === 0) {
                    it2++;
                }
                var str2 = LEADER.repeat(zeroes);
                for (; it2 < size; ++it2) {
                    str2 += ALPHABET.charAt(b58[it2]);
                }
                return str2;
            }
            function decodeUnsafe(source) {
                if (typeof source !== 'string') {
                    throw new TypeError('Expected String');
                }
                if (source.length === 0) {
                    return new Uint8Array();
                }
                var psz = 0;
                var zeroes = 0;
                var length = 0;
                while (source[psz] === LEADER) {
                    zeroes++;
                    psz++;
                }
                var size = ((source.length - psz) * FACTOR + 1) >>> 0;
                var b256 = new Uint8Array(size);
                while (source[psz]) {
                    var carry = BASE_MAP[source.charCodeAt(psz)];
                    if (carry === 255) {
                        return;
                    }
                    var i2 = 0;
                    for (var it3 = size - 1; (carry !== 0 || i2 < length) && it3 !== -1; it3--, i2++) {
                        carry += (BASE * b256[it3]) >>> 0;
                        b256[it3] = carry % 256 >>> 0;
                        carry = (carry / 256) >>> 0;
                    }
                    if (carry !== 0) {
                        throw new Error('Non-zero carry');
                    }
                    length = i2;
                    psz++;
                }
                var it4 = size - length;
                while (it4 !== size && b256[it4] === 0) {
                    it4++;
                }
                var vch = new Uint8Array(zeroes + (size - it4));
                var j2 = zeroes;
                while (it4 !== size) {
                    vch[j2++] = b256[it4++];
                }
                return vch;
            }
            function decode(string) {
                var buffer = decodeUnsafe(string);
                if (buffer) {
                    return buffer;
                }
                throw new Error('Non-base' + BASE + ' character');
            }
            return {
                encode,
                decodeUnsafe,
                decode,
            };
        }
        module.exports = base;
    },
});

// node_modules/bs58/index.js
var require_bs58 = __commonJS({
    'node_modules/bs58/index.js'(exports, module) {
        var basex = require_src();
        var ALPHABET = '123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz';
        module.exports = basex(ALPHABET);
    },
});

// node_modules/bs58check/base.js
var require_base = __commonJS({
    'node_modules/bs58check/base.js'(exports, module) {
        'use strict';
        var base582 = require_bs58();
        module.exports = function (checksumFn) {
            function encode(payload) {
                var payloadU8 = Uint8Array.from(payload);
                var checksum2 = checksumFn(payloadU8);
                var length = payloadU8.length + 4;
                var both = new Uint8Array(length);
                both.set(payloadU8, 0);
                both.set(checksum2.subarray(0, 4), payloadU8.length);
                return base582.encode(both, length);
            }
            function decodeRaw(buffer) {
                var payload = buffer.slice(0, -4);
                var checksum2 = buffer.slice(-4);
                var newChecksum = checksumFn(payload);
                if (
                    (checksum2[0] ^ newChecksum[0]) |
                    (checksum2[1] ^ newChecksum[1]) |
                    (checksum2[2] ^ newChecksum[2]) |
                    (checksum2[3] ^ newChecksum[3])
                )
                    return;
                return payload;
            }
            function decodeUnsafe(string) {
                var buffer = base582.decodeUnsafe(string);
                if (!buffer) return;
                return decodeRaw(buffer);
            }
            function decode(string) {
                var buffer = base582.decode(string);
                var payload = decodeRaw(buffer, checksumFn);
                if (!payload) throw new Error('Invalid checksum');
                return payload;
            }
            return {
                encode,
                decode,
                decodeUnsafe,
            };
        };
    },
});

// node_modules/bs58check/index.js
var require_bs58check = __commonJS({
    'node_modules/bs58check/index.js'(exports, module) {
        'use strict';
        var { sha256: sha2563 } = require_sha256();
        var bs58checkBase = require_base();
        function sha256x2(buffer) {
            return sha2563(sha2563(buffer));
        }
        module.exports = bs58checkBase(sha256x2);
    },
});

// node_modules/@concordium/rust-bindings/lib/dapp/web/umd/index.min.js
var require_index_min = __commonJS({
    'node_modules/@concordium/rust-bindings/lib/dapp/web/umd/index.min.js'(exports, module) {
        !(function (A, I2) {
            if ('object' == typeof exports && 'object' == typeof module) module.exports = I2();
            else if ('function' == typeof define && define.amd) define([], I2);
            else {
                var g = I2();
                for (var Q in g) ('object' == typeof exports ? exports : A)[Q] = g[Q];
            }
        })(self, () =>
            (() => {
                var A = {
                        766: (A2, I3) => {
                            'use strict';
                            (I3.byteLength = function (A3) {
                                var I4 = D(A3),
                                    g3 = I4[0],
                                    Q2 = I4[1];
                                return (3 * (g3 + Q2)) / 4 - Q2;
                            }),
                                (I3.toByteArray = function (A3) {
                                    var I4,
                                        g3,
                                        C2 = D(A3),
                                        E2 = C2[0],
                                        i2 = C2[1],
                                        w = new B(
                                            (function (A4, I5, g4) {
                                                return (3 * (I5 + g4)) / 4 - g4;
                                            })(0, E2, i2)
                                        ),
                                        o = 0,
                                        G2 = i2 > 0 ? E2 - 4 : E2;
                                    for (g3 = 0; g3 < G2; g3 += 4)
                                        (I4 =
                                            (Q[A3.charCodeAt(g3)] << 18) |
                                            (Q[A3.charCodeAt(g3 + 1)] << 12) |
                                            (Q[A3.charCodeAt(g3 + 2)] << 6) |
                                            Q[A3.charCodeAt(g3 + 3)]),
                                            (w[o++] = (I4 >> 16) & 255),
                                            (w[o++] = (I4 >> 8) & 255),
                                            (w[o++] = 255 & I4);
                                    return (
                                        2 === i2 &&
                                            ((I4 = (Q[A3.charCodeAt(g3)] << 2) | (Q[A3.charCodeAt(g3 + 1)] >> 4)),
                                            (w[o++] = 255 & I4)),
                                        1 === i2 &&
                                            ((I4 =
                                                (Q[A3.charCodeAt(g3)] << 10) |
                                                (Q[A3.charCodeAt(g3 + 1)] << 4) |
                                                (Q[A3.charCodeAt(g3 + 2)] >> 2)),
                                            (w[o++] = (I4 >> 8) & 255),
                                            (w[o++] = 255 & I4)),
                                        w
                                    );
                                }),
                                (I3.fromByteArray = function (A3) {
                                    for (
                                        var I4, Q2 = A3.length, B2 = Q2 % 3, C2 = [], E2 = 16383, D2 = 0, w = Q2 - B2;
                                        D2 < w;
                                        D2 += E2
                                    )
                                        C2.push(i(A3, D2, D2 + E2 > w ? w : D2 + E2));
                                    return (
                                        1 === B2
                                            ? ((I4 = A3[Q2 - 1]), C2.push(g2[I4 >> 2] + g2[(I4 << 4) & 63] + '=='))
                                            : 2 === B2 &&
                                              ((I4 = (A3[Q2 - 2] << 8) + A3[Q2 - 1]),
                                              C2.push(g2[I4 >> 10] + g2[(I4 >> 4) & 63] + g2[(I4 << 2) & 63] + '=')),
                                        C2.join('')
                                    );
                                });
                            for (
                                var g2 = [],
                                    Q = [],
                                    B = 'undefined' != typeof Uint8Array ? Uint8Array : Array,
                                    C = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/',
                                    E = 0;
                                E < 64;
                                ++E
                            )
                                (g2[E] = C[E]), (Q[C.charCodeAt(E)] = E);
                            function D(A3) {
                                var I4 = A3.length;
                                if (I4 % 4 > 0) throw new Error('Invalid string. Length must be a multiple of 4');
                                var g3 = A3.indexOf('=');
                                return -1 === g3 && (g3 = I4), [g3, g3 === I4 ? 0 : 4 - (g3 % 4)];
                            }
                            function i(A3, I4, Q2) {
                                for (var B2, C2, E2 = [], D2 = I4; D2 < Q2; D2 += 3)
                                    (B2 =
                                        ((A3[D2] << 16) & 16711680) + ((A3[D2 + 1] << 8) & 65280) + (255 & A3[D2 + 2])),
                                        E2.push(
                                            g2[((C2 = B2) >> 18) & 63] +
                                                g2[(C2 >> 12) & 63] +
                                                g2[(C2 >> 6) & 63] +
                                                g2[63 & C2]
                                        );
                                return E2.join('');
                            }
                            (Q['-'.charCodeAt(0)] = 62), (Q['_'.charCodeAt(0)] = 63);
                        },
                        834: (A2, I3, g2) => {
                            'use strict';
                            const Q = g2(766),
                                B = g2(333),
                                C =
                                    'function' == typeof Symbol && 'function' == typeof Symbol.for
                                        ? Symbol.for('nodejs.util.inspect.custom')
                                        : null;
                            (I3.Buffer = i),
                                (I3.SlowBuffer = function (A3) {
                                    return +A3 != A3 && (A3 = 0), i.alloc(+A3);
                                }),
                                (I3.INSPECT_MAX_BYTES = 50);
                            const E = 2147483647;
                            function D(A3) {
                                if (A3 > E) throw new RangeError('The value "' + A3 + '" is invalid for option "size"');
                                const I4 = new Uint8Array(A3);
                                return Object.setPrototypeOf(I4, i.prototype), I4;
                            }
                            function i(A3, I4, g3) {
                                if ('number' == typeof A3) {
                                    if ('string' == typeof I4)
                                        throw new TypeError(
                                            'The "string" argument must be of type string. Received type number'
                                        );
                                    return G2(A3);
                                }
                                return w(A3, I4, g3);
                            }
                            function w(A3, I4, g3) {
                                if ('string' == typeof A3)
                                    return (function (A4, I5) {
                                        if ((('string' == typeof I5 && '' !== I5) || (I5 = 'utf8'), !i.isEncoding(I5)))
                                            throw new TypeError('Unknown encoding: ' + I5);
                                        const g4 = 0 | y(A4, I5);
                                        let Q3 = D(g4);
                                        const B3 = Q3.write(A4, I5);
                                        return B3 !== g4 && (Q3 = Q3.slice(0, B3)), Q3;
                                    })(A3, I4);
                                if (ArrayBuffer.isView(A3))
                                    return (function (A4) {
                                        if (X(A4, Uint8Array)) {
                                            const I5 = new Uint8Array(A4);
                                            return M(I5.buffer, I5.byteOffset, I5.byteLength);
                                        }
                                        return N2(A4);
                                    })(A3);
                                if (null == A3)
                                    throw new TypeError(
                                        'The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type ' +
                                            typeof A3
                                    );
                                if (X(A3, ArrayBuffer) || (A3 && X(A3.buffer, ArrayBuffer))) return M(A3, I4, g3);
                                if (
                                    'undefined' != typeof SharedArrayBuffer &&
                                    (X(A3, SharedArrayBuffer) || (A3 && X(A3.buffer, SharedArrayBuffer)))
                                )
                                    return M(A3, I4, g3);
                                if ('number' == typeof A3)
                                    throw new TypeError(
                                        'The "value" argument must not be of type number. Received type number'
                                    );
                                const Q2 = A3.valueOf && A3.valueOf();
                                if (null != Q2 && Q2 !== A3) return i.from(Q2, I4, g3);
                                const B2 = (function (A4) {
                                    if (i.isBuffer(A4)) {
                                        const I5 = 0 | k(A4.length),
                                            g4 = D(I5);
                                        return 0 === g4.length || A4.copy(g4, 0, 0, I5), g4;
                                    }
                                    return void 0 !== A4.length
                                        ? 'number' != typeof A4.length || P3(A4.length)
                                            ? D(0)
                                            : N2(A4)
                                        : 'Buffer' === A4.type && Array.isArray(A4.data)
                                          ? N2(A4.data)
                                          : void 0;
                                })(A3);
                                if (B2) return B2;
                                if (
                                    'undefined' != typeof Symbol &&
                                    null != Symbol.toPrimitive &&
                                    'function' == typeof A3[Symbol.toPrimitive]
                                )
                                    return i.from(A3[Symbol.toPrimitive]('string'), I4, g3);
                                throw new TypeError(
                                    'The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type ' +
                                        typeof A3
                                );
                            }
                            function o(A3) {
                                if ('number' != typeof A3)
                                    throw new TypeError('"size" argument must be of type number');
                                if (A3 < 0) throw new RangeError('The value "' + A3 + '" is invalid for option "size"');
                            }
                            function G2(A3) {
                                return o(A3), D(A3 < 0 ? 0 : 0 | k(A3));
                            }
                            function N2(A3) {
                                const I4 = A3.length < 0 ? 0 : 0 | k(A3.length),
                                    g3 = D(I4);
                                for (let Q2 = 0; Q2 < I4; Q2 += 1) g3[Q2] = 255 & A3[Q2];
                                return g3;
                            }
                            function M(A3, I4, g3) {
                                if (I4 < 0 || A3.byteLength < I4)
                                    throw new RangeError('"offset" is outside of buffer bounds');
                                if (A3.byteLength < I4 + (g3 || 0))
                                    throw new RangeError('"length" is outside of buffer bounds');
                                let Q2;
                                return (
                                    (Q2 =
                                        void 0 === I4 && void 0 === g3
                                            ? new Uint8Array(A3)
                                            : void 0 === g3
                                              ? new Uint8Array(A3, I4)
                                              : new Uint8Array(A3, I4, g3)),
                                    Object.setPrototypeOf(Q2, i.prototype),
                                    Q2
                                );
                            }
                            function k(A3) {
                                if (A3 >= E)
                                    throw new RangeError(
                                        'Attempt to allocate Buffer larger than maximum size: 0x' +
                                            E.toString(16) +
                                            ' bytes'
                                    );
                                return 0 | A3;
                            }
                            function y(A3, I4) {
                                if (i.isBuffer(A3)) return A3.length;
                                if (ArrayBuffer.isView(A3) || X(A3, ArrayBuffer)) return A3.byteLength;
                                if ('string' != typeof A3)
                                    throw new TypeError(
                                        'The "string" argument must be one of type string, Buffer, or ArrayBuffer. Received type ' +
                                            typeof A3
                                    );
                                const g3 = A3.length,
                                    Q2 = arguments.length > 2 && true === arguments[2];
                                if (!Q2 && 0 === g3) return 0;
                                let B2 = false;
                                for (;;)
                                    switch (I4) {
                                        case 'ascii':
                                        case 'latin1':
                                        case 'binary':
                                            return g3;
                                        case 'utf8':
                                        case 'utf-8':
                                            return O(A3).length;
                                        case 'ucs2':
                                        case 'ucs-2':
                                        case 'utf16le':
                                        case 'utf-16le':
                                            return 2 * g3;
                                        case 'hex':
                                            return g3 >>> 1;
                                        case 'base64':
                                            return u(A3).length;
                                        default:
                                            if (B2) return Q2 ? -1 : O(A3).length;
                                            (I4 = ('' + I4).toLowerCase()), (B2 = true);
                                    }
                            }
                            function F(A3, I4, g3) {
                                let Q2 = false;
                                if (((void 0 === I4 || I4 < 0) && (I4 = 0), I4 > this.length)) return '';
                                if (((void 0 === g3 || g3 > this.length) && (g3 = this.length), g3 <= 0)) return '';
                                if ((g3 >>>= 0) <= (I4 >>>= 0)) return '';
                                for (A3 || (A3 = 'utf8'); ; )
                                    switch (A3) {
                                        case 'hex':
                                            return t(this, I4, g3);
                                        case 'utf8':
                                        case 'utf-8':
                                            return S(this, I4, g3);
                                        case 'ascii':
                                            return q(this, I4, g3);
                                        case 'latin1':
                                        case 'binary':
                                            return H(this, I4, g3);
                                        case 'base64':
                                            return L(this, I4, g3);
                                        case 'ucs2':
                                        case 'ucs-2':
                                        case 'utf16le':
                                        case 'utf-16le':
                                            return d(this, I4, g3);
                                        default:
                                            if (Q2) throw new TypeError('Unknown encoding: ' + A3);
                                            (A3 = (A3 + '').toLowerCase()), (Q2 = true);
                                    }
                            }
                            function a(A3, I4, g3) {
                                const Q2 = A3[I4];
                                (A3[I4] = A3[g3]), (A3[g3] = Q2);
                            }
                            function R(A3, I4, g3, Q2, B2) {
                                if (0 === A3.length) return -1;
                                if (
                                    ('string' == typeof g3
                                        ? ((Q2 = g3), (g3 = 0))
                                        : g3 > 2147483647
                                          ? (g3 = 2147483647)
                                          : g3 < -2147483648 && (g3 = -2147483648),
                                    P3((g3 = +g3)) && (g3 = B2 ? 0 : A3.length - 1),
                                    g3 < 0 && (g3 = A3.length + g3),
                                    g3 >= A3.length)
                                ) {
                                    if (B2) return -1;
                                    g3 = A3.length - 1;
                                } else if (g3 < 0) {
                                    if (!B2) return -1;
                                    g3 = 0;
                                }
                                if (('string' == typeof I4 && (I4 = i.from(I4, Q2)), i.isBuffer(I4)))
                                    return 0 === I4.length ? -1 : h(A3, I4, g3, Q2, B2);
                                if ('number' == typeof I4)
                                    return (
                                        (I4 &= 255),
                                        'function' == typeof Uint8Array.prototype.indexOf
                                            ? B2
                                                ? Uint8Array.prototype.indexOf.call(A3, I4, g3)
                                                : Uint8Array.prototype.lastIndexOf.call(A3, I4, g3)
                                            : h(A3, [I4], g3, Q2, B2)
                                    );
                                throw new TypeError('val must be string, number or Buffer');
                            }
                            function h(A3, I4, g3, Q2, B2) {
                                let C2,
                                    E2 = 1,
                                    D2 = A3.length,
                                    i2 = I4.length;
                                if (
                                    void 0 !== Q2 &&
                                    ('ucs2' === (Q2 = String(Q2).toLowerCase()) ||
                                        'ucs-2' === Q2 ||
                                        'utf16le' === Q2 ||
                                        'utf-16le' === Q2)
                                ) {
                                    if (A3.length < 2 || I4.length < 2) return -1;
                                    (E2 = 2), (D2 /= 2), (i2 /= 2), (g3 /= 2);
                                }
                                function w2(A4, I5) {
                                    return 1 === E2 ? A4[I5] : A4.readUInt16BE(I5 * E2);
                                }
                                if (B2) {
                                    let Q3 = -1;
                                    for (C2 = g3; C2 < D2; C2++)
                                        if (w2(A3, C2) === w2(I4, -1 === Q3 ? 0 : C2 - Q3)) {
                                            if ((-1 === Q3 && (Q3 = C2), C2 - Q3 + 1 === i2)) return Q3 * E2;
                                        } else -1 !== Q3 && (C2 -= C2 - Q3), (Q3 = -1);
                                } else
                                    for (g3 + i2 > D2 && (g3 = D2 - i2), C2 = g3; C2 >= 0; C2--) {
                                        let g4 = true;
                                        for (let Q3 = 0; Q3 < i2; Q3++)
                                            if (w2(A3, C2 + Q3) !== w2(I4, Q3)) {
                                                g4 = false;
                                                break;
                                            }
                                        if (g4) return C2;
                                    }
                                return -1;
                            }
                            function J(A3, I4, g3, Q2) {
                                g3 = Number(g3) || 0;
                                const B2 = A3.length - g3;
                                Q2 ? (Q2 = Number(Q2)) > B2 && (Q2 = B2) : (Q2 = B2);
                                const C2 = I4.length;
                                let E2;
                                for (Q2 > C2 / 2 && (Q2 = C2 / 2), E2 = 0; E2 < Q2; ++E2) {
                                    const Q3 = parseInt(I4.substr(2 * E2, 2), 16);
                                    if (P3(Q3)) return E2;
                                    A3[g3 + E2] = Q3;
                                }
                                return E2;
                            }
                            function s(A3, I4, g3, Q2) {
                                return z(O(I4, A3.length - g3), A3, g3, Q2);
                            }
                            function c(A3, I4, g3, Q2) {
                                return z(
                                    (function (A4) {
                                        const I5 = [];
                                        for (let g4 = 0; g4 < A4.length; ++g4) I5.push(255 & A4.charCodeAt(g4));
                                        return I5;
                                    })(I4),
                                    A3,
                                    g3,
                                    Q2
                                );
                            }
                            function Y(A3, I4, g3, Q2) {
                                return z(u(I4), A3, g3, Q2);
                            }
                            function U(A3, I4, g3, Q2) {
                                return z(
                                    (function (A4, I5) {
                                        let g4, Q3, B2;
                                        const C2 = [];
                                        for (let E2 = 0; E2 < A4.length && !((I5 -= 2) < 0); ++E2)
                                            (g4 = A4.charCodeAt(E2)),
                                                (Q3 = g4 >> 8),
                                                (B2 = g4 % 256),
                                                C2.push(B2),
                                                C2.push(Q3);
                                        return C2;
                                    })(I4, A3.length - g3),
                                    A3,
                                    g3,
                                    Q2
                                );
                            }
                            function L(A3, I4, g3) {
                                return 0 === I4 && g3 === A3.length
                                    ? Q.fromByteArray(A3)
                                    : Q.fromByteArray(A3.slice(I4, g3));
                            }
                            function S(A3, I4, g3) {
                                g3 = Math.min(A3.length, g3);
                                const Q2 = [];
                                let B2 = I4;
                                for (; B2 < g3; ) {
                                    const I5 = A3[B2];
                                    let C2 = null,
                                        E2 = I5 > 239 ? 4 : I5 > 223 ? 3 : I5 > 191 ? 2 : 1;
                                    if (B2 + E2 <= g3) {
                                        let g4, Q3, D2, i2;
                                        switch (E2) {
                                            case 1:
                                                I5 < 128 && (C2 = I5);
                                                break;
                                            case 2:
                                                (g4 = A3[B2 + 1]),
                                                    128 == (192 & g4) &&
                                                        ((i2 = ((31 & I5) << 6) | (63 & g4)), i2 > 127 && (C2 = i2));
                                                break;
                                            case 3:
                                                (g4 = A3[B2 + 1]),
                                                    (Q3 = A3[B2 + 2]),
                                                    128 == (192 & g4) &&
                                                        128 == (192 & Q3) &&
                                                        ((i2 = ((15 & I5) << 12) | ((63 & g4) << 6) | (63 & Q3)),
                                                        i2 > 2047 && (i2 < 55296 || i2 > 57343) && (C2 = i2));
                                                break;
                                            case 4:
                                                (g4 = A3[B2 + 1]),
                                                    (Q3 = A3[B2 + 2]),
                                                    (D2 = A3[B2 + 3]),
                                                    128 == (192 & g4) &&
                                                        128 == (192 & Q3) &&
                                                        128 == (192 & D2) &&
                                                        ((i2 =
                                                            ((15 & I5) << 18) |
                                                            ((63 & g4) << 12) |
                                                            ((63 & Q3) << 6) |
                                                            (63 & D2)),
                                                        i2 > 65535 && i2 < 1114112 && (C2 = i2));
                                        }
                                    }
                                    null === C2
                                        ? ((C2 = 65533), (E2 = 1))
                                        : C2 > 65535 &&
                                          ((C2 -= 65536),
                                          Q2.push(((C2 >>> 10) & 1023) | 55296),
                                          (C2 = 56320 | (1023 & C2))),
                                        Q2.push(C2),
                                        (B2 += E2);
                                }
                                return (function (A4) {
                                    const I5 = A4.length;
                                    if (I5 <= K) return String.fromCharCode.apply(String, A4);
                                    let g4 = '',
                                        Q3 = 0;
                                    for (; Q3 < I5; ) g4 += String.fromCharCode.apply(String, A4.slice(Q3, (Q3 += K)));
                                    return g4;
                                })(Q2);
                            }
                            (I3.kMaxLength = E),
                                (i.TYPED_ARRAY_SUPPORT = (function () {
                                    try {
                                        const A3 = new Uint8Array(1),
                                            I4 = {
                                                foo: function () {
                                                    return 42;
                                                },
                                            };
                                        return (
                                            Object.setPrototypeOf(I4, Uint8Array.prototype),
                                            Object.setPrototypeOf(A3, I4),
                                            42 === A3.foo()
                                        );
                                    } catch (A3) {
                                        return false;
                                    }
                                })()),
                                i.TYPED_ARRAY_SUPPORT ||
                                    'undefined' == typeof console ||
                                    'function' != typeof console.error ||
                                    console.error(
                                        'This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support.'
                                    ),
                                Object.defineProperty(i.prototype, 'parent', {
                                    enumerable: true,
                                    get: function () {
                                        if (i.isBuffer(this)) return this.buffer;
                                    },
                                }),
                                Object.defineProperty(i.prototype, 'offset', {
                                    enumerable: true,
                                    get: function () {
                                        if (i.isBuffer(this)) return this.byteOffset;
                                    },
                                }),
                                (i.poolSize = 8192),
                                (i.from = function (A3, I4, g3) {
                                    return w(A3, I4, g3);
                                }),
                                Object.setPrototypeOf(i.prototype, Uint8Array.prototype),
                                Object.setPrototypeOf(i, Uint8Array),
                                (i.alloc = function (A3, I4, g3) {
                                    return (function (A4, I5, g4) {
                                        return (
                                            o(A4),
                                            A4 <= 0
                                                ? D(A4)
                                                : void 0 !== I5
                                                  ? 'string' == typeof g4
                                                      ? D(A4).fill(I5, g4)
                                                      : D(A4).fill(I5)
                                                  : D(A4)
                                        );
                                    })(A3, I4, g3);
                                }),
                                (i.allocUnsafe = function (A3) {
                                    return G2(A3);
                                }),
                                (i.allocUnsafeSlow = function (A3) {
                                    return G2(A3);
                                }),
                                (i.isBuffer = function (A3) {
                                    return null != A3 && true === A3._isBuffer && A3 !== i.prototype;
                                }),
                                (i.compare = function (A3, I4) {
                                    if (
                                        (X(A3, Uint8Array) && (A3 = i.from(A3, A3.offset, A3.byteLength)),
                                        X(I4, Uint8Array) && (I4 = i.from(I4, I4.offset, I4.byteLength)),
                                        !i.isBuffer(A3) || !i.isBuffer(I4))
                                    )
                                        throw new TypeError(
                                            'The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array'
                                        );
                                    if (A3 === I4) return 0;
                                    let g3 = A3.length,
                                        Q2 = I4.length;
                                    for (let B2 = 0, C2 = Math.min(g3, Q2); B2 < C2; ++B2)
                                        if (A3[B2] !== I4[B2]) {
                                            (g3 = A3[B2]), (Q2 = I4[B2]);
                                            break;
                                        }
                                    return g3 < Q2 ? -1 : Q2 < g3 ? 1 : 0;
                                }),
                                (i.isEncoding = function (A3) {
                                    switch (String(A3).toLowerCase()) {
                                        case 'hex':
                                        case 'utf8':
                                        case 'utf-8':
                                        case 'ascii':
                                        case 'latin1':
                                        case 'binary':
                                        case 'base64':
                                        case 'ucs2':
                                        case 'ucs-2':
                                        case 'utf16le':
                                        case 'utf-16le':
                                            return true;
                                        default:
                                            return false;
                                    }
                                }),
                                (i.concat = function (A3, I4) {
                                    if (!Array.isArray(A3))
                                        throw new TypeError('"list" argument must be an Array of Buffers');
                                    if (0 === A3.length) return i.alloc(0);
                                    let g3;
                                    if (void 0 === I4) for (I4 = 0, g3 = 0; g3 < A3.length; ++g3) I4 += A3[g3].length;
                                    const Q2 = i.allocUnsafe(I4);
                                    let B2 = 0;
                                    for (g3 = 0; g3 < A3.length; ++g3) {
                                        let I5 = A3[g3];
                                        if (X(I5, Uint8Array))
                                            B2 + I5.length > Q2.length
                                                ? (i.isBuffer(I5) || (I5 = i.from(I5)), I5.copy(Q2, B2))
                                                : Uint8Array.prototype.set.call(Q2, I5, B2);
                                        else {
                                            if (!i.isBuffer(I5))
                                                throw new TypeError('"list" argument must be an Array of Buffers');
                                            I5.copy(Q2, B2);
                                        }
                                        B2 += I5.length;
                                    }
                                    return Q2;
                                }),
                                (i.byteLength = y),
                                (i.prototype._isBuffer = true),
                                (i.prototype.swap16 = function () {
                                    const A3 = this.length;
                                    if (A3 % 2 != 0) throw new RangeError('Buffer size must be a multiple of 16-bits');
                                    for (let I4 = 0; I4 < A3; I4 += 2) a(this, I4, I4 + 1);
                                    return this;
                                }),
                                (i.prototype.swap32 = function () {
                                    const A3 = this.length;
                                    if (A3 % 4 != 0) throw new RangeError('Buffer size must be a multiple of 32-bits');
                                    for (let I4 = 0; I4 < A3; I4 += 4) a(this, I4, I4 + 3), a(this, I4 + 1, I4 + 2);
                                    return this;
                                }),
                                (i.prototype.swap64 = function () {
                                    const A3 = this.length;
                                    if (A3 % 8 != 0) throw new RangeError('Buffer size must be a multiple of 64-bits');
                                    for (let I4 = 0; I4 < A3; I4 += 8)
                                        a(this, I4, I4 + 7),
                                            a(this, I4 + 1, I4 + 6),
                                            a(this, I4 + 2, I4 + 5),
                                            a(this, I4 + 3, I4 + 4);
                                    return this;
                                }),
                                (i.prototype.toString = function () {
                                    const A3 = this.length;
                                    return 0 === A3
                                        ? ''
                                        : 0 === arguments.length
                                          ? S(this, 0, A3)
                                          : F.apply(this, arguments);
                                }),
                                (i.prototype.toLocaleString = i.prototype.toString),
                                (i.prototype.equals = function (A3) {
                                    if (!i.isBuffer(A3)) throw new TypeError('Argument must be a Buffer');
                                    return this === A3 || 0 === i.compare(this, A3);
                                }),
                                (i.prototype.inspect = function () {
                                    let A3 = '';
                                    const g3 = I3.INSPECT_MAX_BYTES;
                                    return (
                                        (A3 = this.toString('hex', 0, g3)
                                            .replace(/(.{2})/g, '$1 ')
                                            .trim()),
                                        this.length > g3 && (A3 += ' ... '),
                                        '<Buffer ' + A3 + '>'
                                    );
                                }),
                                C && (i.prototype[C] = i.prototype.inspect),
                                (i.prototype.compare = function (A3, I4, g3, Q2, B2) {
                                    if (
                                        (X(A3, Uint8Array) && (A3 = i.from(A3, A3.offset, A3.byteLength)),
                                        !i.isBuffer(A3))
                                    )
                                        throw new TypeError(
                                            'The "target" argument must be one of type Buffer or Uint8Array. Received type ' +
                                                typeof A3
                                        );
                                    if (
                                        (void 0 === I4 && (I4 = 0),
                                        void 0 === g3 && (g3 = A3 ? A3.length : 0),
                                        void 0 === Q2 && (Q2 = 0),
                                        void 0 === B2 && (B2 = this.length),
                                        I4 < 0 || g3 > A3.length || Q2 < 0 || B2 > this.length)
                                    )
                                        throw new RangeError('out of range index');
                                    if (Q2 >= B2 && I4 >= g3) return 0;
                                    if (Q2 >= B2) return -1;
                                    if (I4 >= g3) return 1;
                                    if (this === A3) return 0;
                                    let C2 = (B2 >>>= 0) - (Q2 >>>= 0),
                                        E2 = (g3 >>>= 0) - (I4 >>>= 0);
                                    const D2 = Math.min(C2, E2),
                                        w2 = this.slice(Q2, B2),
                                        o2 = A3.slice(I4, g3);
                                    for (let A4 = 0; A4 < D2; ++A4)
                                        if (w2[A4] !== o2[A4]) {
                                            (C2 = w2[A4]), (E2 = o2[A4]);
                                            break;
                                        }
                                    return C2 < E2 ? -1 : E2 < C2 ? 1 : 0;
                                }),
                                (i.prototype.includes = function (A3, I4, g3) {
                                    return -1 !== this.indexOf(A3, I4, g3);
                                }),
                                (i.prototype.indexOf = function (A3, I4, g3) {
                                    return R(this, A3, I4, g3, true);
                                }),
                                (i.prototype.lastIndexOf = function (A3, I4, g3) {
                                    return R(this, A3, I4, g3, false);
                                }),
                                (i.prototype.write = function (A3, I4, g3, Q2) {
                                    if (void 0 === I4) (Q2 = 'utf8'), (g3 = this.length), (I4 = 0);
                                    else if (void 0 === g3 && 'string' == typeof I4)
                                        (Q2 = I4), (g3 = this.length), (I4 = 0);
                                    else {
                                        if (!isFinite(I4))
                                            throw new Error(
                                                'Buffer.write(string, encoding, offset[, length]) is no longer supported'
                                            );
                                        (I4 >>>= 0),
                                            isFinite(g3)
                                                ? ((g3 >>>= 0), void 0 === Q2 && (Q2 = 'utf8'))
                                                : ((Q2 = g3), (g3 = void 0));
                                    }
                                    const B2 = this.length - I4;
                                    if (
                                        ((void 0 === g3 || g3 > B2) && (g3 = B2),
                                        (A3.length > 0 && (g3 < 0 || I4 < 0)) || I4 > this.length)
                                    )
                                        throw new RangeError('Attempt to write outside buffer bounds');
                                    Q2 || (Q2 = 'utf8');
                                    let C2 = false;
                                    for (;;)
                                        switch (Q2) {
                                            case 'hex':
                                                return J(this, A3, I4, g3);
                                            case 'utf8':
                                            case 'utf-8':
                                                return s(this, A3, I4, g3);
                                            case 'ascii':
                                            case 'latin1':
                                            case 'binary':
                                                return c(this, A3, I4, g3);
                                            case 'base64':
                                                return Y(this, A3, I4, g3);
                                            case 'ucs2':
                                            case 'ucs-2':
                                            case 'utf16le':
                                            case 'utf-16le':
                                                return U(this, A3, I4, g3);
                                            default:
                                                if (C2) throw new TypeError('Unknown encoding: ' + Q2);
                                                (Q2 = ('' + Q2).toLowerCase()), (C2 = true);
                                        }
                                }),
                                (i.prototype.toJSON = function () {
                                    return { type: 'Buffer', data: Array.prototype.slice.call(this._arr || this, 0) };
                                });
                            const K = 4096;
                            function q(A3, I4, g3) {
                                let Q2 = '';
                                g3 = Math.min(A3.length, g3);
                                for (let B2 = I4; B2 < g3; ++B2) Q2 += String.fromCharCode(127 & A3[B2]);
                                return Q2;
                            }
                            function H(A3, I4, g3) {
                                let Q2 = '';
                                g3 = Math.min(A3.length, g3);
                                for (let B2 = I4; B2 < g3; ++B2) Q2 += String.fromCharCode(A3[B2]);
                                return Q2;
                            }
                            function t(A3, I4, g3) {
                                const Q2 = A3.length;
                                (!I4 || I4 < 0) && (I4 = 0), (!g3 || g3 < 0 || g3 > Q2) && (g3 = Q2);
                                let B2 = '';
                                for (let Q3 = I4; Q3 < g3; ++Q3) B2 += v[A3[Q3]];
                                return B2;
                            }
                            function d(A3, I4, g3) {
                                const Q2 = A3.slice(I4, g3);
                                let B2 = '';
                                for (let A4 = 0; A4 < Q2.length - 1; A4 += 2)
                                    B2 += String.fromCharCode(Q2[A4] + 256 * Q2[A4 + 1]);
                                return B2;
                            }
                            function n(A3, I4, g3) {
                                if (A3 % 1 != 0 || A3 < 0) throw new RangeError('offset is not uint');
                                if (A3 + I4 > g3) throw new RangeError('Trying to access beyond buffer length');
                            }
                            function p(A3, I4, g3, Q2, B2, C2) {
                                if (!i.isBuffer(A3)) throw new TypeError('"buffer" argument must be a Buffer instance');
                                if (I4 > B2 || I4 < C2) throw new RangeError('"value" argument is out of bounds');
                                if (g3 + Q2 > A3.length) throw new RangeError('Index out of range');
                            }
                            function Z(A3, I4, g3, Q2, B2) {
                                m(I4, Q2, B2, A3, g3, 7);
                                let C2 = Number(I4 & BigInt(4294967295));
                                (A3[g3++] = C2),
                                    (C2 >>= 8),
                                    (A3[g3++] = C2),
                                    (C2 >>= 8),
                                    (A3[g3++] = C2),
                                    (C2 >>= 8),
                                    (A3[g3++] = C2);
                                let E2 = Number((I4 >> BigInt(32)) & BigInt(4294967295));
                                return (
                                    (A3[g3++] = E2),
                                    (E2 >>= 8),
                                    (A3[g3++] = E2),
                                    (E2 >>= 8),
                                    (A3[g3++] = E2),
                                    (E2 >>= 8),
                                    (A3[g3++] = E2),
                                    g3
                                );
                            }
                            function r(A3, I4, g3, Q2, B2) {
                                m(I4, Q2, B2, A3, g3, 7);
                                let C2 = Number(I4 & BigInt(4294967295));
                                (A3[g3 + 7] = C2),
                                    (C2 >>= 8),
                                    (A3[g3 + 6] = C2),
                                    (C2 >>= 8),
                                    (A3[g3 + 5] = C2),
                                    (C2 >>= 8),
                                    (A3[g3 + 4] = C2);
                                let E2 = Number((I4 >> BigInt(32)) & BigInt(4294967295));
                                return (
                                    (A3[g3 + 3] = E2),
                                    (E2 >>= 8),
                                    (A3[g3 + 2] = E2),
                                    (E2 >>= 8),
                                    (A3[g3 + 1] = E2),
                                    (E2 >>= 8),
                                    (A3[g3] = E2),
                                    g3 + 8
                                );
                            }
                            function b(A3, I4, g3, Q2, B2, C2) {
                                if (g3 + Q2 > A3.length) throw new RangeError('Index out of range');
                                if (g3 < 0) throw new RangeError('Index out of range');
                            }
                            function W2(A3, I4, g3, Q2, C2) {
                                return (
                                    (I4 = +I4),
                                    (g3 >>>= 0),
                                    C2 || b(A3, 0, g3, 4),
                                    B.write(A3, I4, g3, Q2, 23, 4),
                                    g3 + 4
                                );
                            }
                            function x(A3, I4, g3, Q2, C2) {
                                return (
                                    (I4 = +I4),
                                    (g3 >>>= 0),
                                    C2 || b(A3, 0, g3, 8),
                                    B.write(A3, I4, g3, Q2, 52, 8),
                                    g3 + 8
                                );
                            }
                            (i.prototype.slice = function (A3, I4) {
                                const g3 = this.length;
                                (A3 = ~~A3) < 0 ? (A3 += g3) < 0 && (A3 = 0) : A3 > g3 && (A3 = g3),
                                    (I4 = void 0 === I4 ? g3 : ~~I4) < 0
                                        ? (I4 += g3) < 0 && (I4 = 0)
                                        : I4 > g3 && (I4 = g3),
                                    I4 < A3 && (I4 = A3);
                                const Q2 = this.subarray(A3, I4);
                                return Object.setPrototypeOf(Q2, i.prototype), Q2;
                            }),
                                (i.prototype.readUintLE = i.prototype.readUIntLE =
                                    function (A3, I4, g3) {
                                        (A3 >>>= 0), (I4 >>>= 0), g3 || n(A3, I4, this.length);
                                        let Q2 = this[A3],
                                            B2 = 1,
                                            C2 = 0;
                                        for (; ++C2 < I4 && (B2 *= 256); ) Q2 += this[A3 + C2] * B2;
                                        return Q2;
                                    }),
                                (i.prototype.readUintBE = i.prototype.readUIntBE =
                                    function (A3, I4, g3) {
                                        (A3 >>>= 0), (I4 >>>= 0), g3 || n(A3, I4, this.length);
                                        let Q2 = this[A3 + --I4],
                                            B2 = 1;
                                        for (; I4 > 0 && (B2 *= 256); ) Q2 += this[A3 + --I4] * B2;
                                        return Q2;
                                    }),
                                (i.prototype.readUint8 = i.prototype.readUInt8 =
                                    function (A3, I4) {
                                        return (A3 >>>= 0), I4 || n(A3, 1, this.length), this[A3];
                                    }),
                                (i.prototype.readUint16LE = i.prototype.readUInt16LE =
                                    function (A3, I4) {
                                        return (A3 >>>= 0), I4 || n(A3, 2, this.length), this[A3] | (this[A3 + 1] << 8);
                                    }),
                                (i.prototype.readUint16BE = i.prototype.readUInt16BE =
                                    function (A3, I4) {
                                        return (A3 >>>= 0), I4 || n(A3, 2, this.length), (this[A3] << 8) | this[A3 + 1];
                                    }),
                                (i.prototype.readUint32LE = i.prototype.readUInt32LE =
                                    function (A3, I4) {
                                        return (
                                            (A3 >>>= 0),
                                            I4 || n(A3, 4, this.length),
                                            (this[A3] | (this[A3 + 1] << 8) | (this[A3 + 2] << 16)) +
                                                16777216 * this[A3 + 3]
                                        );
                                    }),
                                (i.prototype.readUint32BE = i.prototype.readUInt32BE =
                                    function (A3, I4) {
                                        return (
                                            (A3 >>>= 0),
                                            I4 || n(A3, 4, this.length),
                                            16777216 * this[A3] +
                                                ((this[A3 + 1] << 16) | (this[A3 + 2] << 8) | this[A3 + 3])
                                        );
                                    }),
                                (i.prototype.readBigUInt64LE = _(function (A3) {
                                    j((A3 >>>= 0), 'offset');
                                    const I4 = this[A3],
                                        g3 = this[A3 + 7];
                                    (void 0 !== I4 && void 0 !== g3) || f(A3, this.length - 8);
                                    const Q2 = I4 + 256 * this[++A3] + 65536 * this[++A3] + this[++A3] * 2 ** 24,
                                        B2 = this[++A3] + 256 * this[++A3] + 65536 * this[++A3] + g3 * 2 ** 24;
                                    return BigInt(Q2) + (BigInt(B2) << BigInt(32));
                                })),
                                (i.prototype.readBigUInt64BE = _(function (A3) {
                                    j((A3 >>>= 0), 'offset');
                                    const I4 = this[A3],
                                        g3 = this[A3 + 7];
                                    (void 0 !== I4 && void 0 !== g3) || f(A3, this.length - 8);
                                    const Q2 = I4 * 2 ** 24 + 65536 * this[++A3] + 256 * this[++A3] + this[++A3],
                                        B2 = this[++A3] * 2 ** 24 + 65536 * this[++A3] + 256 * this[++A3] + g3;
                                    return (BigInt(Q2) << BigInt(32)) + BigInt(B2);
                                })),
                                (i.prototype.readIntLE = function (A3, I4, g3) {
                                    (A3 >>>= 0), (I4 >>>= 0), g3 || n(A3, I4, this.length);
                                    let Q2 = this[A3],
                                        B2 = 1,
                                        C2 = 0;
                                    for (; ++C2 < I4 && (B2 *= 256); ) Q2 += this[A3 + C2] * B2;
                                    return (B2 *= 128), Q2 >= B2 && (Q2 -= Math.pow(2, 8 * I4)), Q2;
                                }),
                                (i.prototype.readIntBE = function (A3, I4, g3) {
                                    (A3 >>>= 0), (I4 >>>= 0), g3 || n(A3, I4, this.length);
                                    let Q2 = I4,
                                        B2 = 1,
                                        C2 = this[A3 + --Q2];
                                    for (; Q2 > 0 && (B2 *= 256); ) C2 += this[A3 + --Q2] * B2;
                                    return (B2 *= 128), C2 >= B2 && (C2 -= Math.pow(2, 8 * I4)), C2;
                                }),
                                (i.prototype.readInt8 = function (A3, I4) {
                                    return (
                                        (A3 >>>= 0),
                                        I4 || n(A3, 1, this.length),
                                        128 & this[A3] ? -1 * (255 - this[A3] + 1) : this[A3]
                                    );
                                }),
                                (i.prototype.readInt16LE = function (A3, I4) {
                                    (A3 >>>= 0), I4 || n(A3, 2, this.length);
                                    const g3 = this[A3] | (this[A3 + 1] << 8);
                                    return 32768 & g3 ? 4294901760 | g3 : g3;
                                }),
                                (i.prototype.readInt16BE = function (A3, I4) {
                                    (A3 >>>= 0), I4 || n(A3, 2, this.length);
                                    const g3 = this[A3 + 1] | (this[A3] << 8);
                                    return 32768 & g3 ? 4294901760 | g3 : g3;
                                }),
                                (i.prototype.readInt32LE = function (A3, I4) {
                                    return (
                                        (A3 >>>= 0),
                                        I4 || n(A3, 4, this.length),
                                        this[A3] | (this[A3 + 1] << 8) | (this[A3 + 2] << 16) | (this[A3 + 3] << 24)
                                    );
                                }),
                                (i.prototype.readInt32BE = function (A3, I4) {
                                    return (
                                        (A3 >>>= 0),
                                        I4 || n(A3, 4, this.length),
                                        (this[A3] << 24) | (this[A3 + 1] << 16) | (this[A3 + 2] << 8) | this[A3 + 3]
                                    );
                                }),
                                (i.prototype.readBigInt64LE = _(function (A3) {
                                    j((A3 >>>= 0), 'offset');
                                    const I4 = this[A3],
                                        g3 = this[A3 + 7];
                                    (void 0 !== I4 && void 0 !== g3) || f(A3, this.length - 8);
                                    const Q2 = this[A3 + 4] + 256 * this[A3 + 5] + 65536 * this[A3 + 6] + (g3 << 24);
                                    return (
                                        (BigInt(Q2) << BigInt(32)) +
                                        BigInt(I4 + 256 * this[++A3] + 65536 * this[++A3] + this[++A3] * 2 ** 24)
                                    );
                                })),
                                (i.prototype.readBigInt64BE = _(function (A3) {
                                    j((A3 >>>= 0), 'offset');
                                    const I4 = this[A3],
                                        g3 = this[A3 + 7];
                                    (void 0 !== I4 && void 0 !== g3) || f(A3, this.length - 8);
                                    const Q2 = (I4 << 24) + 65536 * this[++A3] + 256 * this[++A3] + this[++A3];
                                    return (
                                        (BigInt(Q2) << BigInt(32)) +
                                        BigInt(this[++A3] * 2 ** 24 + 65536 * this[++A3] + 256 * this[++A3] + g3)
                                    );
                                })),
                                (i.prototype.readFloatLE = function (A3, I4) {
                                    return (A3 >>>= 0), I4 || n(A3, 4, this.length), B.read(this, A3, true, 23, 4);
                                }),
                                (i.prototype.readFloatBE = function (A3, I4) {
                                    return (A3 >>>= 0), I4 || n(A3, 4, this.length), B.read(this, A3, false, 23, 4);
                                }),
                                (i.prototype.readDoubleLE = function (A3, I4) {
                                    return (A3 >>>= 0), I4 || n(A3, 8, this.length), B.read(this, A3, true, 52, 8);
                                }),
                                (i.prototype.readDoubleBE = function (A3, I4) {
                                    return (A3 >>>= 0), I4 || n(A3, 8, this.length), B.read(this, A3, false, 52, 8);
                                }),
                                (i.prototype.writeUintLE = i.prototype.writeUIntLE =
                                    function (A3, I4, g3, Q2) {
                                        (A3 = +A3),
                                            (I4 >>>= 0),
                                            (g3 >>>= 0),
                                            Q2 || p(this, A3, I4, g3, Math.pow(2, 8 * g3) - 1, 0);
                                        let B2 = 1,
                                            C2 = 0;
                                        for (this[I4] = 255 & A3; ++C2 < g3 && (B2 *= 256); )
                                            this[I4 + C2] = (A3 / B2) & 255;
                                        return I4 + g3;
                                    }),
                                (i.prototype.writeUintBE = i.prototype.writeUIntBE =
                                    function (A3, I4, g3, Q2) {
                                        (A3 = +A3),
                                            (I4 >>>= 0),
                                            (g3 >>>= 0),
                                            Q2 || p(this, A3, I4, g3, Math.pow(2, 8 * g3) - 1, 0);
                                        let B2 = g3 - 1,
                                            C2 = 1;
                                        for (this[I4 + B2] = 255 & A3; --B2 >= 0 && (C2 *= 256); )
                                            this[I4 + B2] = (A3 / C2) & 255;
                                        return I4 + g3;
                                    }),
                                (i.prototype.writeUint8 = i.prototype.writeUInt8 =
                                    function (A3, I4, g3) {
                                        return (
                                            (A3 = +A3),
                                            (I4 >>>= 0),
                                            g3 || p(this, A3, I4, 1, 255, 0),
                                            (this[I4] = 255 & A3),
                                            I4 + 1
                                        );
                                    }),
                                (i.prototype.writeUint16LE = i.prototype.writeUInt16LE =
                                    function (A3, I4, g3) {
                                        return (
                                            (A3 = +A3),
                                            (I4 >>>= 0),
                                            g3 || p(this, A3, I4, 2, 65535, 0),
                                            (this[I4] = 255 & A3),
                                            (this[I4 + 1] = A3 >>> 8),
                                            I4 + 2
                                        );
                                    }),
                                (i.prototype.writeUint16BE = i.prototype.writeUInt16BE =
                                    function (A3, I4, g3) {
                                        return (
                                            (A3 = +A3),
                                            (I4 >>>= 0),
                                            g3 || p(this, A3, I4, 2, 65535, 0),
                                            (this[I4] = A3 >>> 8),
                                            (this[I4 + 1] = 255 & A3),
                                            I4 + 2
                                        );
                                    }),
                                (i.prototype.writeUint32LE = i.prototype.writeUInt32LE =
                                    function (A3, I4, g3) {
                                        return (
                                            (A3 = +A3),
                                            (I4 >>>= 0),
                                            g3 || p(this, A3, I4, 4, 4294967295, 0),
                                            (this[I4 + 3] = A3 >>> 24),
                                            (this[I4 + 2] = A3 >>> 16),
                                            (this[I4 + 1] = A3 >>> 8),
                                            (this[I4] = 255 & A3),
                                            I4 + 4
                                        );
                                    }),
                                (i.prototype.writeUint32BE = i.prototype.writeUInt32BE =
                                    function (A3, I4, g3) {
                                        return (
                                            (A3 = +A3),
                                            (I4 >>>= 0),
                                            g3 || p(this, A3, I4, 4, 4294967295, 0),
                                            (this[I4] = A3 >>> 24),
                                            (this[I4 + 1] = A3 >>> 16),
                                            (this[I4 + 2] = A3 >>> 8),
                                            (this[I4 + 3] = 255 & A3),
                                            I4 + 4
                                        );
                                    }),
                                (i.prototype.writeBigUInt64LE = _(function (A3, I4 = 0) {
                                    return Z(this, A3, I4, BigInt(0), BigInt('0xffffffffffffffff'));
                                })),
                                (i.prototype.writeBigUInt64BE = _(function (A3, I4 = 0) {
                                    return r(this, A3, I4, BigInt(0), BigInt('0xffffffffffffffff'));
                                })),
                                (i.prototype.writeIntLE = function (A3, I4, g3, Q2) {
                                    if (((A3 = +A3), (I4 >>>= 0), !Q2)) {
                                        const Q3 = Math.pow(2, 8 * g3 - 1);
                                        p(this, A3, I4, g3, Q3 - 1, -Q3);
                                    }
                                    let B2 = 0,
                                        C2 = 1,
                                        E2 = 0;
                                    for (this[I4] = 255 & A3; ++B2 < g3 && (C2 *= 256); )
                                        A3 < 0 && 0 === E2 && 0 !== this[I4 + B2 - 1] && (E2 = 1),
                                            (this[I4 + B2] = (((A3 / C2) >> 0) - E2) & 255);
                                    return I4 + g3;
                                }),
                                (i.prototype.writeIntBE = function (A3, I4, g3, Q2) {
                                    if (((A3 = +A3), (I4 >>>= 0), !Q2)) {
                                        const Q3 = Math.pow(2, 8 * g3 - 1);
                                        p(this, A3, I4, g3, Q3 - 1, -Q3);
                                    }
                                    let B2 = g3 - 1,
                                        C2 = 1,
                                        E2 = 0;
                                    for (this[I4 + B2] = 255 & A3; --B2 >= 0 && (C2 *= 256); )
                                        A3 < 0 && 0 === E2 && 0 !== this[I4 + B2 + 1] && (E2 = 1),
                                            (this[I4 + B2] = (((A3 / C2) >> 0) - E2) & 255);
                                    return I4 + g3;
                                }),
                                (i.prototype.writeInt8 = function (A3, I4, g3) {
                                    return (
                                        (A3 = +A3),
                                        (I4 >>>= 0),
                                        g3 || p(this, A3, I4, 1, 127, -128),
                                        A3 < 0 && (A3 = 255 + A3 + 1),
                                        (this[I4] = 255 & A3),
                                        I4 + 1
                                    );
                                }),
                                (i.prototype.writeInt16LE = function (A3, I4, g3) {
                                    return (
                                        (A3 = +A3),
                                        (I4 >>>= 0),
                                        g3 || p(this, A3, I4, 2, 32767, -32768),
                                        (this[I4] = 255 & A3),
                                        (this[I4 + 1] = A3 >>> 8),
                                        I4 + 2
                                    );
                                }),
                                (i.prototype.writeInt16BE = function (A3, I4, g3) {
                                    return (
                                        (A3 = +A3),
                                        (I4 >>>= 0),
                                        g3 || p(this, A3, I4, 2, 32767, -32768),
                                        (this[I4] = A3 >>> 8),
                                        (this[I4 + 1] = 255 & A3),
                                        I4 + 2
                                    );
                                }),
                                (i.prototype.writeInt32LE = function (A3, I4, g3) {
                                    return (
                                        (A3 = +A3),
                                        (I4 >>>= 0),
                                        g3 || p(this, A3, I4, 4, 2147483647, -2147483648),
                                        (this[I4] = 255 & A3),
                                        (this[I4 + 1] = A3 >>> 8),
                                        (this[I4 + 2] = A3 >>> 16),
                                        (this[I4 + 3] = A3 >>> 24),
                                        I4 + 4
                                    );
                                }),
                                (i.prototype.writeInt32BE = function (A3, I4, g3) {
                                    return (
                                        (A3 = +A3),
                                        (I4 >>>= 0),
                                        g3 || p(this, A3, I4, 4, 2147483647, -2147483648),
                                        A3 < 0 && (A3 = 4294967295 + A3 + 1),
                                        (this[I4] = A3 >>> 24),
                                        (this[I4 + 1] = A3 >>> 16),
                                        (this[I4 + 2] = A3 >>> 8),
                                        (this[I4 + 3] = 255 & A3),
                                        I4 + 4
                                    );
                                }),
                                (i.prototype.writeBigInt64LE = _(function (A3, I4 = 0) {
                                    return Z(this, A3, I4, -BigInt('0x8000000000000000'), BigInt('0x7fffffffffffffff'));
                                })),
                                (i.prototype.writeBigInt64BE = _(function (A3, I4 = 0) {
                                    return r(this, A3, I4, -BigInt('0x8000000000000000'), BigInt('0x7fffffffffffffff'));
                                })),
                                (i.prototype.writeFloatLE = function (A3, I4, g3) {
                                    return W2(this, A3, I4, true, g3);
                                }),
                                (i.prototype.writeFloatBE = function (A3, I4, g3) {
                                    return W2(this, A3, I4, false, g3);
                                }),
                                (i.prototype.writeDoubleLE = function (A3, I4, g3) {
                                    return x(this, A3, I4, true, g3);
                                }),
                                (i.prototype.writeDoubleBE = function (A3, I4, g3) {
                                    return x(this, A3, I4, false, g3);
                                }),
                                (i.prototype.copy = function (A3, I4, g3, Q2) {
                                    if (!i.isBuffer(A3)) throw new TypeError('argument should be a Buffer');
                                    if (
                                        (g3 || (g3 = 0),
                                        Q2 || 0 === Q2 || (Q2 = this.length),
                                        I4 >= A3.length && (I4 = A3.length),
                                        I4 || (I4 = 0),
                                        Q2 > 0 && Q2 < g3 && (Q2 = g3),
                                        Q2 === g3)
                                    )
                                        return 0;
                                    if (0 === A3.length || 0 === this.length) return 0;
                                    if (I4 < 0) throw new RangeError('targetStart out of bounds');
                                    if (g3 < 0 || g3 >= this.length) throw new RangeError('Index out of range');
                                    if (Q2 < 0) throw new RangeError('sourceEnd out of bounds');
                                    Q2 > this.length && (Q2 = this.length),
                                        A3.length - I4 < Q2 - g3 && (Q2 = A3.length - I4 + g3);
                                    const B2 = Q2 - g3;
                                    return (
                                        this === A3 && 'function' == typeof Uint8Array.prototype.copyWithin
                                            ? this.copyWithin(I4, g3, Q2)
                                            : Uint8Array.prototype.set.call(A3, this.subarray(g3, Q2), I4),
                                        B2
                                    );
                                }),
                                (i.prototype.fill = function (A3, I4, g3, Q2) {
                                    if ('string' == typeof A3) {
                                        if (
                                            ('string' == typeof I4
                                                ? ((Q2 = I4), (I4 = 0), (g3 = this.length))
                                                : 'string' == typeof g3 && ((Q2 = g3), (g3 = this.length)),
                                            void 0 !== Q2 && 'string' != typeof Q2)
                                        )
                                            throw new TypeError('encoding must be a string');
                                        if ('string' == typeof Q2 && !i.isEncoding(Q2))
                                            throw new TypeError('Unknown encoding: ' + Q2);
                                        if (1 === A3.length) {
                                            const I5 = A3.charCodeAt(0);
                                            (('utf8' === Q2 && I5 < 128) || 'latin1' === Q2) && (A3 = I5);
                                        }
                                    } else
                                        'number' == typeof A3
                                            ? (A3 &= 255)
                                            : 'boolean' == typeof A3 && (A3 = Number(A3));
                                    if (I4 < 0 || this.length < I4 || this.length < g3)
                                        throw new RangeError('Out of range index');
                                    if (g3 <= I4) return this;
                                    let B2;
                                    if (
                                        ((I4 >>>= 0),
                                        (g3 = void 0 === g3 ? this.length : g3 >>> 0),
                                        A3 || (A3 = 0),
                                        'number' == typeof A3)
                                    )
                                        for (B2 = I4; B2 < g3; ++B2) this[B2] = A3;
                                    else {
                                        const C2 = i.isBuffer(A3) ? A3 : i.from(A3, Q2),
                                            E2 = C2.length;
                                        if (0 === E2)
                                            throw new TypeError(
                                                'The value "' + A3 + '" is invalid for argument "value"'
                                            );
                                        for (B2 = 0; B2 < g3 - I4; ++B2) this[B2 + I4] = C2[B2 % E2];
                                    }
                                    return this;
                                });
                            const e = {};
                            function l(A3, I4, g3) {
                                e[A3] = class extends g3 {
                                    constructor() {
                                        super(),
                                            Object.defineProperty(this, 'message', {
                                                value: I4.apply(this, arguments),
                                                writable: true,
                                                configurable: true,
                                            }),
                                            (this.name = `${this.name} [${A3}]`),
                                            this.stack,
                                            delete this.name;
                                    }
                                    get code() {
                                        return A3;
                                    }
                                    set code(A4) {
                                        Object.defineProperty(this, 'code', {
                                            configurable: true,
                                            enumerable: true,
                                            value: A4,
                                            writable: true,
                                        });
                                    }
                                    toString() {
                                        return `${this.name} [${A3}]: ${this.message}`;
                                    }
                                };
                            }
                            function T(A3) {
                                let I4 = '',
                                    g3 = A3.length;
                                const Q2 = '-' === A3[0] ? 1 : 0;
                                for (; g3 >= Q2 + 4; g3 -= 3) I4 = `_${A3.slice(g3 - 3, g3)}${I4}`;
                                return `${A3.slice(0, g3)}${I4}`;
                            }
                            function m(A3, I4, g3, Q2, B2, C2) {
                                if (A3 > g3 || A3 < I4) {
                                    const Q3 = 'bigint' == typeof I4 ? 'n' : '';
                                    let B3;
                                    throw (
                                        ((B3 =
                                            C2 > 3
                                                ? 0 === I4 || I4 === BigInt(0)
                                                    ? `>= 0${Q3} and < 2${Q3} ** ${8 * (C2 + 1)}${Q3}`
                                                    : `>= -(2${Q3} ** ${8 * (C2 + 1) - 1}${Q3}) and < 2 ** ${8 * (C2 + 1) - 1}${Q3}`
                                                : `>= ${I4}${Q3} and <= ${g3}${Q3}`),
                                        new e.ERR_OUT_OF_RANGE('value', B3, A3))
                                    );
                                }
                                !(function (A4, I5, g4) {
                                    j(I5, 'offset'),
                                        (void 0 !== A4[I5] && void 0 !== A4[I5 + g4]) || f(I5, A4.length - (g4 + 1));
                                })(Q2, B2, C2);
                            }
                            function j(A3, I4) {
                                if ('number' != typeof A3) throw new e.ERR_INVALID_ARG_TYPE(I4, 'number', A3);
                            }
                            function f(A3, I4, g3) {
                                if (Math.floor(A3) !== A3)
                                    throw (j(A3, g3), new e.ERR_OUT_OF_RANGE(g3 || 'offset', 'an integer', A3));
                                if (I4 < 0) throw new e.ERR_BUFFER_OUT_OF_BOUNDS();
                                throw new e.ERR_OUT_OF_RANGE(g3 || 'offset', `>= ${g3 ? 1 : 0} and <= ${I4}`, A3);
                            }
                            l(
                                'ERR_BUFFER_OUT_OF_BOUNDS',
                                function (A3) {
                                    return A3
                                        ? `${A3} is outside of buffer bounds`
                                        : 'Attempt to access memory outside buffer bounds';
                                },
                                RangeError
                            ),
                                l(
                                    'ERR_INVALID_ARG_TYPE',
                                    function (A3, I4) {
                                        return `The "${A3}" argument must be of type number. Received type ${typeof I4}`;
                                    },
                                    TypeError
                                ),
                                l(
                                    'ERR_OUT_OF_RANGE',
                                    function (A3, I4, g3) {
                                        let Q2 = `The value of "${A3}" is out of range.`,
                                            B2 = g3;
                                        return (
                                            Number.isInteger(g3) && Math.abs(g3) > 2 ** 32
                                                ? (B2 = T(String(g3)))
                                                : 'bigint' == typeof g3 &&
                                                  ((B2 = String(g3)),
                                                  (g3 > BigInt(2) ** BigInt(32) || g3 < -(BigInt(2) ** BigInt(32))) &&
                                                      (B2 = T(B2)),
                                                  (B2 += 'n')),
                                            (Q2 += ` It must be ${I4}. Received ${B2}`),
                                            Q2
                                        );
                                    },
                                    RangeError
                                );
                            const V = /[^+/0-9A-Za-z-_]/g;
                            function O(A3, I4) {
                                let g3;
                                I4 = I4 || 1 / 0;
                                const Q2 = A3.length;
                                let B2 = null;
                                const C2 = [];
                                for (let E2 = 0; E2 < Q2; ++E2) {
                                    if (((g3 = A3.charCodeAt(E2)), g3 > 55295 && g3 < 57344)) {
                                        if (!B2) {
                                            if (g3 > 56319) {
                                                (I4 -= 3) > -1 && C2.push(239, 191, 189);
                                                continue;
                                            }
                                            if (E2 + 1 === Q2) {
                                                (I4 -= 3) > -1 && C2.push(239, 191, 189);
                                                continue;
                                            }
                                            B2 = g3;
                                            continue;
                                        }
                                        if (g3 < 56320) {
                                            (I4 -= 3) > -1 && C2.push(239, 191, 189), (B2 = g3);
                                            continue;
                                        }
                                        g3 = 65536 + (((B2 - 55296) << 10) | (g3 - 56320));
                                    } else B2 && (I4 -= 3) > -1 && C2.push(239, 191, 189);
                                    if (((B2 = null), g3 < 128)) {
                                        if ((I4 -= 1) < 0) break;
                                        C2.push(g3);
                                    } else if (g3 < 2048) {
                                        if ((I4 -= 2) < 0) break;
                                        C2.push((g3 >> 6) | 192, (63 & g3) | 128);
                                    } else if (g3 < 65536) {
                                        if ((I4 -= 3) < 0) break;
                                        C2.push((g3 >> 12) | 224, ((g3 >> 6) & 63) | 128, (63 & g3) | 128);
                                    } else {
                                        if (!(g3 < 1114112)) throw new Error('Invalid code point');
                                        if ((I4 -= 4) < 0) break;
                                        C2.push(
                                            (g3 >> 18) | 240,
                                            ((g3 >> 12) & 63) | 128,
                                            ((g3 >> 6) & 63) | 128,
                                            (63 & g3) | 128
                                        );
                                    }
                                }
                                return C2;
                            }
                            function u(A3) {
                                return Q.toByteArray(
                                    (function (A4) {
                                        if ((A4 = (A4 = A4.split('=')[0]).trim().replace(V, '')).length < 2) return '';
                                        for (; A4.length % 4 != 0; ) A4 += '=';
                                        return A4;
                                    })(A3)
                                );
                            }
                            function z(A3, I4, g3, Q2) {
                                let B2;
                                for (B2 = 0; B2 < Q2 && !(B2 + g3 >= I4.length || B2 >= A3.length); ++B2)
                                    I4[B2 + g3] = A3[B2];
                                return B2;
                            }
                            function X(A3, I4) {
                                return (
                                    A3 instanceof I4 ||
                                    (null != A3 &&
                                        null != A3.constructor &&
                                        null != A3.constructor.name &&
                                        A3.constructor.name === I4.name)
                                );
                            }
                            function P3(A3) {
                                return A3 != A3;
                            }
                            const v = (function () {
                                const A3 = '0123456789abcdef',
                                    I4 = new Array(256);
                                for (let g3 = 0; g3 < 16; ++g3) {
                                    const Q2 = 16 * g3;
                                    for (let B2 = 0; B2 < 16; ++B2) I4[Q2 + B2] = A3[g3] + A3[B2];
                                }
                                return I4;
                            })();
                            function _(A3) {
                                return 'undefined' == typeof BigInt ? $ : A3;
                            }
                            function $() {
                                throw new Error('BigInt not supported');
                            }
                        },
                        333: (A2, I3) => {
                            (I3.read = function (A3, I4, g2, Q, B) {
                                var C,
                                    E,
                                    D = 8 * B - Q - 1,
                                    i = (1 << D) - 1,
                                    w = i >> 1,
                                    o = -7,
                                    G2 = g2 ? B - 1 : 0,
                                    N2 = g2 ? -1 : 1,
                                    M = A3[I4 + G2];
                                for (
                                    G2 += N2, C = M & ((1 << -o) - 1), M >>= -o, o += D;
                                    o > 0;
                                    C = 256 * C + A3[I4 + G2], G2 += N2, o -= 8
                                );
                                for (
                                    E = C & ((1 << -o) - 1), C >>= -o, o += Q;
                                    o > 0;
                                    E = 256 * E + A3[I4 + G2], G2 += N2, o -= 8
                                );
                                if (0 === C) C = 1 - w;
                                else {
                                    if (C === i) return E ? NaN : (1 / 0) * (M ? -1 : 1);
                                    (E += Math.pow(2, Q)), (C -= w);
                                }
                                return (M ? -1 : 1) * E * Math.pow(2, C - Q);
                            }),
                                (I3.write = function (A3, I4, g2, Q, B, C) {
                                    var E,
                                        D,
                                        i,
                                        w = 8 * C - B - 1,
                                        o = (1 << w) - 1,
                                        G2 = o >> 1,
                                        N2 = 23 === B ? Math.pow(2, -24) - Math.pow(2, -77) : 0,
                                        M = Q ? 0 : C - 1,
                                        k = Q ? 1 : -1,
                                        y = I4 < 0 || (0 === I4 && 1 / I4 < 0) ? 1 : 0;
                                    for (
                                        I4 = Math.abs(I4),
                                            isNaN(I4) || I4 === 1 / 0
                                                ? ((D = isNaN(I4) ? 1 : 0), (E = o))
                                                : ((E = Math.floor(Math.log(I4) / Math.LN2)),
                                                  I4 * (i = Math.pow(2, -E)) < 1 && (E--, (i *= 2)),
                                                  (I4 += E + G2 >= 1 ? N2 / i : N2 * Math.pow(2, 1 - G2)) * i >= 2 &&
                                                      (E++, (i /= 2)),
                                                  E + G2 >= o
                                                      ? ((D = 0), (E = o))
                                                      : E + G2 >= 1
                                                        ? ((D = (I4 * i - 1) * Math.pow(2, B)), (E += G2))
                                                        : ((D = I4 * Math.pow(2, G2 - 1) * Math.pow(2, B)), (E = 0)));
                                        B >= 8;
                                        A3[g2 + M] = 255 & D, M += k, D /= 256, B -= 8
                                    );
                                    for (
                                        E = (E << B) | D, w += B;
                                        w > 0;
                                        A3[g2 + M] = 255 & E, M += k, E /= 256, w -= 8
                                    );
                                    A3[g2 + M - k] |= 128 * y;
                                });
                        },
                        530: function (A2, I3, g2) {
                            'use strict';
                            var Q =
                                    (this && this.__createBinding) ||
                                    (Object.create
                                        ? function (A3, I4, g3, Q2) {
                                              void 0 === Q2 && (Q2 = g3);
                                              var B2 = Object.getOwnPropertyDescriptor(I4, g3);
                                              (B2 &&
                                                  !('get' in B2 ? !I4.__esModule : B2.writable || B2.configurable)) ||
                                                  (B2 = {
                                                      enumerable: true,
                                                      get: function () {
                                                          return I4[g3];
                                                      },
                                                  }),
                                                  Object.defineProperty(A3, Q2, B2);
                                          }
                                        : function (A3, I4, g3, Q2) {
                                              void 0 === Q2 && (Q2 = g3), (A3[Q2] = I4[g3]);
                                          }),
                                B =
                                    (this && this.__exportStar) ||
                                    function (A3, I4) {
                                        for (var g3 in A3)
                                            'default' === g3 ||
                                                Object.prototype.hasOwnProperty.call(I4, g3) ||
                                                Q(I4, A3, g3);
                                    },
                                C =
                                    (this && this.__importDefault) ||
                                    function (A3) {
                                        return A3 && A3.__esModule ? A3 : { default: A3 };
                                    };
                            Object.defineProperty(I3, '__esModule', { value: true });
                            const E = g2(834),
                                D = g2(408),
                                i = C(g2(395)),
                                w = E.Buffer.from(i.default, 'base64');
                            (0, D.initSync)(w), B(g2(408), I3);
                        },
                        408: (A2, I3, g2) => {
                            'use strict';
                            let Q;
                            g2.r(I3),
                                g2.d(I3, {
                                    default: () => p,
                                    deserializeInitError: () => s,
                                    deserializeReceiveError: () => J,
                                    deserializeReceiveReturnValue: () => h,
                                    deserializeState: () => R,
                                    deserializeTypeValue: () => K,
                                    displayTypeSchemaTemplate: () => q,
                                    getInitContractParameterSchema: () => L,
                                    getReceiveContractParameterSchema: () => U,
                                    initSync: () => d,
                                    serializeInitContractParameters: () => Y,
                                    serializeReceiveContractParameters: () => c,
                                    serializeTypeValue: () => S,
                                });
                            const B =
                                'undefined' != typeof TextDecoder
                                    ? new TextDecoder('utf-8', { ignoreBOM: true, fatal: true })
                                    : {
                                          decode: () => {
                                              throw Error('TextDecoder not available');
                                          },
                                      };
                            'undefined' != typeof TextDecoder && B.decode();
                            let C = null;
                            function E() {
                                return (null !== C && 0 !== C.byteLength) || (C = new Uint8Array(Q.memory.buffer)), C;
                            }
                            function D(A3, I4) {
                                return (A3 >>>= 0), B.decode(E().subarray(A3, A3 + I4));
                            }
                            const i = new Array(128).fill(void 0);
                            i.push(void 0, null, true, false);
                            let w = i.length,
                                o = 0;
                            const G2 =
                                    'undefined' != typeof TextEncoder
                                        ? new TextEncoder('utf-8')
                                        : {
                                              encode: () => {
                                                  throw Error('TextEncoder not available');
                                              },
                                          },
                                N2 =
                                    'function' == typeof G2.encodeInto
                                        ? function (A3, I4) {
                                              return G2.encodeInto(A3, I4);
                                          }
                                        : function (A3, I4) {
                                              const g3 = G2.encode(A3);
                                              return I4.set(g3), { read: A3.length, written: g3.length };
                                          };
                            function M(A3, I4, g3) {
                                if (void 0 === g3) {
                                    const g4 = G2.encode(A3),
                                        Q3 = I4(g4.length, 1) >>> 0;
                                    return (
                                        E()
                                            .subarray(Q3, Q3 + g4.length)
                                            .set(g4),
                                        (o = g4.length),
                                        Q3
                                    );
                                }
                                let Q2 = A3.length,
                                    B2 = I4(Q2, 1) >>> 0;
                                const C2 = E();
                                let D2 = 0;
                                for (; D2 < Q2; D2++) {
                                    const I5 = A3.charCodeAt(D2);
                                    if (I5 > 127) break;
                                    C2[B2 + D2] = I5;
                                }
                                if (D2 !== Q2) {
                                    0 !== D2 && (A3 = A3.slice(D2)),
                                        (B2 = g3(B2, Q2, (Q2 = D2 + 3 * A3.length), 1) >>> 0);
                                    const I5 = E().subarray(B2 + D2, B2 + Q2);
                                    D2 += N2(A3, I5).written;
                                }
                                return (o = D2), B2;
                            }
                            function k(A3) {
                                return null == A3;
                            }
                            let y = null;
                            function F() {
                                return (null !== y && 0 !== y.byteLength) || (y = new Int32Array(Q.memory.buffer)), y;
                            }
                            function a(A3) {
                                const I4 = (function (A4) {
                                    return i[A4];
                                })(A3);
                                return (
                                    (function (A4) {
                                        A4 < 132 || ((i[A4] = w), (w = A4));
                                    })(A3),
                                    I4
                                );
                            }
                            function R(A3, I4, g3, B2) {
                                let C2, E2;
                                try {
                                    const h2 = Q.__wbindgen_add_to_stack_pointer(-16),
                                        J2 = M(A3, Q.__wbindgen_malloc, Q.__wbindgen_realloc),
                                        s2 = o,
                                        c2 = M(I4, Q.__wbindgen_malloc, Q.__wbindgen_realloc),
                                        Y2 = o,
                                        U2 = M(g3, Q.__wbindgen_malloc, Q.__wbindgen_realloc),
                                        L2 = o;
                                    Q.deserializeState(h2, J2, s2, c2, Y2, U2, L2, k(B2) ? 16777215 : B2 ? 1 : 0);
                                    var i2 = F()[h2 / 4 + 0],
                                        w2 = F()[h2 / 4 + 1],
                                        G3 = F()[h2 / 4 + 2],
                                        N3 = F()[h2 / 4 + 3],
                                        y2 = i2,
                                        R2 = w2;
                                    if (N3) throw ((y2 = 0), (R2 = 0), a(G3));
                                    return (C2 = y2), (E2 = R2), D(y2, R2);
                                } finally {
                                    Q.__wbindgen_add_to_stack_pointer(16), Q.__wbindgen_free(C2, E2, 1);
                                }
                            }
                            function h(A3, I4, g3, B2, C2, E2) {
                                let i2, w2;
                                try {
                                    const s2 = Q.__wbindgen_add_to_stack_pointer(-16),
                                        c2 = M(A3, Q.__wbindgen_malloc, Q.__wbindgen_realloc),
                                        Y2 = o,
                                        U2 = M(I4, Q.__wbindgen_malloc, Q.__wbindgen_realloc),
                                        L2 = o,
                                        S2 = M(g3, Q.__wbindgen_malloc, Q.__wbindgen_realloc),
                                        K2 = o,
                                        q2 = M(B2, Q.__wbindgen_malloc, Q.__wbindgen_realloc),
                                        H2 = o;
                                    Q.deserializeReceiveReturnValue(
                                        s2,
                                        c2,
                                        Y2,
                                        U2,
                                        L2,
                                        S2,
                                        K2,
                                        q2,
                                        H2,
                                        k(C2) ? 16777215 : C2,
                                        k(E2) ? 16777215 : E2 ? 1 : 0
                                    );
                                    var G3 = F()[s2 / 4 + 0],
                                        N3 = F()[s2 / 4 + 1],
                                        y2 = F()[s2 / 4 + 2],
                                        R2 = F()[s2 / 4 + 3],
                                        h2 = G3,
                                        J2 = N3;
                                    if (R2) throw ((h2 = 0), (J2 = 0), a(y2));
                                    return (i2 = h2), (w2 = J2), D(h2, J2);
                                } finally {
                                    Q.__wbindgen_add_to_stack_pointer(16), Q.__wbindgen_free(i2, w2, 1);
                                }
                            }
                            function J(A3, I4, g3, B2, C2) {
                                let E2, i2;
                                try {
                                    const J2 = Q.__wbindgen_add_to_stack_pointer(-16),
                                        s2 = M(A3, Q.__wbindgen_malloc, Q.__wbindgen_realloc),
                                        c2 = o,
                                        Y2 = M(I4, Q.__wbindgen_malloc, Q.__wbindgen_realloc),
                                        U2 = o,
                                        L2 = M(g3, Q.__wbindgen_malloc, Q.__wbindgen_realloc),
                                        S2 = o,
                                        K2 = M(B2, Q.__wbindgen_malloc, Q.__wbindgen_realloc),
                                        q2 = o;
                                    Q.deserializeReceiveError(
                                        J2,
                                        s2,
                                        c2,
                                        Y2,
                                        U2,
                                        L2,
                                        S2,
                                        K2,
                                        q2,
                                        k(C2) ? 16777215 : C2 ? 1 : 0
                                    );
                                    var w2 = F()[J2 / 4 + 0],
                                        G3 = F()[J2 / 4 + 1],
                                        N3 = F()[J2 / 4 + 2],
                                        y2 = F()[J2 / 4 + 3],
                                        R2 = w2,
                                        h2 = G3;
                                    if (y2) throw ((R2 = 0), (h2 = 0), a(N3));
                                    return (E2 = R2), (i2 = h2), D(R2, h2);
                                } finally {
                                    Q.__wbindgen_add_to_stack_pointer(16), Q.__wbindgen_free(E2, i2, 1);
                                }
                            }
                            function s(A3, I4, g3, B2) {
                                let C2, E2;
                                try {
                                    const h2 = Q.__wbindgen_add_to_stack_pointer(-16),
                                        J2 = M(A3, Q.__wbindgen_malloc, Q.__wbindgen_realloc),
                                        s2 = o,
                                        c2 = M(I4, Q.__wbindgen_malloc, Q.__wbindgen_realloc),
                                        Y2 = o,
                                        U2 = M(g3, Q.__wbindgen_malloc, Q.__wbindgen_realloc),
                                        L2 = o;
                                    Q.deserializeInitError(h2, J2, s2, c2, Y2, U2, L2, k(B2) ? 16777215 : B2 ? 1 : 0);
                                    var i2 = F()[h2 / 4 + 0],
                                        w2 = F()[h2 / 4 + 1],
                                        G3 = F()[h2 / 4 + 2],
                                        N3 = F()[h2 / 4 + 3],
                                        y2 = i2,
                                        R2 = w2;
                                    if (N3) throw ((y2 = 0), (R2 = 0), a(G3));
                                    return (C2 = y2), (E2 = R2), D(y2, R2);
                                } finally {
                                    Q.__wbindgen_add_to_stack_pointer(16), Q.__wbindgen_free(C2, E2, 1);
                                }
                            }
                            function c(A3, I4, g3, B2, C2, E2) {
                                let i2, w2;
                                try {
                                    const s2 = Q.__wbindgen_add_to_stack_pointer(-16),
                                        c2 = M(A3, Q.__wbindgen_malloc, Q.__wbindgen_realloc),
                                        Y2 = o,
                                        U2 = M(I4, Q.__wbindgen_malloc, Q.__wbindgen_realloc),
                                        L2 = o,
                                        S2 = M(g3, Q.__wbindgen_malloc, Q.__wbindgen_realloc),
                                        K2 = o,
                                        q2 = M(B2, Q.__wbindgen_malloc, Q.__wbindgen_realloc),
                                        H2 = o;
                                    Q.serializeReceiveContractParameters(
                                        s2,
                                        c2,
                                        Y2,
                                        U2,
                                        L2,
                                        S2,
                                        K2,
                                        q2,
                                        H2,
                                        k(C2) ? 16777215 : C2,
                                        k(E2) ? 16777215 : E2 ? 1 : 0
                                    );
                                    var G3 = F()[s2 / 4 + 0],
                                        N3 = F()[s2 / 4 + 1],
                                        y2 = F()[s2 / 4 + 2],
                                        R2 = F()[s2 / 4 + 3],
                                        h2 = G3,
                                        J2 = N3;
                                    if (R2) throw ((h2 = 0), (J2 = 0), a(y2));
                                    return (i2 = h2), (w2 = J2), D(h2, J2);
                                } finally {
                                    Q.__wbindgen_add_to_stack_pointer(16), Q.__wbindgen_free(i2, w2, 1);
                                }
                            }
                            function Y(A3, I4, g3, B2, C2) {
                                let E2, i2;
                                try {
                                    const J2 = Q.__wbindgen_add_to_stack_pointer(-16),
                                        s2 = M(A3, Q.__wbindgen_malloc, Q.__wbindgen_realloc),
                                        c2 = o,
                                        Y2 = M(I4, Q.__wbindgen_malloc, Q.__wbindgen_realloc),
                                        U2 = o,
                                        L2 = M(g3, Q.__wbindgen_malloc, Q.__wbindgen_realloc),
                                        S2 = o;
                                    Q.serializeInitContractParameters(
                                        J2,
                                        s2,
                                        c2,
                                        Y2,
                                        U2,
                                        L2,
                                        S2,
                                        k(B2) ? 16777215 : B2,
                                        k(C2) ? 16777215 : C2 ? 1 : 0
                                    );
                                    var w2 = F()[J2 / 4 + 0],
                                        G3 = F()[J2 / 4 + 1],
                                        N3 = F()[J2 / 4 + 2],
                                        y2 = F()[J2 / 4 + 3],
                                        R2 = w2,
                                        h2 = G3;
                                    if (y2) throw ((R2 = 0), (h2 = 0), a(N3));
                                    return (E2 = R2), (i2 = h2), D(R2, h2);
                                } finally {
                                    Q.__wbindgen_add_to_stack_pointer(16), Q.__wbindgen_free(E2, i2, 1);
                                }
                            }
                            function U(A3, I4, g3, B2) {
                                let C2, E2;
                                try {
                                    const h2 = Q.__wbindgen_add_to_stack_pointer(-16),
                                        J2 = M(A3, Q.__wbindgen_malloc, Q.__wbindgen_realloc),
                                        s2 = o,
                                        c2 = M(I4, Q.__wbindgen_malloc, Q.__wbindgen_realloc),
                                        Y2 = o,
                                        U2 = M(g3, Q.__wbindgen_malloc, Q.__wbindgen_realloc),
                                        L2 = o;
                                    Q.getReceiveContractParameterSchema(
                                        h2,
                                        J2,
                                        s2,
                                        c2,
                                        Y2,
                                        U2,
                                        L2,
                                        k(B2) ? 16777215 : B2
                                    );
                                    var i2 = F()[h2 / 4 + 0],
                                        w2 = F()[h2 / 4 + 1],
                                        G3 = F()[h2 / 4 + 2],
                                        N3 = F()[h2 / 4 + 3],
                                        y2 = i2,
                                        R2 = w2;
                                    if (N3) throw ((y2 = 0), (R2 = 0), a(G3));
                                    return (C2 = y2), (E2 = R2), D(y2, R2);
                                } finally {
                                    Q.__wbindgen_add_to_stack_pointer(16), Q.__wbindgen_free(C2, E2, 1);
                                }
                            }
                            function L(A3, I4, g3) {
                                let B2, C2;
                                try {
                                    const R2 = Q.__wbindgen_add_to_stack_pointer(-16),
                                        h2 = M(A3, Q.__wbindgen_malloc, Q.__wbindgen_realloc),
                                        J2 = o,
                                        s2 = M(I4, Q.__wbindgen_malloc, Q.__wbindgen_realloc),
                                        c2 = o;
                                    Q.getInitContractParameterSchema(R2, h2, J2, s2, c2, k(g3) ? 16777215 : g3);
                                    var E2 = F()[R2 / 4 + 0],
                                        i2 = F()[R2 / 4 + 1],
                                        w2 = F()[R2 / 4 + 2],
                                        G3 = F()[R2 / 4 + 3],
                                        N3 = E2,
                                        y2 = i2;
                                    if (G3) throw ((N3 = 0), (y2 = 0), a(w2));
                                    return (B2 = N3), (C2 = y2), D(N3, y2);
                                } finally {
                                    Q.__wbindgen_add_to_stack_pointer(16), Q.__wbindgen_free(B2, C2, 1);
                                }
                            }
                            function S(A3, I4, g3) {
                                let B2, C2;
                                try {
                                    const R2 = Q.__wbindgen_add_to_stack_pointer(-16),
                                        h2 = M(A3, Q.__wbindgen_malloc, Q.__wbindgen_realloc),
                                        J2 = o,
                                        s2 = M(I4, Q.__wbindgen_malloc, Q.__wbindgen_realloc),
                                        c2 = o;
                                    Q.serializeTypeValue(R2, h2, J2, s2, c2, k(g3) ? 16777215 : g3 ? 1 : 0);
                                    var E2 = F()[R2 / 4 + 0],
                                        i2 = F()[R2 / 4 + 1],
                                        w2 = F()[R2 / 4 + 2],
                                        G3 = F()[R2 / 4 + 3],
                                        N3 = E2,
                                        y2 = i2;
                                    if (G3) throw ((N3 = 0), (y2 = 0), a(w2));
                                    return (B2 = N3), (C2 = y2), D(N3, y2);
                                } finally {
                                    Q.__wbindgen_add_to_stack_pointer(16), Q.__wbindgen_free(B2, C2, 1);
                                }
                            }
                            function K(A3, I4, g3) {
                                let B2, C2;
                                try {
                                    const R2 = Q.__wbindgen_add_to_stack_pointer(-16),
                                        h2 = M(A3, Q.__wbindgen_malloc, Q.__wbindgen_realloc),
                                        J2 = o,
                                        s2 = M(I4, Q.__wbindgen_malloc, Q.__wbindgen_realloc),
                                        c2 = o;
                                    Q.deserializeTypeValue(R2, h2, J2, s2, c2, k(g3) ? 16777215 : g3 ? 1 : 0);
                                    var E2 = F()[R2 / 4 + 0],
                                        i2 = F()[R2 / 4 + 1],
                                        w2 = F()[R2 / 4 + 2],
                                        G3 = F()[R2 / 4 + 3],
                                        N3 = E2,
                                        y2 = i2;
                                    if (G3) throw ((N3 = 0), (y2 = 0), a(w2));
                                    return (B2 = N3), (C2 = y2), D(N3, y2);
                                } finally {
                                    Q.__wbindgen_add_to_stack_pointer(16), Q.__wbindgen_free(B2, C2, 1);
                                }
                            }
                            function q(A3) {
                                let I4, g3;
                                try {
                                    const N3 = Q.__wbindgen_add_to_stack_pointer(-16),
                                        k2 = M(A3, Q.__wbindgen_malloc, Q.__wbindgen_realloc),
                                        y2 = o;
                                    Q.displayTypeSchemaTemplate(N3, k2, y2);
                                    var B2 = F()[N3 / 4 + 0],
                                        C2 = F()[N3 / 4 + 1],
                                        E2 = F()[N3 / 4 + 2],
                                        i2 = F()[N3 / 4 + 3],
                                        w2 = B2,
                                        G3 = C2;
                                    if (i2) throw ((w2 = 0), (G3 = 0), a(E2));
                                    return (I4 = w2), (g3 = G3), D(w2, G3);
                                } finally {
                                    Q.__wbindgen_add_to_stack_pointer(16), Q.__wbindgen_free(I4, g3, 1);
                                }
                            }
                            function H() {
                                const A3 = { wbg: {} };
                                return (
                                    (A3.wbg.__wbindgen_error_new = function (A4, I4) {
                                        return (function (A5) {
                                            w === i.length && i.push(i.length + 1);
                                            const I5 = w;
                                            return (w = i[I5]), (i[I5] = A5), I5;
                                        })(new Error(D(A4, I4)));
                                    }),
                                    (A3.wbg.__wbindgen_throw = function (A4, I4) {
                                        throw new Error(D(A4, I4));
                                    }),
                                    A3
                                );
                            }
                            function t(A3, I4) {
                                return (Q = A3.exports), (n.__wbindgen_wasm_module = I4), (y = null), (C = null), Q;
                            }
                            function d(A3) {
                                if (void 0 !== Q) return Q;
                                const I4 = H();
                                return (
                                    A3 instanceof WebAssembly.Module || (A3 = new WebAssembly.Module(A3)),
                                    t(new WebAssembly.Instance(A3, I4), A3)
                                );
                            }
                            async function n(A3) {
                                if (void 0 !== Q) return Q;
                                void 0 === A3 && (A3 = new URL(g2(395), g2.b));
                                const I4 = H();
                                ('string' == typeof A3 ||
                                    ('function' == typeof Request && A3 instanceof Request) ||
                                    ('function' == typeof URL && A3 instanceof URL)) &&
                                    (A3 = fetch(A3));
                                const { instance: B2, module: C2 } = await (async function (A4, I5) {
                                    if ('function' == typeof Response && A4 instanceof Response) {
                                        if ('function' == typeof WebAssembly.instantiateStreaming)
                                            try {
                                                return await WebAssembly.instantiateStreaming(A4, I5);
                                            } catch (I6) {
                                                if ('application/wasm' == A4.headers.get('Content-Type')) throw I6;
                                                console.warn(
                                                    '`WebAssembly.instantiateStreaming` failed because your server does not serve wasm with `application/wasm` MIME type. Falling back to `WebAssembly.instantiate` which is slower. Original error:\n',
                                                    I6
                                                );
                                            }
                                        const g3 = await A4.arrayBuffer();
                                        return await WebAssembly.instantiate(g3, I5);
                                    }
                                    {
                                        const g3 = await WebAssembly.instantiate(A4, I5);
                                        return g3 instanceof WebAssembly.Instance ? { instance: g3, module: A4 } : g3;
                                    }
                                })(await A3, I4);
                                return t(B2, C2);
                            }
                            const p = n;
                        },
                        395: (A2) => {
                            'use strict';
                            A2.exports =
                                '';
                        },
                    },
                    I2 = {};
                function g(Q) {
                    var B = I2[Q];
                    if (void 0 !== B) return B.exports;
                    var C = (I2[Q] = { exports: {} });
                    return A[Q].call(C.exports, C, C.exports, g), C.exports;
                }
                return (
                    (g.m = A),
                    (g.d = (A2, I3) => {
                        for (var Q in I3)
                            g.o(I3, Q) && !g.o(A2, Q) && Object.defineProperty(A2, Q, { enumerable: true, get: I3[Q] });
                    }),
                    (g.o = (A2, I3) => Object.prototype.hasOwnProperty.call(A2, I3)),
                    (g.r = (A2) => {
                        'undefined' != typeof Symbol &&
                            Symbol.toStringTag &&
                            Object.defineProperty(A2, Symbol.toStringTag, { value: 'Module' }),
                            Object.defineProperty(A2, '__esModule', { value: true });
                    }),
                    (g.b = document.baseURI || self.location.href),
                    g(530)
                );
            })()
        );
    },
});

// node_modules/minimalistic-assert/index.js
var require_minimalistic_assert = __commonJS({
    'node_modules/minimalistic-assert/index.js'(exports, module) {
        module.exports = assert2;
        function assert2(val, msg) {
            if (!val) throw new Error(msg || 'Assertion failed');
        }
        assert2.equal = function assertEqual(l, r, msg) {
            if (l != r) throw new Error(msg || 'Assertion failed: ' + l + ' != ' + r);
        };
    },
});

// node_modules/inherits/inherits_browser.js
var require_inherits_browser = __commonJS({
    'node_modules/inherits/inherits_browser.js'(exports, module) {
        if (typeof Object.create === 'function') {
            module.exports = function inherits(ctor, superCtor) {
                if (superCtor) {
                    ctor.super_ = superCtor;
                    ctor.prototype = Object.create(superCtor.prototype, {
                        constructor: {
                            value: ctor,
                            enumerable: false,
                            writable: true,
                            configurable: true,
                        },
                    });
                }
            };
        } else {
            module.exports = function inherits(ctor, superCtor) {
                if (superCtor) {
                    ctor.super_ = superCtor;
                    var TempCtor = function () {};
                    TempCtor.prototype = superCtor.prototype;
                    ctor.prototype = new TempCtor();
                    ctor.prototype.constructor = ctor;
                }
            };
        }
    },
});

// node_modules/hash.js/lib/hash/utils.js
var require_utils2 = __commonJS({
    'node_modules/hash.js/lib/hash/utils.js'(exports) {
        'use strict';
        var assert2 = require_minimalistic_assert();
        var inherits = require_inherits_browser();
        exports.inherits = inherits;
        function isSurrogatePair(msg, i) {
            if ((msg.charCodeAt(i) & 64512) !== 55296) {
                return false;
            }
            if (i < 0 || i + 1 >= msg.length) {
                return false;
            }
            return (msg.charCodeAt(i + 1) & 64512) === 56320;
        }
        function toArray(msg, enc) {
            if (Array.isArray(msg)) return msg.slice();
            if (!msg) return [];
            var res = [];
            if (typeof msg === 'string') {
                if (!enc) {
                    var p = 0;
                    for (var i = 0; i < msg.length; i++) {
                        var c = msg.charCodeAt(i);
                        if (c < 128) {
                            res[p++] = c;
                        } else if (c < 2048) {
                            res[p++] = (c >> 6) | 192;
                            res[p++] = (c & 63) | 128;
                        } else if (isSurrogatePair(msg, i)) {
                            c = 65536 + ((c & 1023) << 10) + (msg.charCodeAt(++i) & 1023);
                            res[p++] = (c >> 18) | 240;
                            res[p++] = ((c >> 12) & 63) | 128;
                            res[p++] = ((c >> 6) & 63) | 128;
                            res[p++] = (c & 63) | 128;
                        } else {
                            res[p++] = (c >> 12) | 224;
                            res[p++] = ((c >> 6) & 63) | 128;
                            res[p++] = (c & 63) | 128;
                        }
                    }
                } else if (enc === 'hex') {
                    msg = msg.replace(/[^a-z0-9]+/gi, '');
                    if (msg.length % 2 !== 0) msg = '0' + msg;
                    for (i = 0; i < msg.length; i += 2) res.push(parseInt(msg[i] + msg[i + 1], 16));
                }
            } else {
                for (i = 0; i < msg.length; i++) res[i] = msg[i] | 0;
            }
            return res;
        }
        exports.toArray = toArray;
        function toHex(msg) {
            var res = '';
            for (var i = 0; i < msg.length; i++) res += zero2(msg[i].toString(16));
            return res;
        }
        exports.toHex = toHex;
        function htonl(w) {
            var res = (w >>> 24) | ((w >>> 8) & 65280) | ((w << 8) & 16711680) | ((w & 255) << 24);
            return res >>> 0;
        }
        exports.htonl = htonl;
        function toHex32(msg, endian) {
            var res = '';
            for (var i = 0; i < msg.length; i++) {
                var w = msg[i];
                if (endian === 'little') w = htonl(w);
                res += zero8(w.toString(16));
            }
            return res;
        }
        exports.toHex32 = toHex32;
        function zero2(word) {
            if (word.length === 1) return '0' + word;
            else return word;
        }
        exports.zero2 = zero2;
        function zero8(word) {
            if (word.length === 7) return '0' + word;
            else if (word.length === 6) return '00' + word;
            else if (word.length === 5) return '000' + word;
            else if (word.length === 4) return '0000' + word;
            else if (word.length === 3) return '00000' + word;
            else if (word.length === 2) return '000000' + word;
            else if (word.length === 1) return '0000000' + word;
            else return word;
        }
        exports.zero8 = zero8;
        function join32(msg, start, end, endian) {
            var len = end - start;
            assert2(len % 4 === 0);
            var res = new Array(len / 4);
            for (var i = 0, k = start; i < res.length; i++, k += 4) {
                var w;
                if (endian === 'big') w = (msg[k] << 24) | (msg[k + 1] << 16) | (msg[k + 2] << 8) | msg[k + 3];
                else w = (msg[k + 3] << 24) | (msg[k + 2] << 16) | (msg[k + 1] << 8) | msg[k];
                res[i] = w >>> 0;
            }
            return res;
        }
        exports.join32 = join32;
        function split32(msg, endian) {
            var res = new Array(msg.length * 4);
            for (var i = 0, k = 0; i < msg.length; i++, k += 4) {
                var m = msg[i];
                if (endian === 'big') {
                    res[k] = m >>> 24;
                    res[k + 1] = (m >>> 16) & 255;
                    res[k + 2] = (m >>> 8) & 255;
                    res[k + 3] = m & 255;
                } else {
                    res[k + 3] = m >>> 24;
                    res[k + 2] = (m >>> 16) & 255;
                    res[k + 1] = (m >>> 8) & 255;
                    res[k] = m & 255;
                }
            }
            return res;
        }
        exports.split32 = split32;
        function rotr32(w, b) {
            return (w >>> b) | (w << (32 - b));
        }
        exports.rotr32 = rotr32;
        function rotl32(w, b) {
            return (w << b) | (w >>> (32 - b));
        }
        exports.rotl32 = rotl32;
        function sum32(a, b) {
            return (a + b) >>> 0;
        }
        exports.sum32 = sum32;
        function sum32_3(a, b, c) {
            return (a + b + c) >>> 0;
        }
        exports.sum32_3 = sum32_3;
        function sum32_4(a, b, c, d) {
            return (a + b + c + d) >>> 0;
        }
        exports.sum32_4 = sum32_4;
        function sum32_5(a, b, c, d, e) {
            return (a + b + c + d + e) >>> 0;
        }
        exports.sum32_5 = sum32_5;
        function sum64(buf, pos, ah, al) {
            var bh = buf[pos];
            var bl = buf[pos + 1];
            var lo = (al + bl) >>> 0;
            var hi = (lo < al ? 1 : 0) + ah + bh;
            buf[pos] = hi >>> 0;
            buf[pos + 1] = lo;
        }
        exports.sum64 = sum64;
        function sum64_hi(ah, al, bh, bl) {
            var lo = (al + bl) >>> 0;
            var hi = (lo < al ? 1 : 0) + ah + bh;
            return hi >>> 0;
        }
        exports.sum64_hi = sum64_hi;
        function sum64_lo(ah, al, bh, bl) {
            var lo = al + bl;
            return lo >>> 0;
        }
        exports.sum64_lo = sum64_lo;
        function sum64_4_hi(ah, al, bh, bl, ch, cl, dh, dl) {
            var carry = 0;
            var lo = al;
            lo = (lo + bl) >>> 0;
            carry += lo < al ? 1 : 0;
            lo = (lo + cl) >>> 0;
            carry += lo < cl ? 1 : 0;
            lo = (lo + dl) >>> 0;
            carry += lo < dl ? 1 : 0;
            var hi = ah + bh + ch + dh + carry;
            return hi >>> 0;
        }
        exports.sum64_4_hi = sum64_4_hi;
        function sum64_4_lo(ah, al, bh, bl, ch, cl, dh, dl) {
            var lo = al + bl + cl + dl;
            return lo >>> 0;
        }
        exports.sum64_4_lo = sum64_4_lo;
        function sum64_5_hi(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
            var carry = 0;
            var lo = al;
            lo = (lo + bl) >>> 0;
            carry += lo < al ? 1 : 0;
            lo = (lo + cl) >>> 0;
            carry += lo < cl ? 1 : 0;
            lo = (lo + dl) >>> 0;
            carry += lo < dl ? 1 : 0;
            lo = (lo + el) >>> 0;
            carry += lo < el ? 1 : 0;
            var hi = ah + bh + ch + dh + eh + carry;
            return hi >>> 0;
        }
        exports.sum64_5_hi = sum64_5_hi;
        function sum64_5_lo(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
            var lo = al + bl + cl + dl + el;
            return lo >>> 0;
        }
        exports.sum64_5_lo = sum64_5_lo;
        function rotr64_hi(ah, al, num) {
            var r = (al << (32 - num)) | (ah >>> num);
            return r >>> 0;
        }
        exports.rotr64_hi = rotr64_hi;
        function rotr64_lo(ah, al, num) {
            var r = (ah << (32 - num)) | (al >>> num);
            return r >>> 0;
        }
        exports.rotr64_lo = rotr64_lo;
        function shr64_hi(ah, al, num) {
            return ah >>> num;
        }
        exports.shr64_hi = shr64_hi;
        function shr64_lo(ah, al, num) {
            var r = (ah << (32 - num)) | (al >>> num);
            return r >>> 0;
        }
        exports.shr64_lo = shr64_lo;
    },
});

// node_modules/hash.js/lib/hash/common.js
var require_common = __commonJS({
    'node_modules/hash.js/lib/hash/common.js'(exports) {
        'use strict';
        var utils2 = require_utils2();
        var assert2 = require_minimalistic_assert();
        function BlockHash3() {
            this.pending = null;
            this.pendingTotal = 0;
            this.blockSize = this.constructor.blockSize;
            this.outSize = this.constructor.outSize;
            this.hmacStrength = this.constructor.hmacStrength;
            this.padLength = this.constructor.padLength / 8;
            this.endian = 'big';
            this._delta8 = this.blockSize / 8;
            this._delta32 = this.blockSize / 32;
        }
        exports.BlockHash = BlockHash3;
        BlockHash3.prototype.update = function update(msg, enc) {
            msg = utils2.toArray(msg, enc);
            if (!this.pending) this.pending = msg;
            else this.pending = this.pending.concat(msg);
            this.pendingTotal += msg.length;
            if (this.pending.length >= this._delta8) {
                msg = this.pending;
                var r = msg.length % this._delta8;
                this.pending = msg.slice(msg.length - r, msg.length);
                if (this.pending.length === 0) this.pending = null;
                msg = utils2.join32(msg, 0, msg.length - r, this.endian);
                for (var i = 0; i < msg.length; i += this._delta32) this._update(msg, i, i + this._delta32);
            }
            return this;
        };
        BlockHash3.prototype.digest = function digest(enc) {
            this.update(this._pad());
            assert2(this.pending === null);
            return this._digest(enc);
        };
        BlockHash3.prototype._pad = function pad() {
            var len = this.pendingTotal;
            var bytes2 = this._delta8;
            var k = bytes2 - ((len + this.padLength) % bytes2);
            var res = new Array(k + this.padLength);
            res[0] = 128;
            for (var i = 1; i < k; i++) res[i] = 0;
            len <<= 3;
            if (this.endian === 'big') {
                for (var t = 8; t < this.padLength; t++) res[i++] = 0;
                res[i++] = 0;
                res[i++] = 0;
                res[i++] = 0;
                res[i++] = 0;
                res[i++] = (len >>> 24) & 255;
                res[i++] = (len >>> 16) & 255;
                res[i++] = (len >>> 8) & 255;
                res[i++] = len & 255;
            } else {
                res[i++] = len & 255;
                res[i++] = (len >>> 8) & 255;
                res[i++] = (len >>> 16) & 255;
                res[i++] = (len >>> 24) & 255;
                res[i++] = 0;
                res[i++] = 0;
                res[i++] = 0;
                res[i++] = 0;
                for (t = 8; t < this.padLength; t++) res[i++] = 0;
            }
            return res;
        };
    },
});

// node_modules/hash.js/lib/hash/sha/common.js
var require_common2 = __commonJS({
    'node_modules/hash.js/lib/hash/sha/common.js'(exports) {
        'use strict';
        var utils2 = require_utils2();
        var rotr32 = utils2.rotr32;
        function ft_1(s, x, y, z) {
            if (s === 0) return ch32(x, y, z);
            if (s === 1 || s === 3) return p32(x, y, z);
            if (s === 2) return maj32(x, y, z);
        }
        exports.ft_1 = ft_1;
        function ch32(x, y, z) {
            return (x & y) ^ (~x & z);
        }
        exports.ch32 = ch32;
        function maj32(x, y, z) {
            return (x & y) ^ (x & z) ^ (y & z);
        }
        exports.maj32 = maj32;
        function p32(x, y, z) {
            return x ^ y ^ z;
        }
        exports.p32 = p32;
        function s0_256(x) {
            return rotr32(x, 2) ^ rotr32(x, 13) ^ rotr32(x, 22);
        }
        exports.s0_256 = s0_256;
        function s1_256(x) {
            return rotr32(x, 6) ^ rotr32(x, 11) ^ rotr32(x, 25);
        }
        exports.s1_256 = s1_256;
        function g0_256(x) {
            return rotr32(x, 7) ^ rotr32(x, 18) ^ (x >>> 3);
        }
        exports.g0_256 = g0_256;
        function g1_256(x) {
            return rotr32(x, 17) ^ rotr32(x, 19) ^ (x >>> 10);
        }
        exports.g1_256 = g1_256;
    },
});

// node_modules/hash.js/lib/hash/sha/1.js
var require__ = __commonJS({
    'node_modules/hash.js/lib/hash/sha/1.js'(exports, module) {
        'use strict';
        var utils2 = require_utils2();
        var common = require_common();
        var shaCommon = require_common2();
        var rotl32 = utils2.rotl32;
        var sum32 = utils2.sum32;
        var sum32_5 = utils2.sum32_5;
        var ft_1 = shaCommon.ft_1;
        var BlockHash3 = common.BlockHash;
        var sha1_K = [1518500249, 1859775393, 2400959708, 3395469782];
        function SHA1() {
            if (!(this instanceof SHA1)) return new SHA1();
            BlockHash3.call(this);
            this.h = [1732584193, 4023233417, 2562383102, 271733878, 3285377520];
            this.W = new Array(80);
        }
        utils2.inherits(SHA1, BlockHash3);
        module.exports = SHA1;
        SHA1.blockSize = 512;
        SHA1.outSize = 160;
        SHA1.hmacStrength = 80;
        SHA1.padLength = 64;
        SHA1.prototype._update = function _update(msg, start) {
            var W2 = this.W;
            for (var i = 0; i < 16; i++) W2[i] = msg[start + i];
            for (; i < W2.length; i++) W2[i] = rotl32(W2[i - 3] ^ W2[i - 8] ^ W2[i - 14] ^ W2[i - 16], 1);
            var a = this.h[0];
            var b = this.h[1];
            var c = this.h[2];
            var d = this.h[3];
            var e = this.h[4];
            for (i = 0; i < W2.length; i++) {
                var s = ~~(i / 20);
                var t = sum32_5(rotl32(a, 5), ft_1(s, b, c, d), e, W2[i], sha1_K[s]);
                e = d;
                d = c;
                c = rotl32(b, 30);
                b = a;
                a = t;
            }
            this.h[0] = sum32(this.h[0], a);
            this.h[1] = sum32(this.h[1], b);
            this.h[2] = sum32(this.h[2], c);
            this.h[3] = sum32(this.h[3], d);
            this.h[4] = sum32(this.h[4], e);
        };
        SHA1.prototype._digest = function digest(enc) {
            if (enc === 'hex') return utils2.toHex32(this.h, 'big');
            else return utils2.split32(this.h, 'big');
        };
    },
});

// node_modules/hash.js/lib/hash/sha/256.js
var require__2 = __commonJS({
    'node_modules/hash.js/lib/hash/sha/256.js'(exports, module) {
        'use strict';
        var utils2 = require_utils2();
        var common = require_common();
        var shaCommon = require_common2();
        var assert2 = require_minimalistic_assert();
        var sum32 = utils2.sum32;
        var sum32_4 = utils2.sum32_4;
        var sum32_5 = utils2.sum32_5;
        var ch32 = shaCommon.ch32;
        var maj32 = shaCommon.maj32;
        var s0_256 = shaCommon.s0_256;
        var s1_256 = shaCommon.s1_256;
        var g0_256 = shaCommon.g0_256;
        var g1_256 = shaCommon.g1_256;
        var BlockHash3 = common.BlockHash;
        var sha256_K = [
            1116352408, 1899447441, 3049323471, 3921009573, 961987163, 1508970993, 2453635748, 2870763221, 3624381080,
            310598401, 607225278, 1426881987, 1925078388, 2162078206, 2614888103, 3248222580, 3835390401, 4022224774,
            264347078, 604807628, 770255983, 1249150122, 1555081692, 1996064986, 2554220882, 2821834349, 2952996808,
            3210313671, 3336571891, 3584528711, 113926993, 338241895, 666307205, 773529912, 1294757372, 1396182291,
            1695183700, 1986661051, 2177026350, 2456956037, 2730485921, 2820302411, 3259730800, 3345764771, 3516065817,
            3600352804, 4094571909, 275423344, 430227734, 506948616, 659060556, 883997877, 958139571, 1322822218,
            1537002063, 1747873779, 1955562222, 2024104815, 2227730452, 2361852424, 2428436474, 2756734187, 3204031479,
            3329325298,
        ];
        function SHA2562() {
            if (!(this instanceof SHA2562)) return new SHA2562();
            BlockHash3.call(this);
            this.h = [1779033703, 3144134277, 1013904242, 2773480762, 1359893119, 2600822924, 528734635, 1541459225];
            this.k = sha256_K;
            this.W = new Array(64);
        }
        utils2.inherits(SHA2562, BlockHash3);
        module.exports = SHA2562;
        SHA2562.blockSize = 512;
        SHA2562.outSize = 256;
        SHA2562.hmacStrength = 192;
        SHA2562.padLength = 64;
        SHA2562.prototype._update = function _update(msg, start) {
            var W2 = this.W;
            for (var i = 0; i < 16; i++) W2[i] = msg[start + i];
            for (; i < W2.length; i++) W2[i] = sum32_4(g1_256(W2[i - 2]), W2[i - 7], g0_256(W2[i - 15]), W2[i - 16]);
            var a = this.h[0];
            var b = this.h[1];
            var c = this.h[2];
            var d = this.h[3];
            var e = this.h[4];
            var f = this.h[5];
            var g = this.h[6];
            var h = this.h[7];
            assert2(this.k.length === W2.length);
            for (i = 0; i < W2.length; i++) {
                var T1 = sum32_5(h, s1_256(e), ch32(e, f, g), this.k[i], W2[i]);
                var T2 = sum32(s0_256(a), maj32(a, b, c));
                h = g;
                g = f;
                f = e;
                e = sum32(d, T1);
                d = c;
                c = b;
                b = a;
                a = sum32(T1, T2);
            }
            this.h[0] = sum32(this.h[0], a);
            this.h[1] = sum32(this.h[1], b);
            this.h[2] = sum32(this.h[2], c);
            this.h[3] = sum32(this.h[3], d);
            this.h[4] = sum32(this.h[4], e);
            this.h[5] = sum32(this.h[5], f);
            this.h[6] = sum32(this.h[6], g);
            this.h[7] = sum32(this.h[7], h);
        };
        SHA2562.prototype._digest = function digest(enc) {
            if (enc === 'hex') return utils2.toHex32(this.h, 'big');
            else return utils2.split32(this.h, 'big');
        };
    },
});

// node_modules/hash.js/lib/hash/sha/224.js
var require__3 = __commonJS({
    'node_modules/hash.js/lib/hash/sha/224.js'(exports, module) {
        'use strict';
        var utils2 = require_utils2();
        var SHA2562 = require__2();
        function SHA2242() {
            if (!(this instanceof SHA2242)) return new SHA2242();
            SHA2562.call(this);
            this.h = [3238371032, 914150663, 812702999, 4144912697, 4290775857, 1750603025, 1694076839, 3204075428];
        }
        utils2.inherits(SHA2242, SHA2562);
        module.exports = SHA2242;
        SHA2242.blockSize = 512;
        SHA2242.outSize = 224;
        SHA2242.hmacStrength = 192;
        SHA2242.padLength = 64;
        SHA2242.prototype._digest = function digest(enc) {
            if (enc === 'hex') return utils2.toHex32(this.h.slice(0, 7), 'big');
            else return utils2.split32(this.h.slice(0, 7), 'big');
        };
    },
});

// node_modules/hash.js/lib/hash/sha/512.js
var require__4 = __commonJS({
    'node_modules/hash.js/lib/hash/sha/512.js'(exports, module) {
        'use strict';
        var utils2 = require_utils2();
        var common = require_common();
        var assert2 = require_minimalistic_assert();
        var rotr64_hi = utils2.rotr64_hi;
        var rotr64_lo = utils2.rotr64_lo;
        var shr64_hi = utils2.shr64_hi;
        var shr64_lo = utils2.shr64_lo;
        var sum64 = utils2.sum64;
        var sum64_hi = utils2.sum64_hi;
        var sum64_lo = utils2.sum64_lo;
        var sum64_4_hi = utils2.sum64_4_hi;
        var sum64_4_lo = utils2.sum64_4_lo;
        var sum64_5_hi = utils2.sum64_5_hi;
        var sum64_5_lo = utils2.sum64_5_lo;
        var BlockHash3 = common.BlockHash;
        var sha512_K = [
            1116352408, 3609767458, 1899447441, 602891725, 3049323471, 3964484399, 3921009573, 2173295548, 961987163,
            4081628472, 1508970993, 3053834265, 2453635748, 2937671579, 2870763221, 3664609560, 3624381080, 2734883394,
            310598401, 1164996542, 607225278, 1323610764, 1426881987, 3590304994, 1925078388, 4068182383, 2162078206,
            991336113, 2614888103, 633803317, 3248222580, 3479774868, 3835390401, 2666613458, 4022224774, 944711139,
            264347078, 2341262773, 604807628, 2007800933, 770255983, 1495990901, 1249150122, 1856431235, 1555081692,
            3175218132, 1996064986, 2198950837, 2554220882, 3999719339, 2821834349, 766784016, 2952996808, 2566594879,
            3210313671, 3203337956, 3336571891, 1034457026, 3584528711, 2466948901, 113926993, 3758326383, 338241895,
            168717936, 666307205, 1188179964, 773529912, 1546045734, 1294757372, 1522805485, 1396182291, 2643833823,
            1695183700, 2343527390, 1986661051, 1014477480, 2177026350, 1206759142, 2456956037, 344077627, 2730485921,
            1290863460, 2820302411, 3158454273, 3259730800, 3505952657, 3345764771, 106217008, 3516065817, 3606008344,
            3600352804, 1432725776, 4094571909, 1467031594, 275423344, 851169720, 430227734, 3100823752, 506948616,
            1363258195, 659060556, 3750685593, 883997877, 3785050280, 958139571, 3318307427, 1322822218, 3812723403,
            1537002063, 2003034995, 1747873779, 3602036899, 1955562222, 1575990012, 2024104815, 1125592928, 2227730452,
            2716904306, 2361852424, 442776044, 2428436474, 593698344, 2756734187, 3733110249, 3204031479, 2999351573,
            3329325298, 3815920427, 3391569614, 3928383900, 3515267271, 566280711, 3940187606, 3454069534, 4118630271,
            4000239992, 116418474, 1914138554, 174292421, 2731055270, 289380356, 3203993006, 460393269, 320620315,
            685471733, 587496836, 852142971, 1086792851, 1017036298, 365543100, 1126000580, 2618297676, 1288033470,
            3409855158, 1501505948, 4234509866, 1607167915, 987167468, 1816402316, 1246189591,
        ];
        function SHA5122() {
            if (!(this instanceof SHA5122)) return new SHA5122();
            BlockHash3.call(this);
            this.h = [
                1779033703, 4089235720, 3144134277, 2227873595, 1013904242, 4271175723, 2773480762, 1595750129,
                1359893119, 2917565137, 2600822924, 725511199, 528734635, 4215389547, 1541459225, 327033209,
            ];
            this.k = sha512_K;
            this.W = new Array(160);
        }
        utils2.inherits(SHA5122, BlockHash3);
        module.exports = SHA5122;
        SHA5122.blockSize = 1024;
        SHA5122.outSize = 512;
        SHA5122.hmacStrength = 192;
        SHA5122.padLength = 128;
        SHA5122.prototype._prepareBlock = function _prepareBlock(msg, start) {
            var W2 = this.W;
            for (var i = 0; i < 32; i++) W2[i] = msg[start + i];
            for (; i < W2.length; i += 2) {
                var c0_hi = g1_512_hi(W2[i - 4], W2[i - 3]);
                var c0_lo = g1_512_lo(W2[i - 4], W2[i - 3]);
                var c1_hi = W2[i - 14];
                var c1_lo = W2[i - 13];
                var c2_hi = g0_512_hi(W2[i - 30], W2[i - 29]);
                var c2_lo = g0_512_lo(W2[i - 30], W2[i - 29]);
                var c3_hi = W2[i - 32];
                var c3_lo = W2[i - 31];
                W2[i] = sum64_4_hi(c0_hi, c0_lo, c1_hi, c1_lo, c2_hi, c2_lo, c3_hi, c3_lo);
                W2[i + 1] = sum64_4_lo(c0_hi, c0_lo, c1_hi, c1_lo, c2_hi, c2_lo, c3_hi, c3_lo);
            }
        };
        SHA5122.prototype._update = function _update(msg, start) {
            this._prepareBlock(msg, start);
            var W2 = this.W;
            var ah = this.h[0];
            var al = this.h[1];
            var bh = this.h[2];
            var bl = this.h[3];
            var ch = this.h[4];
            var cl = this.h[5];
            var dh = this.h[6];
            var dl = this.h[7];
            var eh = this.h[8];
            var el = this.h[9];
            var fh = this.h[10];
            var fl = this.h[11];
            var gh = this.h[12];
            var gl = this.h[13];
            var hh = this.h[14];
            var hl = this.h[15];
            assert2(this.k.length === W2.length);
            for (var i = 0; i < W2.length; i += 2) {
                var c0_hi = hh;
                var c0_lo = hl;
                var c1_hi = s1_512_hi(eh, el);
                var c1_lo = s1_512_lo(eh, el);
                var c2_hi = ch64_hi(eh, el, fh, fl, gh, gl);
                var c2_lo = ch64_lo(eh, el, fh, fl, gh, gl);
                var c3_hi = this.k[i];
                var c3_lo = this.k[i + 1];
                var c4_hi = W2[i];
                var c4_lo = W2[i + 1];
                var T1_hi = sum64_5_hi(c0_hi, c0_lo, c1_hi, c1_lo, c2_hi, c2_lo, c3_hi, c3_lo, c4_hi, c4_lo);
                var T1_lo = sum64_5_lo(c0_hi, c0_lo, c1_hi, c1_lo, c2_hi, c2_lo, c3_hi, c3_lo, c4_hi, c4_lo);
                c0_hi = s0_512_hi(ah, al);
                c0_lo = s0_512_lo(ah, al);
                c1_hi = maj64_hi(ah, al, bh, bl, ch, cl);
                c1_lo = maj64_lo(ah, al, bh, bl, ch, cl);
                var T2_hi = sum64_hi(c0_hi, c0_lo, c1_hi, c1_lo);
                var T2_lo = sum64_lo(c0_hi, c0_lo, c1_hi, c1_lo);
                hh = gh;
                hl = gl;
                gh = fh;
                gl = fl;
                fh = eh;
                fl = el;
                eh = sum64_hi(dh, dl, T1_hi, T1_lo);
                el = sum64_lo(dl, dl, T1_hi, T1_lo);
                dh = ch;
                dl = cl;
                ch = bh;
                cl = bl;
                bh = ah;
                bl = al;
                ah = sum64_hi(T1_hi, T1_lo, T2_hi, T2_lo);
                al = sum64_lo(T1_hi, T1_lo, T2_hi, T2_lo);
            }
            sum64(this.h, 0, ah, al);
            sum64(this.h, 2, bh, bl);
            sum64(this.h, 4, ch, cl);
            sum64(this.h, 6, dh, dl);
            sum64(this.h, 8, eh, el);
            sum64(this.h, 10, fh, fl);
            sum64(this.h, 12, gh, gl);
            sum64(this.h, 14, hh, hl);
        };
        SHA5122.prototype._digest = function digest(enc) {
            if (enc === 'hex') return utils2.toHex32(this.h, 'big');
            else return utils2.split32(this.h, 'big');
        };
        function ch64_hi(xh, xl, yh, yl, zh) {
            var r = (xh & yh) ^ (~xh & zh);
            if (r < 0) r += 4294967296;
            return r;
        }
        function ch64_lo(xh, xl, yh, yl, zh, zl) {
            var r = (xl & yl) ^ (~xl & zl);
            if (r < 0) r += 4294967296;
            return r;
        }
        function maj64_hi(xh, xl, yh, yl, zh) {
            var r = (xh & yh) ^ (xh & zh) ^ (yh & zh);
            if (r < 0) r += 4294967296;
            return r;
        }
        function maj64_lo(xh, xl, yh, yl, zh, zl) {
            var r = (xl & yl) ^ (xl & zl) ^ (yl & zl);
            if (r < 0) r += 4294967296;
            return r;
        }
        function s0_512_hi(xh, xl) {
            var c0_hi = rotr64_hi(xh, xl, 28);
            var c1_hi = rotr64_hi(xl, xh, 2);
            var c2_hi = rotr64_hi(xl, xh, 7);
            var r = c0_hi ^ c1_hi ^ c2_hi;
            if (r < 0) r += 4294967296;
            return r;
        }
        function s0_512_lo(xh, xl) {
            var c0_lo = rotr64_lo(xh, xl, 28);
            var c1_lo = rotr64_lo(xl, xh, 2);
            var c2_lo = rotr64_lo(xl, xh, 7);
            var r = c0_lo ^ c1_lo ^ c2_lo;
            if (r < 0) r += 4294967296;
            return r;
        }
        function s1_512_hi(xh, xl) {
            var c0_hi = rotr64_hi(xh, xl, 14);
            var c1_hi = rotr64_hi(xh, xl, 18);
            var c2_hi = rotr64_hi(xl, xh, 9);
            var r = c0_hi ^ c1_hi ^ c2_hi;
            if (r < 0) r += 4294967296;
            return r;
        }
        function s1_512_lo(xh, xl) {
            var c0_lo = rotr64_lo(xh, xl, 14);
            var c1_lo = rotr64_lo(xh, xl, 18);
            var c2_lo = rotr64_lo(xl, xh, 9);
            var r = c0_lo ^ c1_lo ^ c2_lo;
            if (r < 0) r += 4294967296;
            return r;
        }
        function g0_512_hi(xh, xl) {
            var c0_hi = rotr64_hi(xh, xl, 1);
            var c1_hi = rotr64_hi(xh, xl, 8);
            var c2_hi = shr64_hi(xh, xl, 7);
            var r = c0_hi ^ c1_hi ^ c2_hi;
            if (r < 0) r += 4294967296;
            return r;
        }
        function g0_512_lo(xh, xl) {
            var c0_lo = rotr64_lo(xh, xl, 1);
            var c1_lo = rotr64_lo(xh, xl, 8);
            var c2_lo = shr64_lo(xh, xl, 7);
            var r = c0_lo ^ c1_lo ^ c2_lo;
            if (r < 0) r += 4294967296;
            return r;
        }
        function g1_512_hi(xh, xl) {
            var c0_hi = rotr64_hi(xh, xl, 19);
            var c1_hi = rotr64_hi(xl, xh, 29);
            var c2_hi = shr64_hi(xh, xl, 6);
            var r = c0_hi ^ c1_hi ^ c2_hi;
            if (r < 0) r += 4294967296;
            return r;
        }
        function g1_512_lo(xh, xl) {
            var c0_lo = rotr64_lo(xh, xl, 19);
            var c1_lo = rotr64_lo(xl, xh, 29);
            var c2_lo = shr64_lo(xh, xl, 6);
            var r = c0_lo ^ c1_lo ^ c2_lo;
            if (r < 0) r += 4294967296;
            return r;
        }
    },
});

// node_modules/hash.js/lib/hash/sha/384.js
var require__5 = __commonJS({
    'node_modules/hash.js/lib/hash/sha/384.js'(exports, module) {
        'use strict';
        var utils2 = require_utils2();
        var SHA5122 = require__4();
        function SHA3842() {
            if (!(this instanceof SHA3842)) return new SHA3842();
            SHA5122.call(this);
            this.h = [
                3418070365, 3238371032, 1654270250, 914150663, 2438529370, 812702999, 355462360, 4144912697, 1731405415,
                4290775857, 2394180231, 1750603025, 3675008525, 1694076839, 1203062813, 3204075428,
            ];
        }
        utils2.inherits(SHA3842, SHA5122);
        module.exports = SHA3842;
        SHA3842.blockSize = 1024;
        SHA3842.outSize = 384;
        SHA3842.hmacStrength = 192;
        SHA3842.padLength = 128;
        SHA3842.prototype._digest = function digest(enc) {
            if (enc === 'hex') return utils2.toHex32(this.h.slice(0, 12), 'big');
            else return utils2.split32(this.h.slice(0, 12), 'big');
        };
    },
});

// node_modules/hash.js/lib/hash/sha.js
var require_sha = __commonJS({
    'node_modules/hash.js/lib/hash/sha.js'(exports) {
        'use strict';
        exports.sha1 = require__();
        exports.sha224 = require__3();
        exports.sha256 = require__2();
        exports.sha384 = require__5();
        exports.sha512 = require__4();
    },
});

// node_modules/hash.js/lib/hash/ripemd.js
var require_ripemd = __commonJS({
    'node_modules/hash.js/lib/hash/ripemd.js'(exports) {
        'use strict';
        var utils2 = require_utils2();
        var common = require_common();
        var rotl32 = utils2.rotl32;
        var sum32 = utils2.sum32;
        var sum32_3 = utils2.sum32_3;
        var sum32_4 = utils2.sum32_4;
        var BlockHash3 = common.BlockHash;
        function RIPEMD160() {
            if (!(this instanceof RIPEMD160)) return new RIPEMD160();
            BlockHash3.call(this);
            this.h = [1732584193, 4023233417, 2562383102, 271733878, 3285377520];
            this.endian = 'little';
        }
        utils2.inherits(RIPEMD160, BlockHash3);
        exports.ripemd160 = RIPEMD160;
        RIPEMD160.blockSize = 512;
        RIPEMD160.outSize = 160;
        RIPEMD160.hmacStrength = 192;
        RIPEMD160.padLength = 64;
        RIPEMD160.prototype._update = function update(msg, start) {
            var A = this.h[0];
            var B = this.h[1];
            var C = this.h[2];
            var D = this.h[3];
            var E = this.h[4];
            var Ah = A;
            var Bh = B;
            var Ch = C;
            var Dh = D;
            var Eh = E;
            for (var j = 0; j < 80; j++) {
                var T = sum32(rotl32(sum32_4(A, f(j, B, C, D), msg[r[j] + start], K(j)), s[j]), E);
                A = E;
                E = D;
                D = rotl32(C, 10);
                C = B;
                B = T;
                T = sum32(rotl32(sum32_4(Ah, f(79 - j, Bh, Ch, Dh), msg[rh[j] + start], Kh(j)), sh[j]), Eh);
                Ah = Eh;
                Eh = Dh;
                Dh = rotl32(Ch, 10);
                Ch = Bh;
                Bh = T;
            }
            T = sum32_3(this.h[1], C, Dh);
            this.h[1] = sum32_3(this.h[2], D, Eh);
            this.h[2] = sum32_3(this.h[3], E, Ah);
            this.h[3] = sum32_3(this.h[4], A, Bh);
            this.h[4] = sum32_3(this.h[0], B, Ch);
            this.h[0] = T;
        };
        RIPEMD160.prototype._digest = function digest(enc) {
            if (enc === 'hex') return utils2.toHex32(this.h, 'little');
            else return utils2.split32(this.h, 'little');
        };
        function f(j, x, y, z) {
            if (j <= 15) return x ^ y ^ z;
            else if (j <= 31) return (x & y) | (~x & z);
            else if (j <= 47) return (x | ~y) ^ z;
            else if (j <= 63) return (x & z) | (y & ~z);
            else return x ^ (y | ~z);
        }
        function K(j) {
            if (j <= 15) return 0;
            else if (j <= 31) return 1518500249;
            else if (j <= 47) return 1859775393;
            else if (j <= 63) return 2400959708;
            else return 2840853838;
        }
        function Kh(j) {
            if (j <= 15) return 1352829926;
            else if (j <= 31) return 1548603684;
            else if (j <= 47) return 1836072691;
            else if (j <= 63) return 2053994217;
            else return 0;
        }
        var r = [
            0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 7, 4, 13, 1, 10, 6, 15, 3, 12, 0, 9, 5, 2, 14, 11, 8,
            3, 10, 14, 4, 9, 15, 8, 1, 2, 7, 0, 6, 13, 11, 5, 12, 1, 9, 11, 10, 0, 8, 12, 4, 13, 3, 7, 15, 14, 5, 6, 2,
            4, 0, 5, 9, 7, 12, 2, 10, 14, 1, 3, 8, 11, 6, 15, 13,
        ];
        var rh = [
            5, 14, 7, 0, 9, 2, 11, 4, 13, 6, 15, 8, 1, 10, 3, 12, 6, 11, 3, 7, 0, 13, 5, 10, 14, 15, 8, 12, 4, 9, 1, 2,
            15, 5, 1, 3, 7, 14, 6, 9, 11, 8, 12, 2, 10, 0, 4, 13, 8, 6, 4, 1, 3, 11, 15, 0, 5, 12, 2, 13, 9, 7, 10, 14,
            12, 15, 10, 4, 1, 5, 8, 7, 6, 2, 13, 14, 0, 3, 9, 11,
        ];
        var s = [
            11, 14, 15, 12, 5, 8, 7, 9, 11, 13, 14, 15, 6, 7, 9, 8, 7, 6, 8, 13, 11, 9, 7, 15, 7, 12, 15, 9, 11, 7, 13,
            12, 11, 13, 6, 7, 14, 9, 13, 15, 14, 8, 13, 6, 5, 12, 7, 5, 11, 12, 14, 15, 14, 15, 9, 8, 9, 14, 5, 6, 8, 6,
            5, 12, 9, 15, 5, 11, 6, 8, 13, 12, 5, 12, 13, 14, 11, 8, 5, 6,
        ];
        var sh = [
            8, 9, 9, 11, 13, 15, 15, 5, 7, 7, 8, 11, 14, 14, 12, 6, 9, 13, 15, 7, 12, 8, 9, 11, 7, 7, 12, 7, 6, 15, 13,
            11, 9, 7, 15, 11, 8, 6, 6, 14, 12, 13, 5, 14, 13, 13, 7, 5, 15, 5, 8, 11, 14, 14, 6, 14, 6, 9, 12, 9, 12, 5,
            15, 8, 8, 5, 12, 9, 12, 5, 14, 6, 8, 13, 6, 5, 15, 13, 11, 11,
        ];
    },
});

// node_modules/hash.js/lib/hash/hmac.js
var require_hmac = __commonJS({
    'node_modules/hash.js/lib/hash/hmac.js'(exports, module) {
        'use strict';
        var utils2 = require_utils2();
        var assert2 = require_minimalistic_assert();
        function Hmac(hash3, key, enc) {
            if (!(this instanceof Hmac)) return new Hmac(hash3, key, enc);
            this.Hash = hash3;
            this.blockSize = hash3.blockSize / 8;
            this.outSize = hash3.outSize / 8;
            this.inner = null;
            this.outer = null;
            this._init(utils2.toArray(key, enc));
        }
        module.exports = Hmac;
        Hmac.prototype._init = function init(key) {
            if (key.length > this.blockSize) key = new this.Hash().update(key).digest();
            assert2(key.length <= this.blockSize);
            for (var i = key.length; i < this.blockSize; i++) key.push(0);
            for (i = 0; i < key.length; i++) key[i] ^= 54;
            this.inner = new this.Hash().update(key);
            for (i = 0; i < key.length; i++) key[i] ^= 106;
            this.outer = new this.Hash().update(key);
        };
        Hmac.prototype.update = function update(msg, enc) {
            this.inner.update(msg, enc);
            return this;
        };
        Hmac.prototype.digest = function digest(enc) {
            this.outer.update(this.inner.digest());
            return this.outer.digest(enc);
        };
    },
});

// node_modules/hash.js/lib/hash.js
var require_hash = __commonJS({
    'node_modules/hash.js/lib/hash.js'(exports) {
        var hash3 = exports;
        hash3.utils = require_utils2();
        hash3.common = require_common();
        hash3.sha = require_sha();
        hash3.ripemd = require_ripemd();
        hash3.hmac = require_hmac();
        hash3.sha1 = hash3.sha.sha1;
        hash3.sha256 = hash3.sha.sha256;
        hash3.sha224 = hash3.sha.sha224;
        hash3.sha384 = hash3.sha.sha384;
        hash3.sha512 = hash3.sha.sha512;
        hash3.ripemd160 = hash3.ripemd.ripemd160;
    },
});

// node_modules/@concordium/rust-bindings/lib/wallet/web/umd/index.min.js
var require_index_min2 = __commonJS({
    'node_modules/@concordium/rust-bindings/lib/wallet/web/umd/index.min.js'(exports, module) {
        !(function (A, I2) {
            if ('object' == typeof exports && 'object' == typeof module) module.exports = I2();
            else if ('function' == typeof define && define.amd) define([], I2);
            else {
                var g = I2();
                for (var Q in g) ('object' == typeof exports ? exports : A)[Q] = g[Q];
            }
        })(self, () =>
            (() => {
                var A = {
                        766: (A2, I3) => {
                            'use strict';
                            (I3.byteLength = function (A3) {
                                var I4 = D(A3),
                                    g3 = I4[0],
                                    Q2 = I4[1];
                                return (3 * (g3 + Q2)) / 4 - Q2;
                            }),
                                (I3.toByteArray = function (A3) {
                                    var I4,
                                        g3,
                                        C2 = D(A3),
                                        E2 = C2[0],
                                        i2 = C2[1],
                                        w = new B(
                                            (function (A4, I5, g4) {
                                                return (3 * (I5 + g4)) / 4 - g4;
                                            })(0, E2, i2)
                                        ),
                                        o = 0,
                                        G2 = i2 > 0 ? E2 - 4 : E2;
                                    for (g3 = 0; g3 < G2; g3 += 4)
                                        (I4 =
                                            (Q[A3.charCodeAt(g3)] << 18) |
                                            (Q[A3.charCodeAt(g3 + 1)] << 12) |
                                            (Q[A3.charCodeAt(g3 + 2)] << 6) |
                                            Q[A3.charCodeAt(g3 + 3)]),
                                            (w[o++] = (I4 >> 16) & 255),
                                            (w[o++] = (I4 >> 8) & 255),
                                            (w[o++] = 255 & I4);
                                    return (
                                        2 === i2 &&
                                            ((I4 = (Q[A3.charCodeAt(g3)] << 2) | (Q[A3.charCodeAt(g3 + 1)] >> 4)),
                                            (w[o++] = 255 & I4)),
                                        1 === i2 &&
                                            ((I4 =
                                                (Q[A3.charCodeAt(g3)] << 10) |
                                                (Q[A3.charCodeAt(g3 + 1)] << 4) |
                                                (Q[A3.charCodeAt(g3 + 2)] >> 2)),
                                            (w[o++] = (I4 >> 8) & 255),
                                            (w[o++] = 255 & I4)),
                                        w
                                    );
                                }),
                                (I3.fromByteArray = function (A3) {
                                    for (
                                        var I4, Q2 = A3.length, B2 = Q2 % 3, C2 = [], E2 = 16383, D2 = 0, w = Q2 - B2;
                                        D2 < w;
                                        D2 += E2
                                    )
                                        C2.push(i(A3, D2, D2 + E2 > w ? w : D2 + E2));
                                    return (
                                        1 === B2
                                            ? ((I4 = A3[Q2 - 1]), C2.push(g2[I4 >> 2] + g2[(I4 << 4) & 63] + '=='))
                                            : 2 === B2 &&
                                              ((I4 = (A3[Q2 - 2] << 8) + A3[Q2 - 1]),
                                              C2.push(g2[I4 >> 10] + g2[(I4 >> 4) & 63] + g2[(I4 << 2) & 63] + '=')),
                                        C2.join('')
                                    );
                                });
                            for (
                                var g2 = [],
                                    Q = [],
                                    B = 'undefined' != typeof Uint8Array ? Uint8Array : Array,
                                    C = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/',
                                    E = 0;
                                E < 64;
                                ++E
                            )
                                (g2[E] = C[E]), (Q[C.charCodeAt(E)] = E);
                            function D(A3) {
                                var I4 = A3.length;
                                if (I4 % 4 > 0) throw new Error('Invalid string. Length must be a multiple of 4');
                                var g3 = A3.indexOf('=');
                                return -1 === g3 && (g3 = I4), [g3, g3 === I4 ? 0 : 4 - (g3 % 4)];
                            }
                            function i(A3, I4, Q2) {
                                for (var B2, C2, E2 = [], D2 = I4; D2 < Q2; D2 += 3)
                                    (B2 =
                                        ((A3[D2] << 16) & 16711680) + ((A3[D2 + 1] << 8) & 65280) + (255 & A3[D2 + 2])),
                                        E2.push(
                                            g2[((C2 = B2) >> 18) & 63] +
                                                g2[(C2 >> 12) & 63] +
                                                g2[(C2 >> 6) & 63] +
                                                g2[63 & C2]
                                        );
                                return E2.join('');
                            }
                            (Q['-'.charCodeAt(0)] = 62), (Q['_'.charCodeAt(0)] = 63);
                        },
                        834: (A2, I3, g2) => {
                            'use strict';
                            const Q = g2(766),
                                B = g2(333),
                                C =
                                    'function' == typeof Symbol && 'function' == typeof Symbol.for
                                        ? Symbol.for('nodejs.util.inspect.custom')
                                        : null;
                            (I3.Buffer = i),
                                (I3.SlowBuffer = function (A3) {
                                    return +A3 != A3 && (A3 = 0), i.alloc(+A3);
                                }),
                                (I3.INSPECT_MAX_BYTES = 50);
                            const E = 2147483647;
                            function D(A3) {
                                if (A3 > E) throw new RangeError('The value "' + A3 + '" is invalid for option "size"');
                                const I4 = new Uint8Array(A3);
                                return Object.setPrototypeOf(I4, i.prototype), I4;
                            }
                            function i(A3, I4, g3) {
                                if ('number' == typeof A3) {
                                    if ('string' == typeof I4)
                                        throw new TypeError(
                                            'The "string" argument must be of type string. Received type number'
                                        );
                                    return G2(A3);
                                }
                                return w(A3, I4, g3);
                            }
                            function w(A3, I4, g3) {
                                if ('string' == typeof A3)
                                    return (function (A4, I5) {
                                        if ((('string' == typeof I5 && '' !== I5) || (I5 = 'utf8'), !i.isEncoding(I5)))
                                            throw new TypeError('Unknown encoding: ' + I5);
                                        const g4 = 0 | F(A4, I5);
                                        let Q3 = D(g4);
                                        const B3 = Q3.write(A4, I5);
                                        return B3 !== g4 && (Q3 = Q3.slice(0, B3)), Q3;
                                    })(A3, I4);
                                if (ArrayBuffer.isView(A3))
                                    return (function (A4) {
                                        if (v(A4, Uint8Array)) {
                                            const I5 = new Uint8Array(A4);
                                            return N2(I5.buffer, I5.byteOffset, I5.byteLength);
                                        }
                                        return M(A4);
                                    })(A3);
                                if (null == A3)
                                    throw new TypeError(
                                        'The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type ' +
                                            typeof A3
                                    );
                                if (v(A3, ArrayBuffer) || (A3 && v(A3.buffer, ArrayBuffer))) return N2(A3, I4, g3);
                                if (
                                    'undefined' != typeof SharedArrayBuffer &&
                                    (v(A3, SharedArrayBuffer) || (A3 && v(A3.buffer, SharedArrayBuffer)))
                                )
                                    return N2(A3, I4, g3);
                                if ('number' == typeof A3)
                                    throw new TypeError(
                                        'The "value" argument must not be of type number. Received type number'
                                    );
                                const Q2 = A3.valueOf && A3.valueOf();
                                if (null != Q2 && Q2 !== A3) return i.from(Q2, I4, g3);
                                const B2 = (function (A4) {
                                    if (i.isBuffer(A4)) {
                                        const I5 = 0 | k(A4.length),
                                            g4 = D(I5);
                                        return 0 === g4.length || A4.copy(g4, 0, 0, I5), g4;
                                    }
                                    return void 0 !== A4.length
                                        ? 'number' != typeof A4.length || u(A4.length)
                                            ? D(0)
                                            : M(A4)
                                        : 'Buffer' === A4.type && Array.isArray(A4.data)
                                          ? M(A4.data)
                                          : void 0;
                                })(A3);
                                if (B2) return B2;
                                if (
                                    'undefined' != typeof Symbol &&
                                    null != Symbol.toPrimitive &&
                                    'function' == typeof A3[Symbol.toPrimitive]
                                )
                                    return i.from(A3[Symbol.toPrimitive]('string'), I4, g3);
                                throw new TypeError(
                                    'The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type ' +
                                        typeof A3
                                );
                            }
                            function o(A3) {
                                if ('number' != typeof A3)
                                    throw new TypeError('"size" argument must be of type number');
                                if (A3 < 0) throw new RangeError('The value "' + A3 + '" is invalid for option "size"');
                            }
                            function G2(A3) {
                                return o(A3), D(A3 < 0 ? 0 : 0 | k(A3));
                            }
                            function M(A3) {
                                const I4 = A3.length < 0 ? 0 : 0 | k(A3.length),
                                    g3 = D(I4);
                                for (let Q2 = 0; Q2 < I4; Q2 += 1) g3[Q2] = 255 & A3[Q2];
                                return g3;
                            }
                            function N2(A3, I4, g3) {
                                if (I4 < 0 || A3.byteLength < I4)
                                    throw new RangeError('"offset" is outside of buffer bounds');
                                if (A3.byteLength < I4 + (g3 || 0))
                                    throw new RangeError('"length" is outside of buffer bounds');
                                let Q2;
                                return (
                                    (Q2 =
                                        void 0 === I4 && void 0 === g3
                                            ? new Uint8Array(A3)
                                            : void 0 === g3
                                              ? new Uint8Array(A3, I4)
                                              : new Uint8Array(A3, I4, g3)),
                                    Object.setPrototypeOf(Q2, i.prototype),
                                    Q2
                                );
                            }
                            function k(A3) {
                                if (A3 >= E)
                                    throw new RangeError(
                                        'Attempt to allocate Buffer larger than maximum size: 0x' +
                                            E.toString(16) +
                                            ' bytes'
                                    );
                                return 0 | A3;
                            }
                            function F(A3, I4) {
                                if (i.isBuffer(A3)) return A3.length;
                                if (ArrayBuffer.isView(A3) || v(A3, ArrayBuffer)) return A3.byteLength;
                                if ('string' != typeof A3)
                                    throw new TypeError(
                                        'The "string" argument must be one of type string, Buffer, or ArrayBuffer. Received type ' +
                                            typeof A3
                                    );
                                const g3 = A3.length,
                                    Q2 = arguments.length > 2 && true === arguments[2];
                                if (!Q2 && 0 === g3) return 0;
                                let B2 = false;
                                for (;;)
                                    switch (I4) {
                                        case 'ascii':
                                        case 'latin1':
                                        case 'binary':
                                            return g3;
                                        case 'utf8':
                                        case 'utf-8':
                                            return m(A3).length;
                                        case 'ucs2':
                                        case 'ucs-2':
                                        case 'utf16le':
                                        case 'utf-16le':
                                            return 2 * g3;
                                        case 'hex':
                                            return g3 >>> 1;
                                        case 'base64':
                                            return b(A3).length;
                                        default:
                                            if (B2) return Q2 ? -1 : m(A3).length;
                                            (I4 = ('' + I4).toLowerCase()), (B2 = true);
                                    }
                            }
                            function a(A3, I4, g3) {
                                let Q2 = false;
                                if (((void 0 === I4 || I4 < 0) && (I4 = 0), I4 > this.length)) return '';
                                if (((void 0 === g3 || g3 > this.length) && (g3 = this.length), g3 <= 0)) return '';
                                if ((g3 >>>= 0) <= (I4 >>>= 0)) return '';
                                for (A3 || (A3 = 'utf8'); ; )
                                    switch (A3) {
                                        case 'hex':
                                            return p(this, I4, g3);
                                        case 'utf8':
                                        case 'utf-8':
                                            return L(this, I4, g3);
                                        case 'ascii':
                                            return H(this, I4, g3);
                                        case 'latin1':
                                        case 'binary':
                                            return q(this, I4, g3);
                                        case 'base64':
                                            return S(this, I4, g3);
                                        case 'ucs2':
                                        case 'ucs-2':
                                        case 'utf16le':
                                        case 'utf-16le':
                                            return O(this, I4, g3);
                                        default:
                                            if (Q2) throw new TypeError('Unknown encoding: ' + A3);
                                            (A3 = (A3 + '').toLowerCase()), (Q2 = true);
                                    }
                            }
                            function K(A3, I4, g3) {
                                const Q2 = A3[I4];
                                (A3[I4] = A3[g3]), (A3[g3] = Q2);
                            }
                            function y(A3, I4, g3, Q2, B2) {
                                if (0 === A3.length) return -1;
                                if (
                                    ('string' == typeof g3
                                        ? ((Q2 = g3), (g3 = 0))
                                        : g3 > 2147483647
                                          ? (g3 = 2147483647)
                                          : g3 < -2147483648 && (g3 = -2147483648),
                                    u((g3 = +g3)) && (g3 = B2 ? 0 : A3.length - 1),
                                    g3 < 0 && (g3 = A3.length + g3),
                                    g3 >= A3.length)
                                ) {
                                    if (B2) return -1;
                                    g3 = A3.length - 1;
                                } else if (g3 < 0) {
                                    if (!B2) return -1;
                                    g3 = 0;
                                }
                                if (('string' == typeof I4 && (I4 = i.from(I4, Q2)), i.isBuffer(I4)))
                                    return 0 === I4.length ? -1 : U(A3, I4, g3, Q2, B2);
                                if ('number' == typeof I4)
                                    return (
                                        (I4 &= 255),
                                        'function' == typeof Uint8Array.prototype.indexOf
                                            ? B2
                                                ? Uint8Array.prototype.indexOf.call(A3, I4, g3)
                                                : Uint8Array.prototype.lastIndexOf.call(A3, I4, g3)
                                            : U(A3, [I4], g3, Q2, B2)
                                    );
                                throw new TypeError('val must be string, number or Buffer');
                            }
                            function U(A3, I4, g3, Q2, B2) {
                                let C2,
                                    E2 = 1,
                                    D2 = A3.length,
                                    i2 = I4.length;
                                if (
                                    void 0 !== Q2 &&
                                    ('ucs2' === (Q2 = String(Q2).toLowerCase()) ||
                                        'ucs-2' === Q2 ||
                                        'utf16le' === Q2 ||
                                        'utf-16le' === Q2)
                                ) {
                                    if (A3.length < 2 || I4.length < 2) return -1;
                                    (E2 = 2), (D2 /= 2), (i2 /= 2), (g3 /= 2);
                                }
                                function w2(A4, I5) {
                                    return 1 === E2 ? A4[I5] : A4.readUInt16BE(I5 * E2);
                                }
                                if (B2) {
                                    let Q3 = -1;
                                    for (C2 = g3; C2 < D2; C2++)
                                        if (w2(A3, C2) === w2(I4, -1 === Q3 ? 0 : C2 - Q3)) {
                                            if ((-1 === Q3 && (Q3 = C2), C2 - Q3 + 1 === i2)) return Q3 * E2;
                                        } else -1 !== Q3 && (C2 -= C2 - Q3), (Q3 = -1);
                                } else
                                    for (g3 + i2 > D2 && (g3 = D2 - i2), C2 = g3; C2 >= 0; C2--) {
                                        let g4 = true;
                                        for (let Q3 = 0; Q3 < i2; Q3++)
                                            if (w2(A3, C2 + Q3) !== w2(I4, Q3)) {
                                                g4 = false;
                                                break;
                                            }
                                        if (g4) return C2;
                                    }
                                return -1;
                            }
                            function h(A3, I4, g3, Q2) {
                                g3 = Number(g3) || 0;
                                const B2 = A3.length - g3;
                                Q2 ? (Q2 = Number(Q2)) > B2 && (Q2 = B2) : (Q2 = B2);
                                const C2 = I4.length;
                                let E2;
                                for (Q2 > C2 / 2 && (Q2 = C2 / 2), E2 = 0; E2 < Q2; ++E2) {
                                    const Q3 = parseInt(I4.substr(2 * E2, 2), 16);
                                    if (u(Q3)) return E2;
                                    A3[g3 + E2] = Q3;
                                }
                                return E2;
                            }
                            function Y(A3, I4, g3, Q2) {
                                return e(m(I4, A3.length - g3), A3, g3, Q2);
                            }
                            function c(A3, I4, g3, Q2) {
                                return e(
                                    (function (A4) {
                                        const I5 = [];
                                        for (let g4 = 0; g4 < A4.length; ++g4) I5.push(255 & A4.charCodeAt(g4));
                                        return I5;
                                    })(I4),
                                    A3,
                                    g3,
                                    Q2
                                );
                            }
                            function J(A3, I4, g3, Q2) {
                                return e(b(I4), A3, g3, Q2);
                            }
                            function R(A3, I4, g3, Q2) {
                                return e(
                                    (function (A4, I5) {
                                        let g4, Q3, B2;
                                        const C2 = [];
                                        for (let E2 = 0; E2 < A4.length && !((I5 -= 2) < 0); ++E2)
                                            (g4 = A4.charCodeAt(E2)),
                                                (Q3 = g4 >> 8),
                                                (B2 = g4 % 256),
                                                C2.push(B2),
                                                C2.push(Q3);
                                        return C2;
                                    })(I4, A3.length - g3),
                                    A3,
                                    g3,
                                    Q2
                                );
                            }
                            function S(A3, I4, g3) {
                                return 0 === I4 && g3 === A3.length
                                    ? Q.fromByteArray(A3)
                                    : Q.fromByteArray(A3.slice(I4, g3));
                            }
                            function L(A3, I4, g3) {
                                g3 = Math.min(A3.length, g3);
                                const Q2 = [];
                                let B2 = I4;
                                for (; B2 < g3; ) {
                                    const I5 = A3[B2];
                                    let C2 = null,
                                        E2 = I5 > 239 ? 4 : I5 > 223 ? 3 : I5 > 191 ? 2 : 1;
                                    if (B2 + E2 <= g3) {
                                        let g4, Q3, D2, i2;
                                        switch (E2) {
                                            case 1:
                                                I5 < 128 && (C2 = I5);
                                                break;
                                            case 2:
                                                (g4 = A3[B2 + 1]),
                                                    128 == (192 & g4) &&
                                                        ((i2 = ((31 & I5) << 6) | (63 & g4)), i2 > 127 && (C2 = i2));
                                                break;
                                            case 3:
                                                (g4 = A3[B2 + 1]),
                                                    (Q3 = A3[B2 + 2]),
                                                    128 == (192 & g4) &&
                                                        128 == (192 & Q3) &&
                                                        ((i2 = ((15 & I5) << 12) | ((63 & g4) << 6) | (63 & Q3)),
                                                        i2 > 2047 && (i2 < 55296 || i2 > 57343) && (C2 = i2));
                                                break;
                                            case 4:
                                                (g4 = A3[B2 + 1]),
                                                    (Q3 = A3[B2 + 2]),
                                                    (D2 = A3[B2 + 3]),
                                                    128 == (192 & g4) &&
                                                        128 == (192 & Q3) &&
                                                        128 == (192 & D2) &&
                                                        ((i2 =
                                                            ((15 & I5) << 18) |
                                                            ((63 & g4) << 12) |
                                                            ((63 & Q3) << 6) |
                                                            (63 & D2)),
                                                        i2 > 65535 && i2 < 1114112 && (C2 = i2));
                                        }
                                    }
                                    null === C2
                                        ? ((C2 = 65533), (E2 = 1))
                                        : C2 > 65535 &&
                                          ((C2 -= 65536),
                                          Q2.push(((C2 >>> 10) & 1023) | 55296),
                                          (C2 = 56320 | (1023 & C2))),
                                        Q2.push(C2),
                                        (B2 += E2);
                                }
                                return (function (A4) {
                                    const I5 = A4.length;
                                    if (I5 <= s) return String.fromCharCode.apply(String, A4);
                                    let g4 = '',
                                        Q3 = 0;
                                    for (; Q3 < I5; ) g4 += String.fromCharCode.apply(String, A4.slice(Q3, (Q3 += s)));
                                    return g4;
                                })(Q2);
                            }
                            (I3.kMaxLength = E),
                                (i.TYPED_ARRAY_SUPPORT = (function () {
                                    try {
                                        const A3 = new Uint8Array(1),
                                            I4 = {
                                                foo: function () {
                                                    return 42;
                                                },
                                            };
                                        return (
                                            Object.setPrototypeOf(I4, Uint8Array.prototype),
                                            Object.setPrototypeOf(A3, I4),
                                            42 === A3.foo()
                                        );
                                    } catch (A3) {
                                        return false;
                                    }
                                })()),
                                i.TYPED_ARRAY_SUPPORT ||
                                    'undefined' == typeof console ||
                                    'function' != typeof console.error ||
                                    console.error(
                                        'This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support.'
                                    ),
                                Object.defineProperty(i.prototype, 'parent', {
                                    enumerable: true,
                                    get: function () {
                                        if (i.isBuffer(this)) return this.buffer;
                                    },
                                }),
                                Object.defineProperty(i.prototype, 'offset', {
                                    enumerable: true,
                                    get: function () {
                                        if (i.isBuffer(this)) return this.byteOffset;
                                    },
                                }),
                                (i.poolSize = 8192),
                                (i.from = function (A3, I4, g3) {
                                    return w(A3, I4, g3);
                                }),
                                Object.setPrototypeOf(i.prototype, Uint8Array.prototype),
                                Object.setPrototypeOf(i, Uint8Array),
                                (i.alloc = function (A3, I4, g3) {
                                    return (function (A4, I5, g4) {
                                        return (
                                            o(A4),
                                            A4 <= 0
                                                ? D(A4)
                                                : void 0 !== I5
                                                  ? 'string' == typeof g4
                                                      ? D(A4).fill(I5, g4)
                                                      : D(A4).fill(I5)
                                                  : D(A4)
                                        );
                                    })(A3, I4, g3);
                                }),
                                (i.allocUnsafe = function (A3) {
                                    return G2(A3);
                                }),
                                (i.allocUnsafeSlow = function (A3) {
                                    return G2(A3);
                                }),
                                (i.isBuffer = function (A3) {
                                    return null != A3 && true === A3._isBuffer && A3 !== i.prototype;
                                }),
                                (i.compare = function (A3, I4) {
                                    if (
                                        (v(A3, Uint8Array) && (A3 = i.from(A3, A3.offset, A3.byteLength)),
                                        v(I4, Uint8Array) && (I4 = i.from(I4, I4.offset, I4.byteLength)),
                                        !i.isBuffer(A3) || !i.isBuffer(I4))
                                    )
                                        throw new TypeError(
                                            'The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array'
                                        );
                                    if (A3 === I4) return 0;
                                    let g3 = A3.length,
                                        Q2 = I4.length;
                                    for (let B2 = 0, C2 = Math.min(g3, Q2); B2 < C2; ++B2)
                                        if (A3[B2] !== I4[B2]) {
                                            (g3 = A3[B2]), (Q2 = I4[B2]);
                                            break;
                                        }
                                    return g3 < Q2 ? -1 : Q2 < g3 ? 1 : 0;
                                }),
                                (i.isEncoding = function (A3) {
                                    switch (String(A3).toLowerCase()) {
                                        case 'hex':
                                        case 'utf8':
                                        case 'utf-8':
                                        case 'ascii':
                                        case 'latin1':
                                        case 'binary':
                                        case 'base64':
                                        case 'ucs2':
                                        case 'ucs-2':
                                        case 'utf16le':
                                        case 'utf-16le':
                                            return true;
                                        default:
                                            return false;
                                    }
                                }),
                                (i.concat = function (A3, I4) {
                                    if (!Array.isArray(A3))
                                        throw new TypeError('"list" argument must be an Array of Buffers');
                                    if (0 === A3.length) return i.alloc(0);
                                    let g3;
                                    if (void 0 === I4) for (I4 = 0, g3 = 0; g3 < A3.length; ++g3) I4 += A3[g3].length;
                                    const Q2 = i.allocUnsafe(I4);
                                    let B2 = 0;
                                    for (g3 = 0; g3 < A3.length; ++g3) {
                                        let I5 = A3[g3];
                                        if (v(I5, Uint8Array))
                                            B2 + I5.length > Q2.length
                                                ? (i.isBuffer(I5) || (I5 = i.from(I5)), I5.copy(Q2, B2))
                                                : Uint8Array.prototype.set.call(Q2, I5, B2);
                                        else {
                                            if (!i.isBuffer(I5))
                                                throw new TypeError('"list" argument must be an Array of Buffers');
                                            I5.copy(Q2, B2);
                                        }
                                        B2 += I5.length;
                                    }
                                    return Q2;
                                }),
                                (i.byteLength = F),
                                (i.prototype._isBuffer = true),
                                (i.prototype.swap16 = function () {
                                    const A3 = this.length;
                                    if (A3 % 2 != 0) throw new RangeError('Buffer size must be a multiple of 16-bits');
                                    for (let I4 = 0; I4 < A3; I4 += 2) K(this, I4, I4 + 1);
                                    return this;
                                }),
                                (i.prototype.swap32 = function () {
                                    const A3 = this.length;
                                    if (A3 % 4 != 0) throw new RangeError('Buffer size must be a multiple of 32-bits');
                                    for (let I4 = 0; I4 < A3; I4 += 4) K(this, I4, I4 + 3), K(this, I4 + 1, I4 + 2);
                                    return this;
                                }),
                                (i.prototype.swap64 = function () {
                                    const A3 = this.length;
                                    if (A3 % 8 != 0) throw new RangeError('Buffer size must be a multiple of 64-bits');
                                    for (let I4 = 0; I4 < A3; I4 += 8)
                                        K(this, I4, I4 + 7),
                                            K(this, I4 + 1, I4 + 6),
                                            K(this, I4 + 2, I4 + 5),
                                            K(this, I4 + 3, I4 + 4);
                                    return this;
                                }),
                                (i.prototype.toString = function () {
                                    const A3 = this.length;
                                    return 0 === A3
                                        ? ''
                                        : 0 === arguments.length
                                          ? L(this, 0, A3)
                                          : a.apply(this, arguments);
                                }),
                                (i.prototype.toLocaleString = i.prototype.toString),
                                (i.prototype.equals = function (A3) {
                                    if (!i.isBuffer(A3)) throw new TypeError('Argument must be a Buffer');
                                    return this === A3 || 0 === i.compare(this, A3);
                                }),
                                (i.prototype.inspect = function () {
                                    let A3 = '';
                                    const g3 = I3.INSPECT_MAX_BYTES;
                                    return (
                                        (A3 = this.toString('hex', 0, g3)
                                            .replace(/(.{2})/g, '$1 ')
                                            .trim()),
                                        this.length > g3 && (A3 += ' ... '),
                                        '<Buffer ' + A3 + '>'
                                    );
                                }),
                                C && (i.prototype[C] = i.prototype.inspect),
                                (i.prototype.compare = function (A3, I4, g3, Q2, B2) {
                                    if (
                                        (v(A3, Uint8Array) && (A3 = i.from(A3, A3.offset, A3.byteLength)),
                                        !i.isBuffer(A3))
                                    )
                                        throw new TypeError(
                                            'The "target" argument must be one of type Buffer or Uint8Array. Received type ' +
                                                typeof A3
                                        );
                                    if (
                                        (void 0 === I4 && (I4 = 0),
                                        void 0 === g3 && (g3 = A3 ? A3.length : 0),
                                        void 0 === Q2 && (Q2 = 0),
                                        void 0 === B2 && (B2 = this.length),
                                        I4 < 0 || g3 > A3.length || Q2 < 0 || B2 > this.length)
                                    )
                                        throw new RangeError('out of range index');
                                    if (Q2 >= B2 && I4 >= g3) return 0;
                                    if (Q2 >= B2) return -1;
                                    if (I4 >= g3) return 1;
                                    if (this === A3) return 0;
                                    let C2 = (B2 >>>= 0) - (Q2 >>>= 0),
                                        E2 = (g3 >>>= 0) - (I4 >>>= 0);
                                    const D2 = Math.min(C2, E2),
                                        w2 = this.slice(Q2, B2),
                                        o2 = A3.slice(I4, g3);
                                    for (let A4 = 0; A4 < D2; ++A4)
                                        if (w2[A4] !== o2[A4]) {
                                            (C2 = w2[A4]), (E2 = o2[A4]);
                                            break;
                                        }
                                    return C2 < E2 ? -1 : E2 < C2 ? 1 : 0;
                                }),
                                (i.prototype.includes = function (A3, I4, g3) {
                                    return -1 !== this.indexOf(A3, I4, g3);
                                }),
                                (i.prototype.indexOf = function (A3, I4, g3) {
                                    return y(this, A3, I4, g3, true);
                                }),
                                (i.prototype.lastIndexOf = function (A3, I4, g3) {
                                    return y(this, A3, I4, g3, false);
                                }),
                                (i.prototype.write = function (A3, I4, g3, Q2) {
                                    if (void 0 === I4) (Q2 = 'utf8'), (g3 = this.length), (I4 = 0);
                                    else if (void 0 === g3 && 'string' == typeof I4)
                                        (Q2 = I4), (g3 = this.length), (I4 = 0);
                                    else {
                                        if (!isFinite(I4))
                                            throw new Error(
                                                'Buffer.write(string, encoding, offset[, length]) is no longer supported'
                                            );
                                        (I4 >>>= 0),
                                            isFinite(g3)
                                                ? ((g3 >>>= 0), void 0 === Q2 && (Q2 = 'utf8'))
                                                : ((Q2 = g3), (g3 = void 0));
                                    }
                                    const B2 = this.length - I4;
                                    if (
                                        ((void 0 === g3 || g3 > B2) && (g3 = B2),
                                        (A3.length > 0 && (g3 < 0 || I4 < 0)) || I4 > this.length)
                                    )
                                        throw new RangeError('Attempt to write outside buffer bounds');
                                    Q2 || (Q2 = 'utf8');
                                    let C2 = false;
                                    for (;;)
                                        switch (Q2) {
                                            case 'hex':
                                                return h(this, A3, I4, g3);
                                            case 'utf8':
                                            case 'utf-8':
                                                return Y(this, A3, I4, g3);
                                            case 'ascii':
                                            case 'latin1':
                                            case 'binary':
                                                return c(this, A3, I4, g3);
                                            case 'base64':
                                                return J(this, A3, I4, g3);
                                            case 'ucs2':
                                            case 'ucs-2':
                                            case 'utf16le':
                                            case 'utf-16le':
                                                return R(this, A3, I4, g3);
                                            default:
                                                if (C2) throw new TypeError('Unknown encoding: ' + Q2);
                                                (Q2 = ('' + Q2).toLowerCase()), (C2 = true);
                                        }
                                }),
                                (i.prototype.toJSON = function () {
                                    return { type: 'Buffer', data: Array.prototype.slice.call(this._arr || this, 0) };
                                });
                            const s = 4096;
                            function H(A3, I4, g3) {
                                let Q2 = '';
                                g3 = Math.min(A3.length, g3);
                                for (let B2 = I4; B2 < g3; ++B2) Q2 += String.fromCharCode(127 & A3[B2]);
                                return Q2;
                            }
                            function q(A3, I4, g3) {
                                let Q2 = '';
                                g3 = Math.min(A3.length, g3);
                                for (let B2 = I4; B2 < g3; ++B2) Q2 += String.fromCharCode(A3[B2]);
                                return Q2;
                            }
                            function p(A3, I4, g3) {
                                const Q2 = A3.length;
                                (!I4 || I4 < 0) && (I4 = 0), (!g3 || g3 < 0 || g3 > Q2) && (g3 = Q2);
                                let B2 = '';
                                for (let Q3 = I4; Q3 < g3; ++Q3) B2 += X[A3[Q3]];
                                return B2;
                            }
                            function O(A3, I4, g3) {
                                const Q2 = A3.slice(I4, g3);
                                let B2 = '';
                                for (let A4 = 0; A4 < Q2.length - 1; A4 += 2)
                                    B2 += String.fromCharCode(Q2[A4] + 256 * Q2[A4 + 1]);
                                return B2;
                            }
                            function t(A3, I4, g3) {
                                if (A3 % 1 != 0 || A3 < 0) throw new RangeError('offset is not uint');
                                if (A3 + I4 > g3) throw new RangeError('Trying to access beyond buffer length');
                            }
                            function W2(A3, I4, g3, Q2, B2, C2) {
                                if (!i.isBuffer(A3)) throw new TypeError('"buffer" argument must be a Buffer instance');
                                if (I4 > B2 || I4 < C2) throw new RangeError('"value" argument is out of bounds');
                                if (g3 + Q2 > A3.length) throw new RangeError('Index out of range');
                            }
                            function d(A3, I4, g3, Q2, B2) {
                                T(I4, Q2, B2, A3, g3, 7);
                                let C2 = Number(I4 & BigInt(4294967295));
                                (A3[g3++] = C2),
                                    (C2 >>= 8),
                                    (A3[g3++] = C2),
                                    (C2 >>= 8),
                                    (A3[g3++] = C2),
                                    (C2 >>= 8),
                                    (A3[g3++] = C2);
                                let E2 = Number((I4 >> BigInt(32)) & BigInt(4294967295));
                                return (
                                    (A3[g3++] = E2),
                                    (E2 >>= 8),
                                    (A3[g3++] = E2),
                                    (E2 >>= 8),
                                    (A3[g3++] = E2),
                                    (E2 >>= 8),
                                    (A3[g3++] = E2),
                                    g3
                                );
                            }
                            function Z(A3, I4, g3, Q2, B2) {
                                T(I4, Q2, B2, A3, g3, 7);
                                let C2 = Number(I4 & BigInt(4294967295));
                                (A3[g3 + 7] = C2),
                                    (C2 >>= 8),
                                    (A3[g3 + 6] = C2),
                                    (C2 >>= 8),
                                    (A3[g3 + 5] = C2),
                                    (C2 >>= 8),
                                    (A3[g3 + 4] = C2);
                                let E2 = Number((I4 >> BigInt(32)) & BigInt(4294967295));
                                return (
                                    (A3[g3 + 3] = E2),
                                    (E2 >>= 8),
                                    (A3[g3 + 2] = E2),
                                    (E2 >>= 8),
                                    (A3[g3 + 1] = E2),
                                    (E2 >>= 8),
                                    (A3[g3] = E2),
                                    g3 + 8
                                );
                            }
                            function x(A3, I4, g3, Q2, B2, C2) {
                                if (g3 + Q2 > A3.length) throw new RangeError('Index out of range');
                                if (g3 < 0) throw new RangeError('Index out of range');
                            }
                            function r(A3, I4, g3, Q2, C2) {
                                return (
                                    (I4 = +I4),
                                    (g3 >>>= 0),
                                    C2 || x(A3, 0, g3, 4),
                                    B.write(A3, I4, g3, Q2, 23, 4),
                                    g3 + 4
                                );
                            }
                            function j(A3, I4, g3, Q2, C2) {
                                return (
                                    (I4 = +I4),
                                    (g3 >>>= 0),
                                    C2 || x(A3, 0, g3, 8),
                                    B.write(A3, I4, g3, Q2, 52, 8),
                                    g3 + 8
                                );
                            }
                            (i.prototype.slice = function (A3, I4) {
                                const g3 = this.length;
                                (A3 = ~~A3) < 0 ? (A3 += g3) < 0 && (A3 = 0) : A3 > g3 && (A3 = g3),
                                    (I4 = void 0 === I4 ? g3 : ~~I4) < 0
                                        ? (I4 += g3) < 0 && (I4 = 0)
                                        : I4 > g3 && (I4 = g3),
                                    I4 < A3 && (I4 = A3);
                                const Q2 = this.subarray(A3, I4);
                                return Object.setPrototypeOf(Q2, i.prototype), Q2;
                            }),
                                (i.prototype.readUintLE = i.prototype.readUIntLE =
                                    function (A3, I4, g3) {
                                        (A3 >>>= 0), (I4 >>>= 0), g3 || t(A3, I4, this.length);
                                        let Q2 = this[A3],
                                            B2 = 1,
                                            C2 = 0;
                                        for (; ++C2 < I4 && (B2 *= 256); ) Q2 += this[A3 + C2] * B2;
                                        return Q2;
                                    }),
                                (i.prototype.readUintBE = i.prototype.readUIntBE =
                                    function (A3, I4, g3) {
                                        (A3 >>>= 0), (I4 >>>= 0), g3 || t(A3, I4, this.length);
                                        let Q2 = this[A3 + --I4],
                                            B2 = 1;
                                        for (; I4 > 0 && (B2 *= 256); ) Q2 += this[A3 + --I4] * B2;
                                        return Q2;
                                    }),
                                (i.prototype.readUint8 = i.prototype.readUInt8 =
                                    function (A3, I4) {
                                        return (A3 >>>= 0), I4 || t(A3, 1, this.length), this[A3];
                                    }),
                                (i.prototype.readUint16LE = i.prototype.readUInt16LE =
                                    function (A3, I4) {
                                        return (A3 >>>= 0), I4 || t(A3, 2, this.length), this[A3] | (this[A3 + 1] << 8);
                                    }),
                                (i.prototype.readUint16BE = i.prototype.readUInt16BE =
                                    function (A3, I4) {
                                        return (A3 >>>= 0), I4 || t(A3, 2, this.length), (this[A3] << 8) | this[A3 + 1];
                                    }),
                                (i.prototype.readUint32LE = i.prototype.readUInt32LE =
                                    function (A3, I4) {
                                        return (
                                            (A3 >>>= 0),
                                            I4 || t(A3, 4, this.length),
                                            (this[A3] | (this[A3 + 1] << 8) | (this[A3 + 2] << 16)) +
                                                16777216 * this[A3 + 3]
                                        );
                                    }),
                                (i.prototype.readUint32BE = i.prototype.readUInt32BE =
                                    function (A3, I4) {
                                        return (
                                            (A3 >>>= 0),
                                            I4 || t(A3, 4, this.length),
                                            16777216 * this[A3] +
                                                ((this[A3 + 1] << 16) | (this[A3 + 2] << 8) | this[A3 + 3])
                                        );
                                    }),
                                (i.prototype.readBigUInt64LE = _(function (A3) {
                                    P3((A3 >>>= 0), 'offset');
                                    const I4 = this[A3],
                                        g3 = this[A3 + 7];
                                    (void 0 !== I4 && void 0 !== g3) || z(A3, this.length - 8);
                                    const Q2 = I4 + 256 * this[++A3] + 65536 * this[++A3] + this[++A3] * 2 ** 24,
                                        B2 = this[++A3] + 256 * this[++A3] + 65536 * this[++A3] + g3 * 2 ** 24;
                                    return BigInt(Q2) + (BigInt(B2) << BigInt(32));
                                })),
                                (i.prototype.readBigUInt64BE = _(function (A3) {
                                    P3((A3 >>>= 0), 'offset');
                                    const I4 = this[A3],
                                        g3 = this[A3 + 7];
                                    (void 0 !== I4 && void 0 !== g3) || z(A3, this.length - 8);
                                    const Q2 = I4 * 2 ** 24 + 65536 * this[++A3] + 256 * this[++A3] + this[++A3],
                                        B2 = this[++A3] * 2 ** 24 + 65536 * this[++A3] + 256 * this[++A3] + g3;
                                    return (BigInt(Q2) << BigInt(32)) + BigInt(B2);
                                })),
                                (i.prototype.readIntLE = function (A3, I4, g3) {
                                    (A3 >>>= 0), (I4 >>>= 0), g3 || t(A3, I4, this.length);
                                    let Q2 = this[A3],
                                        B2 = 1,
                                        C2 = 0;
                                    for (; ++C2 < I4 && (B2 *= 256); ) Q2 += this[A3 + C2] * B2;
                                    return (B2 *= 128), Q2 >= B2 && (Q2 -= Math.pow(2, 8 * I4)), Q2;
                                }),
                                (i.prototype.readIntBE = function (A3, I4, g3) {
                                    (A3 >>>= 0), (I4 >>>= 0), g3 || t(A3, I4, this.length);
                                    let Q2 = I4,
                                        B2 = 1,
                                        C2 = this[A3 + --Q2];
                                    for (; Q2 > 0 && (B2 *= 256); ) C2 += this[A3 + --Q2] * B2;
                                    return (B2 *= 128), C2 >= B2 && (C2 -= Math.pow(2, 8 * I4)), C2;
                                }),
                                (i.prototype.readInt8 = function (A3, I4) {
                                    return (
                                        (A3 >>>= 0),
                                        I4 || t(A3, 1, this.length),
                                        128 & this[A3] ? -1 * (255 - this[A3] + 1) : this[A3]
                                    );
                                }),
                                (i.prototype.readInt16LE = function (A3, I4) {
                                    (A3 >>>= 0), I4 || t(A3, 2, this.length);
                                    const g3 = this[A3] | (this[A3 + 1] << 8);
                                    return 32768 & g3 ? 4294901760 | g3 : g3;
                                }),
                                (i.prototype.readInt16BE = function (A3, I4) {
                                    (A3 >>>= 0), I4 || t(A3, 2, this.length);
                                    const g3 = this[A3 + 1] | (this[A3] << 8);
                                    return 32768 & g3 ? 4294901760 | g3 : g3;
                                }),
                                (i.prototype.readInt32LE = function (A3, I4) {
                                    return (
                                        (A3 >>>= 0),
                                        I4 || t(A3, 4, this.length),
                                        this[A3] | (this[A3 + 1] << 8) | (this[A3 + 2] << 16) | (this[A3 + 3] << 24)
                                    );
                                }),
                                (i.prototype.readInt32BE = function (A3, I4) {
                                    return (
                                        (A3 >>>= 0),
                                        I4 || t(A3, 4, this.length),
                                        (this[A3] << 24) | (this[A3 + 1] << 16) | (this[A3 + 2] << 8) | this[A3 + 3]
                                    );
                                }),
                                (i.prototype.readBigInt64LE = _(function (A3) {
                                    P3((A3 >>>= 0), 'offset');
                                    const I4 = this[A3],
                                        g3 = this[A3 + 7];
                                    (void 0 !== I4 && void 0 !== g3) || z(A3, this.length - 8);
                                    const Q2 = this[A3 + 4] + 256 * this[A3 + 5] + 65536 * this[A3 + 6] + (g3 << 24);
                                    return (
                                        (BigInt(Q2) << BigInt(32)) +
                                        BigInt(I4 + 256 * this[++A3] + 65536 * this[++A3] + this[++A3] * 2 ** 24)
                                    );
                                })),
                                (i.prototype.readBigInt64BE = _(function (A3) {
                                    P3((A3 >>>= 0), 'offset');
                                    const I4 = this[A3],
                                        g3 = this[A3 + 7];
                                    (void 0 !== I4 && void 0 !== g3) || z(A3, this.length - 8);
                                    const Q2 = (I4 << 24) + 65536 * this[++A3] + 256 * this[++A3] + this[++A3];
                                    return (
                                        (BigInt(Q2) << BigInt(32)) +
                                        BigInt(this[++A3] * 2 ** 24 + 65536 * this[++A3] + 256 * this[++A3] + g3)
                                    );
                                })),
                                (i.prototype.readFloatLE = function (A3, I4) {
                                    return (A3 >>>= 0), I4 || t(A3, 4, this.length), B.read(this, A3, true, 23, 4);
                                }),
                                (i.prototype.readFloatBE = function (A3, I4) {
                                    return (A3 >>>= 0), I4 || t(A3, 4, this.length), B.read(this, A3, false, 23, 4);
                                }),
                                (i.prototype.readDoubleLE = function (A3, I4) {
                                    return (A3 >>>= 0), I4 || t(A3, 8, this.length), B.read(this, A3, true, 52, 8);
                                }),
                                (i.prototype.readDoubleBE = function (A3, I4) {
                                    return (A3 >>>= 0), I4 || t(A3, 8, this.length), B.read(this, A3, false, 52, 8);
                                }),
                                (i.prototype.writeUintLE = i.prototype.writeUIntLE =
                                    function (A3, I4, g3, Q2) {
                                        (A3 = +A3),
                                            (I4 >>>= 0),
                                            (g3 >>>= 0),
                                            Q2 || W2(this, A3, I4, g3, Math.pow(2, 8 * g3) - 1, 0);
                                        let B2 = 1,
                                            C2 = 0;
                                        for (this[I4] = 255 & A3; ++C2 < g3 && (B2 *= 256); )
                                            this[I4 + C2] = (A3 / B2) & 255;
                                        return I4 + g3;
                                    }),
                                (i.prototype.writeUintBE = i.prototype.writeUIntBE =
                                    function (A3, I4, g3, Q2) {
                                        (A3 = +A3),
                                            (I4 >>>= 0),
                                            (g3 >>>= 0),
                                            Q2 || W2(this, A3, I4, g3, Math.pow(2, 8 * g3) - 1, 0);
                                        let B2 = g3 - 1,
                                            C2 = 1;
                                        for (this[I4 + B2] = 255 & A3; --B2 >= 0 && (C2 *= 256); )
                                            this[I4 + B2] = (A3 / C2) & 255;
                                        return I4 + g3;
                                    }),
                                (i.prototype.writeUint8 = i.prototype.writeUInt8 =
                                    function (A3, I4, g3) {
                                        return (
                                            (A3 = +A3),
                                            (I4 >>>= 0),
                                            g3 || W2(this, A3, I4, 1, 255, 0),
                                            (this[I4] = 255 & A3),
                                            I4 + 1
                                        );
                                    }),
                                (i.prototype.writeUint16LE = i.prototype.writeUInt16LE =
                                    function (A3, I4, g3) {
                                        return (
                                            (A3 = +A3),
                                            (I4 >>>= 0),
                                            g3 || W2(this, A3, I4, 2, 65535, 0),
                                            (this[I4] = 255 & A3),
                                            (this[I4 + 1] = A3 >>> 8),
                                            I4 + 2
                                        );
                                    }),
                                (i.prototype.writeUint16BE = i.prototype.writeUInt16BE =
                                    function (A3, I4, g3) {
                                        return (
                                            (A3 = +A3),
                                            (I4 >>>= 0),
                                            g3 || W2(this, A3, I4, 2, 65535, 0),
                                            (this[I4] = A3 >>> 8),
                                            (this[I4 + 1] = 255 & A3),
                                            I4 + 2
                                        );
                                    }),
                                (i.prototype.writeUint32LE = i.prototype.writeUInt32LE =
                                    function (A3, I4, g3) {
                                        return (
                                            (A3 = +A3),
                                            (I4 >>>= 0),
                                            g3 || W2(this, A3, I4, 4, 4294967295, 0),
                                            (this[I4 + 3] = A3 >>> 24),
                                            (this[I4 + 2] = A3 >>> 16),
                                            (this[I4 + 1] = A3 >>> 8),
                                            (this[I4] = 255 & A3),
                                            I4 + 4
                                        );
                                    }),
                                (i.prototype.writeUint32BE = i.prototype.writeUInt32BE =
                                    function (A3, I4, g3) {
                                        return (
                                            (A3 = +A3),
                                            (I4 >>>= 0),
                                            g3 || W2(this, A3, I4, 4, 4294967295, 0),
                                            (this[I4] = A3 >>> 24),
                                            (this[I4 + 1] = A3 >>> 16),
                                            (this[I4 + 2] = A3 >>> 8),
                                            (this[I4 + 3] = 255 & A3),
                                            I4 + 4
                                        );
                                    }),
                                (i.prototype.writeBigUInt64LE = _(function (A3, I4 = 0) {
                                    return d(this, A3, I4, BigInt(0), BigInt('0xffffffffffffffff'));
                                })),
                                (i.prototype.writeBigUInt64BE = _(function (A3, I4 = 0) {
                                    return Z(this, A3, I4, BigInt(0), BigInt('0xffffffffffffffff'));
                                })),
                                (i.prototype.writeIntLE = function (A3, I4, g3, Q2) {
                                    if (((A3 = +A3), (I4 >>>= 0), !Q2)) {
                                        const Q3 = Math.pow(2, 8 * g3 - 1);
                                        W2(this, A3, I4, g3, Q3 - 1, -Q3);
                                    }
                                    let B2 = 0,
                                        C2 = 1,
                                        E2 = 0;
                                    for (this[I4] = 255 & A3; ++B2 < g3 && (C2 *= 256); )
                                        A3 < 0 && 0 === E2 && 0 !== this[I4 + B2 - 1] && (E2 = 1),
                                            (this[I4 + B2] = (((A3 / C2) >> 0) - E2) & 255);
                                    return I4 + g3;
                                }),
                                (i.prototype.writeIntBE = function (A3, I4, g3, Q2) {
                                    if (((A3 = +A3), (I4 >>>= 0), !Q2)) {
                                        const Q3 = Math.pow(2, 8 * g3 - 1);
                                        W2(this, A3, I4, g3, Q3 - 1, -Q3);
                                    }
                                    let B2 = g3 - 1,
                                        C2 = 1,
                                        E2 = 0;
                                    for (this[I4 + B2] = 255 & A3; --B2 >= 0 && (C2 *= 256); )
                                        A3 < 0 && 0 === E2 && 0 !== this[I4 + B2 + 1] && (E2 = 1),
                                            (this[I4 + B2] = (((A3 / C2) >> 0) - E2) & 255);
                                    return I4 + g3;
                                }),
                                (i.prototype.writeInt8 = function (A3, I4, g3) {
                                    return (
                                        (A3 = +A3),
                                        (I4 >>>= 0),
                                        g3 || W2(this, A3, I4, 1, 127, -128),
                                        A3 < 0 && (A3 = 255 + A3 + 1),
                                        (this[I4] = 255 & A3),
                                        I4 + 1
                                    );
                                }),
                                (i.prototype.writeInt16LE = function (A3, I4, g3) {
                                    return (
                                        (A3 = +A3),
                                        (I4 >>>= 0),
                                        g3 || W2(this, A3, I4, 2, 32767, -32768),
                                        (this[I4] = 255 & A3),
                                        (this[I4 + 1] = A3 >>> 8),
                                        I4 + 2
                                    );
                                }),
                                (i.prototype.writeInt16BE = function (A3, I4, g3) {
                                    return (
                                        (A3 = +A3),
                                        (I4 >>>= 0),
                                        g3 || W2(this, A3, I4, 2, 32767, -32768),
                                        (this[I4] = A3 >>> 8),
                                        (this[I4 + 1] = 255 & A3),
                                        I4 + 2
                                    );
                                }),
                                (i.prototype.writeInt32LE = function (A3, I4, g3) {
                                    return (
                                        (A3 = +A3),
                                        (I4 >>>= 0),
                                        g3 || W2(this, A3, I4, 4, 2147483647, -2147483648),
                                        (this[I4] = 255 & A3),
                                        (this[I4 + 1] = A3 >>> 8),
                                        (this[I4 + 2] = A3 >>> 16),
                                        (this[I4 + 3] = A3 >>> 24),
                                        I4 + 4
                                    );
                                }),
                                (i.prototype.writeInt32BE = function (A3, I4, g3) {
                                    return (
                                        (A3 = +A3),
                                        (I4 >>>= 0),
                                        g3 || W2(this, A3, I4, 4, 2147483647, -2147483648),
                                        A3 < 0 && (A3 = 4294967295 + A3 + 1),
                                        (this[I4] = A3 >>> 24),
                                        (this[I4 + 1] = A3 >>> 16),
                                        (this[I4 + 2] = A3 >>> 8),
                                        (this[I4 + 3] = 255 & A3),
                                        I4 + 4
                                    );
                                }),
                                (i.prototype.writeBigInt64LE = _(function (A3, I4 = 0) {
                                    return d(this, A3, I4, -BigInt('0x8000000000000000'), BigInt('0x7fffffffffffffff'));
                                })),
                                (i.prototype.writeBigInt64BE = _(function (A3, I4 = 0) {
                                    return Z(this, A3, I4, -BigInt('0x8000000000000000'), BigInt('0x7fffffffffffffff'));
                                })),
                                (i.prototype.writeFloatLE = function (A3, I4, g3) {
                                    return r(this, A3, I4, true, g3);
                                }),
                                (i.prototype.writeFloatBE = function (A3, I4, g3) {
                                    return r(this, A3, I4, false, g3);
                                }),
                                (i.prototype.writeDoubleLE = function (A3, I4, g3) {
                                    return j(this, A3, I4, true, g3);
                                }),
                                (i.prototype.writeDoubleBE = function (A3, I4, g3) {
                                    return j(this, A3, I4, false, g3);
                                }),
                                (i.prototype.copy = function (A3, I4, g3, Q2) {
                                    if (!i.isBuffer(A3)) throw new TypeError('argument should be a Buffer');
                                    if (
                                        (g3 || (g3 = 0),
                                        Q2 || 0 === Q2 || (Q2 = this.length),
                                        I4 >= A3.length && (I4 = A3.length),
                                        I4 || (I4 = 0),
                                        Q2 > 0 && Q2 < g3 && (Q2 = g3),
                                        Q2 === g3)
                                    )
                                        return 0;
                                    if (0 === A3.length || 0 === this.length) return 0;
                                    if (I4 < 0) throw new RangeError('targetStart out of bounds');
                                    if (g3 < 0 || g3 >= this.length) throw new RangeError('Index out of range');
                                    if (Q2 < 0) throw new RangeError('sourceEnd out of bounds');
                                    Q2 > this.length && (Q2 = this.length),
                                        A3.length - I4 < Q2 - g3 && (Q2 = A3.length - I4 + g3);
                                    const B2 = Q2 - g3;
                                    return (
                                        this === A3 && 'function' == typeof Uint8Array.prototype.copyWithin
                                            ? this.copyWithin(I4, g3, Q2)
                                            : Uint8Array.prototype.set.call(A3, this.subarray(g3, Q2), I4),
                                        B2
                                    );
                                }),
                                (i.prototype.fill = function (A3, I4, g3, Q2) {
                                    if ('string' == typeof A3) {
                                        if (
                                            ('string' == typeof I4
                                                ? ((Q2 = I4), (I4 = 0), (g3 = this.length))
                                                : 'string' == typeof g3 && ((Q2 = g3), (g3 = this.length)),
                                            void 0 !== Q2 && 'string' != typeof Q2)
                                        )
                                            throw new TypeError('encoding must be a string');
                                        if ('string' == typeof Q2 && !i.isEncoding(Q2))
                                            throw new TypeError('Unknown encoding: ' + Q2);
                                        if (1 === A3.length) {
                                            const I5 = A3.charCodeAt(0);
                                            (('utf8' === Q2 && I5 < 128) || 'latin1' === Q2) && (A3 = I5);
                                        }
                                    } else
                                        'number' == typeof A3
                                            ? (A3 &= 255)
                                            : 'boolean' == typeof A3 && (A3 = Number(A3));
                                    if (I4 < 0 || this.length < I4 || this.length < g3)
                                        throw new RangeError('Out of range index');
                                    if (g3 <= I4) return this;
                                    let B2;
                                    if (
                                        ((I4 >>>= 0),
                                        (g3 = void 0 === g3 ? this.length : g3 >>> 0),
                                        A3 || (A3 = 0),
                                        'number' == typeof A3)
                                    )
                                        for (B2 = I4; B2 < g3; ++B2) this[B2] = A3;
                                    else {
                                        const C2 = i.isBuffer(A3) ? A3 : i.from(A3, Q2),
                                            E2 = C2.length;
                                        if (0 === E2)
                                            throw new TypeError(
                                                'The value "' + A3 + '" is invalid for argument "value"'
                                            );
                                        for (B2 = 0; B2 < g3 - I4; ++B2) this[B2 + I4] = C2[B2 % E2];
                                    }
                                    return this;
                                });
                            const V = {};
                            function f(A3, I4, g3) {
                                V[A3] = class extends g3 {
                                    constructor() {
                                        super(),
                                            Object.defineProperty(this, 'message', {
                                                value: I4.apply(this, arguments),
                                                writable: true,
                                                configurable: true,
                                            }),
                                            (this.name = `${this.name} [${A3}]`),
                                            this.stack,
                                            delete this.name;
                                    }
                                    get code() {
                                        return A3;
                                    }
                                    set code(A4) {
                                        Object.defineProperty(this, 'code', {
                                            configurable: true,
                                            enumerable: true,
                                            value: A4,
                                            writable: true,
                                        });
                                    }
                                    toString() {
                                        return `${this.name} [${A3}]: ${this.message}`;
                                    }
                                };
                            }
                            function l(A3) {
                                let I4 = '',
                                    g3 = A3.length;
                                const Q2 = '-' === A3[0] ? 1 : 0;
                                for (; g3 >= Q2 + 4; g3 -= 3) I4 = `_${A3.slice(g3 - 3, g3)}${I4}`;
                                return `${A3.slice(0, g3)}${I4}`;
                            }
                            function T(A3, I4, g3, Q2, B2, C2) {
                                if (A3 > g3 || A3 < I4) {
                                    const Q3 = 'bigint' == typeof I4 ? 'n' : '';
                                    let B3;
                                    throw (
                                        ((B3 =
                                            C2 > 3
                                                ? 0 === I4 || I4 === BigInt(0)
                                                    ? `>= 0${Q3} and < 2${Q3} ** ${8 * (C2 + 1)}${Q3}`
                                                    : `>= -(2${Q3} ** ${8 * (C2 + 1) - 1}${Q3}) and < 2 ** ${8 * (C2 + 1) - 1}${Q3}`
                                                : `>= ${I4}${Q3} and <= ${g3}${Q3}`),
                                        new V.ERR_OUT_OF_RANGE('value', B3, A3))
                                    );
                                }
                                !(function (A4, I5, g4) {
                                    P3(I5, 'offset'),
                                        (void 0 !== A4[I5] && void 0 !== A4[I5 + g4]) || z(I5, A4.length - (g4 + 1));
                                })(Q2, B2, C2);
                            }
                            function P3(A3, I4) {
                                if ('number' != typeof A3) throw new V.ERR_INVALID_ARG_TYPE(I4, 'number', A3);
                            }
                            function z(A3, I4, g3) {
                                if (Math.floor(A3) !== A3)
                                    throw (P3(A3, g3), new V.ERR_OUT_OF_RANGE(g3 || 'offset', 'an integer', A3));
                                if (I4 < 0) throw new V.ERR_BUFFER_OUT_OF_BOUNDS();
                                throw new V.ERR_OUT_OF_RANGE(g3 || 'offset', `>= ${g3 ? 1 : 0} and <= ${I4}`, A3);
                            }
                            f(
                                'ERR_BUFFER_OUT_OF_BOUNDS',
                                function (A3) {
                                    return A3
                                        ? `${A3} is outside of buffer bounds`
                                        : 'Attempt to access memory outside buffer bounds';
                                },
                                RangeError
                            ),
                                f(
                                    'ERR_INVALID_ARG_TYPE',
                                    function (A3, I4) {
                                        return `The "${A3}" argument must be of type number. Received type ${typeof I4}`;
                                    },
                                    TypeError
                                ),
                                f(
                                    'ERR_OUT_OF_RANGE',
                                    function (A3, I4, g3) {
                                        let Q2 = `The value of "${A3}" is out of range.`,
                                            B2 = g3;
                                        return (
                                            Number.isInteger(g3) && Math.abs(g3) > 2 ** 32
                                                ? (B2 = l(String(g3)))
                                                : 'bigint' == typeof g3 &&
                                                  ((B2 = String(g3)),
                                                  (g3 > BigInt(2) ** BigInt(32) || g3 < -(BigInt(2) ** BigInt(32))) &&
                                                      (B2 = l(B2)),
                                                  (B2 += 'n')),
                                            (Q2 += ` It must be ${I4}. Received ${B2}`),
                                            Q2
                                        );
                                    },
                                    RangeError
                                );
                            const n = /[^+/0-9A-Za-z-_]/g;
                            function m(A3, I4) {
                                let g3;
                                I4 = I4 || 1 / 0;
                                const Q2 = A3.length;
                                let B2 = null;
                                const C2 = [];
                                for (let E2 = 0; E2 < Q2; ++E2) {
                                    if (((g3 = A3.charCodeAt(E2)), g3 > 55295 && g3 < 57344)) {
                                        if (!B2) {
                                            if (g3 > 56319) {
                                                (I4 -= 3) > -1 && C2.push(239, 191, 189);
                                                continue;
                                            }
                                            if (E2 + 1 === Q2) {
                                                (I4 -= 3) > -1 && C2.push(239, 191, 189);
                                                continue;
                                            }
                                            B2 = g3;
                                            continue;
                                        }
                                        if (g3 < 56320) {
                                            (I4 -= 3) > -1 && C2.push(239, 191, 189), (B2 = g3);
                                            continue;
                                        }
                                        g3 = 65536 + (((B2 - 55296) << 10) | (g3 - 56320));
                                    } else B2 && (I4 -= 3) > -1 && C2.push(239, 191, 189);
                                    if (((B2 = null), g3 < 128)) {
                                        if ((I4 -= 1) < 0) break;
                                        C2.push(g3);
                                    } else if (g3 < 2048) {
                                        if ((I4 -= 2) < 0) break;
                                        C2.push((g3 >> 6) | 192, (63 & g3) | 128);
                                    } else if (g3 < 65536) {
                                        if ((I4 -= 3) < 0) break;
                                        C2.push((g3 >> 12) | 224, ((g3 >> 6) & 63) | 128, (63 & g3) | 128);
                                    } else {
                                        if (!(g3 < 1114112)) throw new Error('Invalid code point');
                                        if ((I4 -= 4) < 0) break;
                                        C2.push(
                                            (g3 >> 18) | 240,
                                            ((g3 >> 12) & 63) | 128,
                                            ((g3 >> 6) & 63) | 128,
                                            (63 & g3) | 128
                                        );
                                    }
                                }
                                return C2;
                            }
                            function b(A3) {
                                return Q.toByteArray(
                                    (function (A4) {
                                        if ((A4 = (A4 = A4.split('=')[0]).trim().replace(n, '')).length < 2) return '';
                                        for (; A4.length % 4 != 0; ) A4 += '=';
                                        return A4;
                                    })(A3)
                                );
                            }
                            function e(A3, I4, g3, Q2) {
                                let B2;
                                for (B2 = 0; B2 < Q2 && !(B2 + g3 >= I4.length || B2 >= A3.length); ++B2)
                                    I4[B2 + g3] = A3[B2];
                                return B2;
                            }
                            function v(A3, I4) {
                                return (
                                    A3 instanceof I4 ||
                                    (null != A3 &&
                                        null != A3.constructor &&
                                        null != A3.constructor.name &&
                                        A3.constructor.name === I4.name)
                                );
                            }
                            function u(A3) {
                                return A3 != A3;
                            }
                            const X = (function () {
                                const A3 = '0123456789abcdef',
                                    I4 = new Array(256);
                                for (let g3 = 0; g3 < 16; ++g3) {
                                    const Q2 = 16 * g3;
                                    for (let B2 = 0; B2 < 16; ++B2) I4[Q2 + B2] = A3[g3] + A3[B2];
                                }
                                return I4;
                            })();
                            function _(A3) {
                                return 'undefined' == typeof BigInt ? $ : A3;
                            }
                            function $() {
                                throw new Error('BigInt not supported');
                            }
                        },
                        333: (A2, I3) => {
                            (I3.read = function (A3, I4, g2, Q, B) {
                                var C,
                                    E,
                                    D = 8 * B - Q - 1,
                                    i = (1 << D) - 1,
                                    w = i >> 1,
                                    o = -7,
                                    G2 = g2 ? B - 1 : 0,
                                    M = g2 ? -1 : 1,
                                    N2 = A3[I4 + G2];
                                for (
                                    G2 += M, C = N2 & ((1 << -o) - 1), N2 >>= -o, o += D;
                                    o > 0;
                                    C = 256 * C + A3[I4 + G2], G2 += M, o -= 8
                                );
                                for (
                                    E = C & ((1 << -o) - 1), C >>= -o, o += Q;
                                    o > 0;
                                    E = 256 * E + A3[I4 + G2], G2 += M, o -= 8
                                );
                                if (0 === C) C = 1 - w;
                                else {
                                    if (C === i) return E ? NaN : (1 / 0) * (N2 ? -1 : 1);
                                    (E += Math.pow(2, Q)), (C -= w);
                                }
                                return (N2 ? -1 : 1) * E * Math.pow(2, C - Q);
                            }),
                                (I3.write = function (A3, I4, g2, Q, B, C) {
                                    var E,
                                        D,
                                        i,
                                        w = 8 * C - B - 1,
                                        o = (1 << w) - 1,
                                        G2 = o >> 1,
                                        M = 23 === B ? Math.pow(2, -24) - Math.pow(2, -77) : 0,
                                        N2 = Q ? 0 : C - 1,
                                        k = Q ? 1 : -1,
                                        F = I4 < 0 || (0 === I4 && 1 / I4 < 0) ? 1 : 0;
                                    for (
                                        I4 = Math.abs(I4),
                                            isNaN(I4) || I4 === 1 / 0
                                                ? ((D = isNaN(I4) ? 1 : 0), (E = o))
                                                : ((E = Math.floor(Math.log(I4) / Math.LN2)),
                                                  I4 * (i = Math.pow(2, -E)) < 1 && (E--, (i *= 2)),
                                                  (I4 += E + G2 >= 1 ? M / i : M * Math.pow(2, 1 - G2)) * i >= 2 &&
                                                      (E++, (i /= 2)),
                                                  E + G2 >= o
                                                      ? ((D = 0), (E = o))
                                                      : E + G2 >= 1
                                                        ? ((D = (I4 * i - 1) * Math.pow(2, B)), (E += G2))
                                                        : ((D = I4 * Math.pow(2, G2 - 1) * Math.pow(2, B)), (E = 0)));
                                        B >= 8;
                                        A3[g2 + N2] = 255 & D, N2 += k, D /= 256, B -= 8
                                    );
                                    for (
                                        E = (E << B) | D, w += B;
                                        w > 0;
                                        A3[g2 + N2] = 255 & E, N2 += k, E /= 256, w -= 8
                                    );
                                    A3[g2 + N2 - k] |= 128 * F;
                                });
                        },
                        249: function (A2, I3, g2) {
                            'use strict';
                            var Q =
                                    (this && this.__createBinding) ||
                                    (Object.create
                                        ? function (A3, I4, g3, Q2) {
                                              void 0 === Q2 && (Q2 = g3);
                                              var B2 = Object.getOwnPropertyDescriptor(I4, g3);
                                              (B2 &&
                                                  !('get' in B2 ? !I4.__esModule : B2.writable || B2.configurable)) ||
                                                  (B2 = {
                                                      enumerable: true,
                                                      get: function () {
                                                          return I4[g3];
                                                      },
                                                  }),
                                                  Object.defineProperty(A3, Q2, B2);
                                          }
                                        : function (A3, I4, g3, Q2) {
                                              void 0 === Q2 && (Q2 = g3), (A3[Q2] = I4[g3]);
                                          }),
                                B =
                                    (this && this.__exportStar) ||
                                    function (A3, I4) {
                                        for (var g3 in A3)
                                            'default' === g3 ||
                                                Object.prototype.hasOwnProperty.call(I4, g3) ||
                                                Q(I4, A3, g3);
                                    },
                                C =
                                    (this && this.__importDefault) ||
                                    function (A3) {
                                        return A3 && A3.__esModule ? A3 : { default: A3 };
                                    };
                            Object.defineProperty(I3, '__esModule', { value: true });
                            const E = g2(834),
                                D = g2(861),
                                i = C(g2(29)),
                                w = E.Buffer.from(i.default, 'base64');
                            (0, D.initSync)(w), B(g2(861), I3);
                        },
                        861: (A2, I3, g2) => {
                            'use strict';
                            let Q;
                            g2.r(I3),
                                g2.d(I3, {
                                    createCredentialV1: () => q,
                                    createIdProof: () => O,
                                    createIdRequestV1: () => s,
                                    createIdentityRecoveryRequest: () => H,
                                    createUnsignedCredentialV1: () => p,
                                    createWeb3IdProof: () => m,
                                    default: () => $,
                                    deserializeCredentialDeployment: () => d,
                                    generateBakerKeys: () => n,
                                    generateUnsignedCredential: () => c,
                                    getAccountPublicKey: () => W2,
                                    getAccountSigningKey: () => t,
                                    getAttributeCommitmentRandomness: () => V,
                                    getCredentialId: () => Z,
                                    getDeploymentDetails: () => S,
                                    getDeploymentInfo: () => L,
                                    getIdCredSec: () => r,
                                    getPrfKey: () => x,
                                    getSignatureBlindingRandomness: () => j,
                                    getVerifiableCredentialBackupEncryptionKey: () => T,
                                    getVerifiableCredentialPublicKey: () => l,
                                    getVerifiableCredentialSigningKey: () => f,
                                    initSync: () => X,
                                    serializeCredentialDeploymentPayload: () => z,
                                    verifyWeb3IdCredentialSignature: () => b,
                                }),
                                (A2 = g2.hmd(A2));
                            const B = new Array(128).fill(void 0);
                            function C(A3) {
                                return B[A3];
                            }
                            B.push(void 0, null, true, false);
                            let E = 0,
                                D = null;
                            function i() {
                                return (null !== D && 0 !== D.byteLength) || (D = new Uint8Array(Q.memory.buffer)), D;
                            }
                            const w =
                                    'undefined' != typeof TextEncoder
                                        ? new TextEncoder('utf-8')
                                        : {
                                              encode: () => {
                                                  throw Error('TextEncoder not available');
                                              },
                                          },
                                o =
                                    'function' == typeof w.encodeInto
                                        ? function (A3, I4) {
                                              return w.encodeInto(A3, I4);
                                          }
                                        : function (A3, I4) {
                                              const g3 = w.encode(A3);
                                              return I4.set(g3), { read: A3.length, written: g3.length };
                                          };
                            function G2(A3, I4, g3) {
                                if (void 0 === g3) {
                                    const g4 = w.encode(A3),
                                        Q3 = I4(g4.length, 1) >>> 0;
                                    return (
                                        i()
                                            .subarray(Q3, Q3 + g4.length)
                                            .set(g4),
                                        (E = g4.length),
                                        Q3
                                    );
                                }
                                let Q2 = A3.length,
                                    B2 = I4(Q2, 1) >>> 0;
                                const C2 = i();
                                let D2 = 0;
                                for (; D2 < Q2; D2++) {
                                    const I5 = A3.charCodeAt(D2);
                                    if (I5 > 127) break;
                                    C2[B2 + D2] = I5;
                                }
                                if (D2 !== Q2) {
                                    0 !== D2 && (A3 = A3.slice(D2)),
                                        (B2 = g3(B2, Q2, (Q2 = D2 + 3 * A3.length), 1) >>> 0);
                                    const I5 = i().subarray(B2 + D2, B2 + Q2);
                                    D2 += o(A3, I5).written;
                                }
                                return (E = D2), B2;
                            }
                            function M(A3) {
                                return null == A3;
                            }
                            let N2 = null;
                            function k() {
                                return (
                                    (null !== N2 && 0 !== N2.byteLength) || (N2 = new Int32Array(Q.memory.buffer)), N2
                                );
                            }
                            let F = B.length;
                            function a(A3) {
                                const I4 = C(A3);
                                return (
                                    (function (A4) {
                                        A4 < 132 || ((B[A4] = F), (F = A4));
                                    })(A3),
                                    I4
                                );
                            }
                            const K =
                                'undefined' != typeof TextDecoder
                                    ? new TextDecoder('utf-8', { ignoreBOM: true, fatal: true })
                                    : {
                                          decode: () => {
                                              throw Error('TextDecoder not available');
                                          },
                                      };
                            function y(A3, I4) {
                                return (A3 >>>= 0), K.decode(i().subarray(A3, A3 + I4));
                            }
                            function U(A3) {
                                F === B.length && B.push(B.length + 1);
                                const I4 = F;
                                return (F = B[I4]), (B[I4] = A3), I4;
                            }
                            'undefined' != typeof TextDecoder && K.decode();
                            let h = null;
                            function Y(A3) {
                                const I4 = typeof A3;
                                if ('number' == I4 || 'boolean' == I4 || null == A3) return `${A3}`;
                                if ('string' == I4) return `"${A3}"`;
                                if ('symbol' == I4) {
                                    const I5 = A3.description;
                                    return null == I5 ? 'Symbol' : `Symbol(${I5})`;
                                }
                                if ('function' == I4) {
                                    const I5 = A3.name;
                                    return 'string' == typeof I5 && I5.length > 0 ? `Function(${I5})` : 'Function';
                                }
                                if (Array.isArray(A3)) {
                                    const I5 = A3.length;
                                    let g4 = '[';
                                    I5 > 0 && (g4 += Y(A3[0]));
                                    for (let Q3 = 1; Q3 < I5; Q3++) g4 += ', ' + Y(A3[Q3]);
                                    return (g4 += ']'), g4;
                                }
                                const g3 = /\[object ([^\]]+)\]/.exec(toString.call(A3));
                                let Q2;
                                if (!(g3.length > 1)) return toString.call(A3);
                                if (((Q2 = g3[1]), 'Object' == Q2))
                                    try {
                                        return 'Object(' + JSON.stringify(A3) + ')';
                                    } catch (A4) {
                                        return 'Object';
                                    }
                                return A3 instanceof Error
                                    ? `${A3.name}: ${A3.message}
${A3.stack}`
                                    : Q2;
                            }
                            function c(A3) {
                                let I4, g3;
                                try {
                                    const M2 = Q.__wbindgen_add_to_stack_pointer(-16),
                                        N3 = G2(A3, Q.__wbindgen_malloc, Q.__wbindgen_realloc),
                                        F2 = E;
                                    Q.generateUnsignedCredential(M2, N3, F2);
                                    var B2 = k()[M2 / 4 + 0],
                                        C2 = k()[M2 / 4 + 1],
                                        D2 = k()[M2 / 4 + 2],
                                        i2 = k()[M2 / 4 + 3],
                                        w2 = B2,
                                        o2 = C2;
                                    if (i2) throw ((w2 = 0), (o2 = 0), a(D2));
                                    return (I4 = w2), (g3 = o2), y(w2, o2);
                                } finally {
                                    Q.__wbindgen_add_to_stack_pointer(16), Q.__wbindgen_free(I4, g3, 1);
                                }
                            }
                            let J = 128;
                            function R(A3) {
                                if (1 == J) throw new Error('out of js stack');
                                return (B[--J] = A3), J;
                            }
                            function S(A3, I4, g3) {
                                let C2, D2;
                                try {
                                    const B2 = Q.__wbindgen_add_to_stack_pointer(-16),
                                        K2 = G2(I4, Q.__wbindgen_malloc, Q.__wbindgen_realloc),
                                        U2 = E;
                                    Q.getDeploymentDetails(B2, R(A3), K2, U2, g3);
                                    var i2 = k()[B2 / 4 + 0],
                                        w2 = k()[B2 / 4 + 1],
                                        o2 = k()[B2 / 4 + 2],
                                        M2 = k()[B2 / 4 + 3],
                                        N3 = i2,
                                        F2 = w2;
                                    if (M2) throw ((N3 = 0), (F2 = 0), a(o2));
                                    return (C2 = N3), (D2 = F2), y(N3, F2);
                                } finally {
                                    Q.__wbindgen_add_to_stack_pointer(16),
                                        (B[J++] = void 0),
                                        Q.__wbindgen_free(C2, D2, 1);
                                }
                            }
                            function L(A3, I4) {
                                let g3, C2;
                                try {
                                    const B2 = Q.__wbindgen_add_to_stack_pointer(-16),
                                        F2 = G2(I4, Q.__wbindgen_malloc, Q.__wbindgen_realloc),
                                        K2 = E;
                                    Q.getDeploymentInfo(B2, R(A3), F2, K2);
                                    var D2 = k()[B2 / 4 + 0],
                                        i2 = k()[B2 / 4 + 1],
                                        w2 = k()[B2 / 4 + 2],
                                        o2 = k()[B2 / 4 + 3],
                                        M2 = D2,
                                        N3 = i2;
                                    if (o2) throw ((M2 = 0), (N3 = 0), a(w2));
                                    return (g3 = M2), (C2 = N3), y(M2, N3);
                                } finally {
                                    Q.__wbindgen_add_to_stack_pointer(16),
                                        (B[J++] = void 0),
                                        Q.__wbindgen_free(g3, C2, 1);
                                }
                            }
                            function s(A3) {
                                let I4, g3;
                                try {
                                    const M2 = Q.__wbindgen_add_to_stack_pointer(-16),
                                        N3 = G2(A3, Q.__wbindgen_malloc, Q.__wbindgen_realloc),
                                        F2 = E;
                                    Q.createIdRequestV1(M2, N3, F2);
                                    var B2 = k()[M2 / 4 + 0],
                                        C2 = k()[M2 / 4 + 1],
                                        D2 = k()[M2 / 4 + 2],
                                        i2 = k()[M2 / 4 + 3],
                                        w2 = B2,
                                        o2 = C2;
                                    if (i2) throw ((w2 = 0), (o2 = 0), a(D2));
                                    return (I4 = w2), (g3 = o2), y(w2, o2);
                                } finally {
                                    Q.__wbindgen_add_to_stack_pointer(16), Q.__wbindgen_free(I4, g3, 1);
                                }
                            }
                            function H(A3) {
                                let I4, g3;
                                try {
                                    const M2 = Q.__wbindgen_add_to_stack_pointer(-16),
                                        N3 = G2(A3, Q.__wbindgen_malloc, Q.__wbindgen_realloc),
                                        F2 = E;
                                    Q.createIdentityRecoveryRequest(M2, N3, F2);
                                    var B2 = k()[M2 / 4 + 0],
                                        C2 = k()[M2 / 4 + 1],
                                        D2 = k()[M2 / 4 + 2],
                                        i2 = k()[M2 / 4 + 3],
                                        w2 = B2,
                                        o2 = C2;
                                    if (i2) throw ((w2 = 0), (o2 = 0), a(D2));
                                    return (I4 = w2), (g3 = o2), y(w2, o2);
                                } finally {
                                    Q.__wbindgen_add_to_stack_pointer(16), Q.__wbindgen_free(I4, g3, 1);
                                }
                            }
                            function q(A3) {
                                let I4, g3;
                                try {
                                    const M2 = Q.__wbindgen_add_to_stack_pointer(-16),
                                        N3 = G2(A3, Q.__wbindgen_malloc, Q.__wbindgen_realloc),
                                        F2 = E;
                                    Q.createCredentialV1(M2, N3, F2);
                                    var B2 = k()[M2 / 4 + 0],
                                        C2 = k()[M2 / 4 + 1],
                                        D2 = k()[M2 / 4 + 2],
                                        i2 = k()[M2 / 4 + 3],
                                        w2 = B2,
                                        o2 = C2;
                                    if (i2) throw ((w2 = 0), (o2 = 0), a(D2));
                                    return (I4 = w2), (g3 = o2), y(w2, o2);
                                } finally {
                                    Q.__wbindgen_add_to_stack_pointer(16), Q.__wbindgen_free(I4, g3, 1);
                                }
                            }
                            function p(A3) {
                                let I4, g3;
                                try {
                                    const M2 = Q.__wbindgen_add_to_stack_pointer(-16),
                                        N3 = G2(A3, Q.__wbindgen_malloc, Q.__wbindgen_realloc),
                                        F2 = E;
                                    Q.createUnsignedCredentialV1(M2, N3, F2);
                                    var B2 = k()[M2 / 4 + 0],
                                        C2 = k()[M2 / 4 + 1],
                                        D2 = k()[M2 / 4 + 2],
                                        i2 = k()[M2 / 4 + 3],
                                        w2 = B2,
                                        o2 = C2;
                                    if (i2) throw ((w2 = 0), (o2 = 0), a(D2));
                                    return (I4 = w2), (g3 = o2), y(w2, o2);
                                } finally {
                                    Q.__wbindgen_add_to_stack_pointer(16), Q.__wbindgen_free(I4, g3, 1);
                                }
                            }
                            function O(A3) {
                                let I4, g3;
                                try {
                                    const M2 = Q.__wbindgen_add_to_stack_pointer(-16),
                                        N3 = G2(A3, Q.__wbindgen_malloc, Q.__wbindgen_realloc),
                                        F2 = E;
                                    Q.createIdProof(M2, N3, F2);
                                    var B2 = k()[M2 / 4 + 0],
                                        C2 = k()[M2 / 4 + 1],
                                        D2 = k()[M2 / 4 + 2],
                                        i2 = k()[M2 / 4 + 3],
                                        w2 = B2,
                                        o2 = C2;
                                    if (i2) throw ((w2 = 0), (o2 = 0), a(D2));
                                    return (I4 = w2), (g3 = o2), y(w2, o2);
                                } finally {
                                    Q.__wbindgen_add_to_stack_pointer(16), Q.__wbindgen_free(I4, g3, 1);
                                }
                            }
                            function t(A3, I4, g3, B2, C2) {
                                let D2, i2;
                                try {
                                    const U2 = Q.__wbindgen_add_to_stack_pointer(-16),
                                        h2 = G2(A3, Q.__wbindgen_malloc, Q.__wbindgen_realloc),
                                        Y2 = E,
                                        c2 = G2(I4, Q.__wbindgen_malloc, Q.__wbindgen_realloc),
                                        J2 = E;
                                    Q.getAccountSigningKey(U2, h2, Y2, c2, J2, g3, B2, C2);
                                    var w2 = k()[U2 / 4 + 0],
                                        o2 = k()[U2 / 4 + 1],
                                        M2 = k()[U2 / 4 + 2],
                                        N3 = k()[U2 / 4 + 3],
                                        F2 = w2,
                                        K2 = o2;
                                    if (N3) throw ((F2 = 0), (K2 = 0), a(M2));
                                    return (D2 = F2), (i2 = K2), y(F2, K2);
                                } finally {
                                    Q.__wbindgen_add_to_stack_pointer(16), Q.__wbindgen_free(D2, i2, 1);
                                }
                            }
                            function W2(A3, I4, g3, B2, C2) {
                                let D2, i2;
                                try {
                                    const U2 = Q.__wbindgen_add_to_stack_pointer(-16),
                                        h2 = G2(A3, Q.__wbindgen_malloc, Q.__wbindgen_realloc),
                                        Y2 = E,
                                        c2 = G2(I4, Q.__wbindgen_malloc, Q.__wbindgen_realloc),
                                        J2 = E;
                                    Q.getAccountPublicKey(U2, h2, Y2, c2, J2, g3, B2, C2);
                                    var w2 = k()[U2 / 4 + 0],
                                        o2 = k()[U2 / 4 + 1],
                                        M2 = k()[U2 / 4 + 2],
                                        N3 = k()[U2 / 4 + 3],
                                        F2 = w2,
                                        K2 = o2;
                                    if (N3) throw ((F2 = 0), (K2 = 0), a(M2));
                                    return (D2 = F2), (i2 = K2), y(F2, K2);
                                } finally {
                                    Q.__wbindgen_add_to_stack_pointer(16), Q.__wbindgen_free(D2, i2, 1);
                                }
                            }
                            function d(A3) {
                                let I4, g3;
                                try {
                                    const M2 = Q.__wbindgen_add_to_stack_pointer(-16),
                                        N3 = G2(A3, Q.__wbindgen_malloc, Q.__wbindgen_realloc),
                                        F2 = E;
                                    Q.deserializeCredentialDeployment(M2, N3, F2);
                                    var B2 = k()[M2 / 4 + 0],
                                        C2 = k()[M2 / 4 + 1],
                                        D2 = k()[M2 / 4 + 2],
                                        i2 = k()[M2 / 4 + 3],
                                        w2 = B2,
                                        o2 = C2;
                                    if (i2) throw ((w2 = 0), (o2 = 0), a(D2));
                                    return (I4 = w2), (g3 = o2), y(w2, o2);
                                } finally {
                                    Q.__wbindgen_add_to_stack_pointer(16), Q.__wbindgen_free(I4, g3, 1);
                                }
                            }
                            function Z(A3, I4, g3, B2, C2, D2) {
                                let i2, w2;
                                try {
                                    const h2 = Q.__wbindgen_add_to_stack_pointer(-16),
                                        Y2 = G2(A3, Q.__wbindgen_malloc, Q.__wbindgen_realloc),
                                        c2 = E,
                                        J2 = G2(I4, Q.__wbindgen_malloc, Q.__wbindgen_realloc),
                                        R2 = E,
                                        S2 = G2(D2, Q.__wbindgen_malloc, Q.__wbindgen_realloc),
                                        L2 = E;
                                    Q.getCredentialId(h2, Y2, c2, J2, R2, g3, B2, C2, S2, L2);
                                    var o2 = k()[h2 / 4 + 0],
                                        M2 = k()[h2 / 4 + 1],
                                        N3 = k()[h2 / 4 + 2],
                                        F2 = k()[h2 / 4 + 3],
                                        K2 = o2,
                                        U2 = M2;
                                    if (F2) throw ((K2 = 0), (U2 = 0), a(N3));
                                    return (i2 = K2), (w2 = U2), y(K2, U2);
                                } finally {
                                    Q.__wbindgen_add_to_stack_pointer(16), Q.__wbindgen_free(i2, w2, 1);
                                }
                            }
                            function x(A3, I4, g3, B2) {
                                let C2, D2;
                                try {
                                    const K2 = Q.__wbindgen_add_to_stack_pointer(-16),
                                        U2 = G2(A3, Q.__wbindgen_malloc, Q.__wbindgen_realloc),
                                        h2 = E,
                                        Y2 = G2(I4, Q.__wbindgen_malloc, Q.__wbindgen_realloc),
                                        c2 = E;
                                    Q.getPrfKey(K2, U2, h2, Y2, c2, g3, B2);
                                    var i2 = k()[K2 / 4 + 0],
                                        w2 = k()[K2 / 4 + 1],
                                        o2 = k()[K2 / 4 + 2],
                                        M2 = k()[K2 / 4 + 3],
                                        N3 = i2,
                                        F2 = w2;
                                    if (M2) throw ((N3 = 0), (F2 = 0), a(o2));
                                    return (C2 = N3), (D2 = F2), y(N3, F2);
                                } finally {
                                    Q.__wbindgen_add_to_stack_pointer(16), Q.__wbindgen_free(C2, D2, 1);
                                }
                            }
                            function r(A3, I4, g3, B2) {
                                let C2, D2;
                                try {
                                    const K2 = Q.__wbindgen_add_to_stack_pointer(-16),
                                        U2 = G2(A3, Q.__wbindgen_malloc, Q.__wbindgen_realloc),
                                        h2 = E,
                                        Y2 = G2(I4, Q.__wbindgen_malloc, Q.__wbindgen_realloc),
                                        c2 = E;
                                    Q.getIdCredSec(K2, U2, h2, Y2, c2, g3, B2);
                                    var i2 = k()[K2 / 4 + 0],
                                        w2 = k()[K2 / 4 + 1],
                                        o2 = k()[K2 / 4 + 2],
                                        M2 = k()[K2 / 4 + 3],
                                        N3 = i2,
                                        F2 = w2;
                                    if (M2) throw ((N3 = 0), (F2 = 0), a(o2));
                                    return (C2 = N3), (D2 = F2), y(N3, F2);
                                } finally {
                                    Q.__wbindgen_add_to_stack_pointer(16), Q.__wbindgen_free(C2, D2, 1);
                                }
                            }
                            function j(A3, I4, g3, B2) {
                                let C2, D2;
                                try {
                                    const K2 = Q.__wbindgen_add_to_stack_pointer(-16),
                                        U2 = G2(A3, Q.__wbindgen_malloc, Q.__wbindgen_realloc),
                                        h2 = E,
                                        Y2 = G2(I4, Q.__wbindgen_malloc, Q.__wbindgen_realloc),
                                        c2 = E;
                                    Q.getSignatureBlindingRandomness(K2, U2, h2, Y2, c2, g3, B2);
                                    var i2 = k()[K2 / 4 + 0],
                                        w2 = k()[K2 / 4 + 1],
                                        o2 = k()[K2 / 4 + 2],
                                        M2 = k()[K2 / 4 + 3],
                                        N3 = i2,
                                        F2 = w2;
                                    if (M2) throw ((N3 = 0), (F2 = 0), a(o2));
                                    return (C2 = N3), (D2 = F2), y(N3, F2);
                                } finally {
                                    Q.__wbindgen_add_to_stack_pointer(16), Q.__wbindgen_free(C2, D2, 1);
                                }
                            }
                            function V(A3, I4, g3, B2, C2, D2) {
                                let i2, w2;
                                try {
                                    const h2 = Q.__wbindgen_add_to_stack_pointer(-16),
                                        Y2 = G2(A3, Q.__wbindgen_malloc, Q.__wbindgen_realloc),
                                        c2 = E,
                                        J2 = G2(I4, Q.__wbindgen_malloc, Q.__wbindgen_realloc),
                                        R2 = E;
                                    Q.getAttributeCommitmentRandomness(h2, Y2, c2, J2, R2, g3, B2, C2, D2);
                                    var o2 = k()[h2 / 4 + 0],
                                        M2 = k()[h2 / 4 + 1],
                                        N3 = k()[h2 / 4 + 2],
                                        F2 = k()[h2 / 4 + 3],
                                        K2 = o2,
                                        U2 = M2;
                                    if (F2) throw ((K2 = 0), (U2 = 0), a(N3));
                                    return (i2 = K2), (w2 = U2), y(K2, U2);
                                } finally {
                                    Q.__wbindgen_add_to_stack_pointer(16), Q.__wbindgen_free(i2, w2, 1);
                                }
                            }
                            function f(A3, I4, g3, B2, C2) {
                                let D2, i2;
                                try {
                                    const U2 = Q.__wbindgen_add_to_stack_pointer(-16),
                                        h2 = G2(A3, Q.__wbindgen_malloc, Q.__wbindgen_realloc),
                                        Y2 = E,
                                        c2 = G2(I4, Q.__wbindgen_malloc, Q.__wbindgen_realloc),
                                        J2 = E;
                                    Q.getVerifiableCredentialSigningKey(U2, h2, Y2, c2, J2, g3, B2, C2);
                                    var w2 = k()[U2 / 4 + 0],
                                        o2 = k()[U2 / 4 + 1],
                                        M2 = k()[U2 / 4 + 2],
                                        N3 = k()[U2 / 4 + 3],
                                        F2 = w2,
                                        K2 = o2;
                                    if (N3) throw ((F2 = 0), (K2 = 0), a(M2));
                                    return (D2 = F2), (i2 = K2), y(F2, K2);
                                } finally {
                                    Q.__wbindgen_add_to_stack_pointer(16), Q.__wbindgen_free(D2, i2, 1);
                                }
                            }
                            function l(A3, I4, g3, B2, C2) {
                                let D2, i2;
                                try {
                                    const U2 = Q.__wbindgen_add_to_stack_pointer(-16),
                                        h2 = G2(A3, Q.__wbindgen_malloc, Q.__wbindgen_realloc),
                                        Y2 = E,
                                        c2 = G2(I4, Q.__wbindgen_malloc, Q.__wbindgen_realloc),
                                        J2 = E;
                                    Q.getVerifiableCredentialPublicKey(U2, h2, Y2, c2, J2, g3, B2, C2);
                                    var w2 = k()[U2 / 4 + 0],
                                        o2 = k()[U2 / 4 + 1],
                                        M2 = k()[U2 / 4 + 2],
                                        N3 = k()[U2 / 4 + 3],
                                        F2 = w2,
                                        K2 = o2;
                                    if (N3) throw ((F2 = 0), (K2 = 0), a(M2));
                                    return (D2 = F2), (i2 = K2), y(F2, K2);
                                } finally {
                                    Q.__wbindgen_add_to_stack_pointer(16), Q.__wbindgen_free(D2, i2, 1);
                                }
                            }
                            function T(A3, I4) {
                                let g3, B2;
                                try {
                                    const N3 = Q.__wbindgen_add_to_stack_pointer(-16),
                                        F2 = G2(A3, Q.__wbindgen_malloc, Q.__wbindgen_realloc),
                                        K2 = E,
                                        U2 = G2(I4, Q.__wbindgen_malloc, Q.__wbindgen_realloc),
                                        h2 = E;
                                    Q.getVerifiableCredentialBackupEncryptionKey(N3, F2, K2, U2, h2);
                                    var C2 = k()[N3 / 4 + 0],
                                        D2 = k()[N3 / 4 + 1],
                                        i2 = k()[N3 / 4 + 2],
                                        w2 = k()[N3 / 4 + 3],
                                        o2 = C2,
                                        M2 = D2;
                                    if (w2) throw ((o2 = 0), (M2 = 0), a(i2));
                                    return (g3 = o2), (B2 = M2), y(o2, M2);
                                } finally {
                                    Q.__wbindgen_add_to_stack_pointer(16), Q.__wbindgen_free(g3, B2, 1);
                                }
                            }
                            function P3(A3, I4) {
                                return (A3 >>>= 0), i().subarray(A3 / 1, A3 / 1 + I4);
                            }
                            function z(A3, I4) {
                                try {
                                    const B2 = Q.__wbindgen_add_to_stack_pointer(-16),
                                        w2 = G2(I4, Q.__wbindgen_malloc, Q.__wbindgen_realloc),
                                        o2 = E;
                                    Q.serializeCredentialDeploymentPayload(B2, R(A3), w2, o2);
                                    var g3 = k()[B2 / 4 + 0],
                                        C2 = k()[B2 / 4 + 1],
                                        D2 = k()[B2 / 4 + 2];
                                    if (k()[B2 / 4 + 3]) throw a(D2);
                                    var i2 = P3(g3, C2).slice();
                                    return Q.__wbindgen_free(g3, 1 * C2), i2;
                                } finally {
                                    Q.__wbindgen_add_to_stack_pointer(16), (B[J++] = void 0);
                                }
                            }
                            function n(A3) {
                                let I4, g3;
                                try {
                                    const M2 = Q.__wbindgen_add_to_stack_pointer(-16),
                                        N3 = G2(A3, Q.__wbindgen_malloc, Q.__wbindgen_realloc),
                                        F2 = E;
                                    Q.generateBakerKeys(M2, N3, F2);
                                    var B2 = k()[M2 / 4 + 0],
                                        C2 = k()[M2 / 4 + 1],
                                        D2 = k()[M2 / 4 + 2],
                                        i2 = k()[M2 / 4 + 3],
                                        w2 = B2,
                                        o2 = C2;
                                    if (i2) throw ((w2 = 0), (o2 = 0), a(D2));
                                    return (I4 = w2), (g3 = o2), y(w2, o2);
                                } finally {
                                    Q.__wbindgen_add_to_stack_pointer(16), Q.__wbindgen_free(I4, g3, 1);
                                }
                            }
                            function m(A3) {
                                let I4, g3;
                                try {
                                    const M2 = Q.__wbindgen_add_to_stack_pointer(-16),
                                        N3 = G2(A3, Q.__wbindgen_malloc, Q.__wbindgen_realloc),
                                        F2 = E;
                                    Q.createWeb3IdProof(M2, N3, F2);
                                    var B2 = k()[M2 / 4 + 0],
                                        C2 = k()[M2 / 4 + 1],
                                        D2 = k()[M2 / 4 + 2],
                                        i2 = k()[M2 / 4 + 3],
                                        w2 = B2,
                                        o2 = C2;
                                    if (i2) throw ((w2 = 0), (o2 = 0), a(D2));
                                    return (I4 = w2), (g3 = o2), y(w2, o2);
                                } finally {
                                    Q.__wbindgen_add_to_stack_pointer(16), Q.__wbindgen_free(I4, g3, 1);
                                }
                            }
                            function b(A3) {
                                try {
                                    const B2 = Q.__wbindgen_add_to_stack_pointer(-16),
                                        C2 = G2(A3, Q.__wbindgen_malloc, Q.__wbindgen_realloc),
                                        D2 = E;
                                    Q.verifyWeb3IdCredentialSignature(B2, C2, D2);
                                    var I4 = k()[B2 / 4 + 0],
                                        g3 = k()[B2 / 4 + 1];
                                    if (k()[B2 / 4 + 2]) throw a(g3);
                                    return 0 !== I4;
                                } finally {
                                    Q.__wbindgen_add_to_stack_pointer(16);
                                }
                            }
                            function e(A3, I4) {
                                try {
                                    return A3.apply(this, I4);
                                } catch (A4) {
                                    Q.__wbindgen_exn_store(U(A4));
                                }
                            }
                            function v() {
                                const I4 = { wbg: {} };
                                return (
                                    (I4.wbg.__wbindgen_string_get = function (A3, I5) {
                                        const g3 = C(I5),
                                            B2 = 'string' == typeof g3 ? g3 : void 0;
                                        var D2 = M(B2) ? 0 : G2(B2, Q.__wbindgen_malloc, Q.__wbindgen_realloc),
                                            i2 = E;
                                        (k()[A3 / 4 + 1] = i2), (k()[A3 / 4 + 0] = D2);
                                    }),
                                    (I4.wbg.__wbindgen_object_drop_ref = function (A3) {
                                        a(A3);
                                    }),
                                    (I4.wbg.__wbindgen_error_new = function (A3, I5) {
                                        return U(new Error(y(A3, I5)));
                                    }),
                                    (I4.wbg.__wbindgen_object_clone_ref = function (A3) {
                                        return U(C(A3));
                                    }),
                                    (I4.wbg.__wbindgen_is_object = function (A3) {
                                        const I5 = C(A3);
                                        return 'object' == typeof I5 && null !== I5;
                                    }),
                                    (I4.wbg.__wbindgen_jsval_loose_eq = function (A3, I5) {
                                        return C(A3) == C(I5);
                                    }),
                                    (I4.wbg.__wbindgen_boolean_get = function (A3) {
                                        const I5 = C(A3);
                                        return 'boolean' == typeof I5 ? (I5 ? 1 : 0) : 2;
                                    }),
                                    (I4.wbg.__wbindgen_number_get = function (A3, I5) {
                                        const g3 = C(I5),
                                            B2 = 'number' == typeof g3 ? g3 : void 0;
                                        (((null !== h && 0 !== h.byteLength) || (h = new Float64Array(Q.memory.buffer)),
                                        h)[A3 / 8 + 1] = M(B2) ? 0 : B2),
                                            (k()[A3 / 4 + 0] = !M(B2));
                                    }),
                                    (I4.wbg.__wbg_self_7eede1f4488bf346 = function () {
                                        return e(function () {
                                            return U(self.self);
                                        }, arguments);
                                    }),
                                    (I4.wbg.__wbg_crypto_c909fb428dcbddb6 = function (A3) {
                                        return U(C(A3).crypto);
                                    }),
                                    (I4.wbg.__wbg_msCrypto_511eefefbfc70ae4 = function (A3) {
                                        return U(C(A3).msCrypto);
                                    }),
                                    (I4.wbg.__wbindgen_is_undefined = function (A3) {
                                        return void 0 === C(A3);
                                    }),
                                    (I4.wbg.__wbg_static_accessor_MODULE_ef3aa2eb251158a5 = function () {
                                        return U(A2);
                                    }),
                                    (I4.wbg.__wbg_require_900d5c3984fe7703 = function (A3, I5, g3) {
                                        return U(C(A3).require(y(I5, g3)));
                                    }),
                                    (I4.wbg.__wbg_getRandomValues_307049345d0bd88c = function (A3) {
                                        return U(C(A3).getRandomValues);
                                    }),
                                    (I4.wbg.__wbg_getRandomValues_cd175915511f705e = function (A3, I5) {
                                        C(A3).getRandomValues(C(I5));
                                    }),
                                    (I4.wbg.__wbg_randomFillSync_85b3f4c52c56c313 = function (A3, I5, g3) {
                                        C(A3).randomFillSync(P3(I5, g3));
                                    }),
                                    (I4.wbg.__wbg_get_44be0491f933a435 = function (A3, I5) {
                                        return U(C(A3)[I5 >>> 0]);
                                    }),
                                    (I4.wbg.__wbg_length_fff51ee6522a1a18 = function (A3) {
                                        return C(A3).length;
                                    }),
                                    (I4.wbg.__wbindgen_is_function = function (A3) {
                                        return 'function' == typeof C(A3);
                                    }),
                                    (I4.wbg.__wbg_next_526fc47e980da008 = function (A3) {
                                        return U(C(A3).next);
                                    }),
                                    (I4.wbg.__wbg_next_ddb3312ca1c4e32a = function () {
                                        return e(function (A3) {
                                            return U(C(A3).next());
                                        }, arguments);
                                    }),
                                    (I4.wbg.__wbg_done_5c1f01fb660d73b5 = function (A3) {
                                        return C(A3).done;
                                    }),
                                    (I4.wbg.__wbg_value_1695675138684bd5 = function (A3) {
                                        return U(C(A3).value);
                                    }),
                                    (I4.wbg.__wbg_iterator_97f0c81209c6c35a = function () {
                                        return U(Symbol.iterator);
                                    }),
                                    (I4.wbg.__wbg_get_97b561fb56f034b5 = function () {
                                        return e(function (A3, I5) {
                                            return U(Reflect.get(C(A3), C(I5)));
                                        }, arguments);
                                    }),
                                    (I4.wbg.__wbg_call_cb65541d95d71282 = function () {
                                        return e(function (A3, I5) {
                                            return U(C(A3).call(C(I5)));
                                        }, arguments);
                                    }),
                                    (I4.wbg.__wbg_isArray_4c24b343cb13cfb1 = function (A3) {
                                        return Array.isArray(C(A3));
                                    }),
                                    (I4.wbg.__wbg_instanceof_ArrayBuffer_39ac22089b74fddb = function (A3) {
                                        let I5;
                                        try {
                                            I5 = C(A3) instanceof ArrayBuffer;
                                        } catch {
                                            I5 = false;
                                        }
                                        return I5;
                                    }),
                                    (I4.wbg.__wbg_getTime_5e2054f832d82ec9 = function (A3) {
                                        return C(A3).getTime();
                                    }),
                                    (I4.wbg.__wbg_new0_c0be7df4b6bd481f = function () {
                                        return U(/* @__PURE__ */ new Date());
                                    }),
                                    (I4.wbg.__wbg_buffer_085ec1f694018c4f = function (A3) {
                                        return U(C(A3).buffer);
                                    }),
                                    (I4.wbg.__wbg_new_8125e318e6245eed = function (A3) {
                                        return U(new Uint8Array(C(A3)));
                                    }),
                                    (I4.wbg.__wbg_set_5cf90238115182c3 = function (A3, I5, g3) {
                                        C(A3).set(C(I5), g3 >>> 0);
                                    }),
                                    (I4.wbg.__wbg_length_72e2208bbc0efc61 = function (A3) {
                                        return C(A3).length;
                                    }),
                                    (I4.wbg.__wbg_instanceof_Uint8Array_d8d9cb2b8e8ac1d4 = function (A3) {
                                        let I5;
                                        try {
                                            I5 = C(A3) instanceof Uint8Array;
                                        } catch {
                                            I5 = false;
                                        }
                                        return I5;
                                    }),
                                    (I4.wbg.__wbg_newwithlength_e5d69174d6984cd7 = function (A3) {
                                        return U(new Uint8Array(A3 >>> 0));
                                    }),
                                    (I4.wbg.__wbg_subarray_13db269f57aa838d = function (A3, I5, g3) {
                                        return U(C(A3).subarray(I5 >>> 0, g3 >>> 0));
                                    }),
                                    (I4.wbg.__wbindgen_debug_string = function (A3, I5) {
                                        const g3 = G2(Y(C(I5)), Q.__wbindgen_malloc, Q.__wbindgen_realloc),
                                            B2 = E;
                                        (k()[A3 / 4 + 1] = B2), (k()[A3 / 4 + 0] = g3);
                                    }),
                                    (I4.wbg.__wbindgen_throw = function (A3, I5) {
                                        throw new Error(y(A3, I5));
                                    }),
                                    (I4.wbg.__wbindgen_memory = function () {
                                        return U(Q.memory);
                                    }),
                                    I4
                                );
                            }
                            function u(A3, I4) {
                                return (
                                    (Q = A3.exports),
                                    (_.__wbindgen_wasm_module = I4),
                                    (h = null),
                                    (N2 = null),
                                    (D = null),
                                    Q
                                );
                            }
                            function X(A3) {
                                if (void 0 !== Q) return Q;
                                const I4 = v();
                                return (
                                    A3 instanceof WebAssembly.Module || (A3 = new WebAssembly.Module(A3)),
                                    u(new WebAssembly.Instance(A3, I4), A3)
                                );
                            }
                            async function _(A3) {
                                if (void 0 !== Q) return Q;
                                void 0 === A3 && (A3 = new URL(g2(29), g2.b));
                                const I4 = v();
                                ('string' == typeof A3 ||
                                    ('function' == typeof Request && A3 instanceof Request) ||
                                    ('function' == typeof URL && A3 instanceof URL)) &&
                                    (A3 = fetch(A3));
                                const { instance: B2, module: C2 } = await (async function (A4, I5) {
                                    if ('function' == typeof Response && A4 instanceof Response) {
                                        if ('function' == typeof WebAssembly.instantiateStreaming)
                                            try {
                                                return await WebAssembly.instantiateStreaming(A4, I5);
                                            } catch (I6) {
                                                if ('application/wasm' == A4.headers.get('Content-Type')) throw I6;
                                                console.warn(
                                                    '`WebAssembly.instantiateStreaming` failed because your server does not serve wasm with `application/wasm` MIME type. Falling back to `WebAssembly.instantiate` which is slower. Original error:\n',
                                                    I6
                                                );
                                            }
                                        const g3 = await A4.arrayBuffer();
                                        return await WebAssembly.instantiate(g3, I5);
                                    }
                                    {
                                        const g3 = await WebAssembly.instantiate(A4, I5);
                                        return g3 instanceof WebAssembly.Instance ? { instance: g3, module: A4 } : g3;
                                    }
                                })(await A3, I4);
                                return u(B2, C2);
                            }
                            const $ = _;
                        },
                        29: (A2) => {
                            'use strict';
                            A2.exports =
                                '';
                        },
                    },
                    I2 = {};
                function g(Q) {
                    var B = I2[Q];
                    if (void 0 !== B) return B.exports;
                    var C = (I2[Q] = { id: Q, loaded: false, exports: {} });
                    return A[Q].call(C.exports, C, C.exports, g), (C.loaded = true), C.exports;
                }
                return (
                    (g.m = A),
                    (g.d = (A2, I3) => {
                        for (var Q in I3)
                            g.o(I3, Q) && !g.o(A2, Q) && Object.defineProperty(A2, Q, { enumerable: true, get: I3[Q] });
                    }),
                    (g.hmd = (A2) => (
                        (A2 = Object.create(A2)).children || (A2.children = []),
                        Object.defineProperty(A2, 'exports', {
                            enumerable: true,
                            set: () => {
                                throw new Error(
                                    'ES Modules may not assign module.exports or exports.*, Use ESM export syntax, instead: ' +
                                        A2.id
                                );
                            },
                        }),
                        A2
                    )),
                    (g.o = (A2, I3) => Object.prototype.hasOwnProperty.call(A2, I3)),
                    (g.r = (A2) => {
                        'undefined' != typeof Symbol &&
                            Symbol.toStringTag &&
                            Object.defineProperty(A2, Symbol.toStringTag, { value: 'Module' }),
                            Object.defineProperty(A2, '__esModule', { value: true });
                    }),
                    (g.b = document.baseURI || self.location.href),
                    g(249)
                );
            })()
        );
    },
});

// node_modules/iso-3166-1/dist/iso-3166.js
var require_iso_3166 = __commonJS({
    'node_modules/iso-3166-1/dist/iso-3166.js'(exports) {
        'use strict';
        Object.defineProperty(exports, '__esModule', { value: true });
        var countries = [
            {
                country: 'Afghanistan',
                alpha2: 'AF',
                alpha3: 'AFG',
                numeric: '004',
            },
            {
                country: 'Åland Islands',
                alpha2: 'AX',
                alpha3: 'ALA',
                numeric: '248',
            },
            {
                country: 'Albania',
                alpha2: 'AL',
                alpha3: 'ALB',
                numeric: '008',
            },
            {
                country: 'Algeria',
                alpha2: 'DZ',
                alpha3: 'DZA',
                numeric: '012',
            },
            {
                country: 'American Samoa',
                alpha2: 'AS',
                alpha3: 'ASM',
                numeric: '016',
            },
            {
                country: 'Andorra',
                alpha2: 'AD',
                alpha3: 'AND',
                numeric: '020',
            },
            {
                country: 'Angola',
                alpha2: 'AO',
                alpha3: 'AGO',
                numeric: '024',
            },
            {
                country: 'Anguilla',
                alpha2: 'AI',
                alpha3: 'AIA',
                numeric: '660',
            },
            {
                country: 'Antarctica',
                alpha2: 'AQ',
                alpha3: 'ATA',
                numeric: '010',
            },
            {
                country: 'Antigua and Barbuda',
                alpha2: 'AG',
                alpha3: 'ATG',
                numeric: '028',
            },
            {
                country: 'Argentina',
                alpha2: 'AR',
                alpha3: 'ARG',
                numeric: '032',
            },
            {
                country: 'Armenia',
                alpha2: 'AM',
                alpha3: 'ARM',
                numeric: '051',
            },
            {
                country: 'Aruba',
                alpha2: 'AW',
                alpha3: 'ABW',
                numeric: '533',
            },
            {
                country: 'Australia',
                alpha2: 'AU',
                alpha3: 'AUS',
                numeric: '036',
            },
            {
                country: 'Austria',
                alpha2: 'AT',
                alpha3: 'AUT',
                numeric: '040',
            },
            {
                country: 'Azerbaijan',
                alpha2: 'AZ',
                alpha3: 'AZE',
                numeric: '031',
            },
            {
                country: 'Bahamas',
                alpha2: 'BS',
                alpha3: 'BHS',
                numeric: '044',
            },
            {
                country: 'Bahrain',
                alpha2: 'BH',
                alpha3: 'BHR',
                numeric: '048',
            },
            {
                country: 'Bangladesh',
                alpha2: 'BD',
                alpha3: 'BGD',
                numeric: '050',
            },
            {
                country: 'Barbados',
                alpha2: 'BB',
                alpha3: 'BRB',
                numeric: '052',
            },
            {
                country: 'Belarus',
                alpha2: 'BY',
                alpha3: 'BLR',
                numeric: '112',
            },
            {
                country: 'Belgium',
                alpha2: 'BE',
                alpha3: 'BEL',
                numeric: '056',
            },
            {
                country: 'Belize',
                alpha2: 'BZ',
                alpha3: 'BLZ',
                numeric: '084',
            },
            {
                country: 'Benin',
                alpha2: 'BJ',
                alpha3: 'BEN',
                numeric: '204',
            },
            {
                country: 'Bermuda',
                alpha2: 'BM',
                alpha3: 'BMU',
                numeric: '060',
            },
            {
                country: 'Bhutan',
                alpha2: 'BT',
                alpha3: 'BTN',
                numeric: '064',
            },
            {
                country: 'Bolivia',
                alpha2: 'BO',
                alpha3: 'BOL',
                numeric: '068',
            },
            {
                country: 'Bonaire, Sint Eustatius and Saba',
                alpha2: 'BQ',
                alpha3: 'BES',
                numeric: '535',
            },
            {
                country: 'Bosnia and Herzegovina',
                alpha2: 'BA',
                alpha3: 'BIH',
                numeric: '070',
            },
            {
                country: 'Botswana',
                alpha2: 'BW',
                alpha3: 'BWA',
                numeric: '072',
            },
            {
                country: 'Bouvet Island',
                alpha2: 'BV',
                alpha3: 'BVT',
                numeric: '074',
            },
            {
                country: 'Brazil',
                alpha2: 'BR',
                alpha3: 'BRA',
                numeric: '076',
            },
            {
                country: 'British Indian Ocean Territory',
                alpha2: 'IO',
                alpha3: 'IOT',
                numeric: '086',
            },
            {
                country: 'Brunei Darussalam',
                alpha2: 'BN',
                alpha3: 'BRN',
                numeric: '096',
            },
            {
                country: 'Bulgaria',
                alpha2: 'BG',
                alpha3: 'BGR',
                numeric: '100',
            },
            {
                country: 'Burkina Faso',
                alpha2: 'BF',
                alpha3: 'BFA',
                numeric: '854',
            },
            {
                country: 'Burundi',
                alpha2: 'BI',
                alpha3: 'BDI',
                numeric: '108',
            },
            {
                country: 'Cabo Verde',
                alpha2: 'CV',
                alpha3: 'CPV',
                numeric: '132',
            },
            {
                country: 'Cambodia',
                alpha2: 'KH',
                alpha3: 'KHM',
                numeric: '116',
            },
            {
                country: 'Cameroon',
                alpha2: 'CM',
                alpha3: 'CMR',
                numeric: '120',
            },
            {
                country: 'Canada',
                alpha2: 'CA',
                alpha3: 'CAN',
                numeric: '124',
            },
            {
                country: 'Cayman Islands',
                alpha2: 'KY',
                alpha3: 'CYM',
                numeric: '136',
            },
            {
                country: 'Central African Republic',
                alpha2: 'CF',
                alpha3: 'CAF',
                numeric: '140',
            },
            {
                country: 'Chad',
                alpha2: 'TD',
                alpha3: 'TCD',
                numeric: '148',
            },
            {
                country: 'Chile',
                alpha2: 'CL',
                alpha3: 'CHL',
                numeric: '152',
            },
            {
                country: 'China',
                alpha2: 'CN',
                alpha3: 'CHN',
                numeric: '156',
            },
            {
                country: 'Christmas Island',
                alpha2: 'CX',
                alpha3: 'CXR',
                numeric: '162',
            },
            {
                country: 'Cocos Islands',
                alpha2: 'CC',
                alpha3: 'CCK',
                numeric: '166',
            },
            {
                country: 'Colombia',
                alpha2: 'CO',
                alpha3: 'COL',
                numeric: '170',
            },
            {
                country: 'Comoros',
                alpha2: 'KM',
                alpha3: 'COM',
                numeric: '174',
            },
            {
                country: 'Congo',
                alpha2: 'CG',
                alpha3: 'COG',
                numeric: '178',
            },
            {
                country: 'Congo',
                alpha2: 'CD',
                alpha3: 'COD',
                numeric: '180',
            },
            {
                country: 'Cook Islands',
                alpha2: 'CK',
                alpha3: 'COK',
                numeric: '184',
            },
            {
                country: 'Costa Rica',
                alpha2: 'CR',
                alpha3: 'CRI',
                numeric: '188',
            },
            {
                country: "Côte d'Ivoire",
                alpha2: 'CI',
                alpha3: 'CIV',
                numeric: '384',
            },
            {
                country: 'Croatia',
                alpha2: 'HR',
                alpha3: 'HRV',
                numeric: '191',
            },
            {
                country: 'Cuba',
                alpha2: 'CU',
                alpha3: 'CUB',
                numeric: '192',
            },
            {
                country: 'Curaçao',
                alpha2: 'CW',
                alpha3: 'CUW',
                numeric: '531',
            },
            {
                country: 'Cyprus',
                alpha2: 'CY',
                alpha3: 'CYP',
                numeric: '196',
            },
            {
                country: 'Czech Republic',
                alpha2: 'CZ',
                alpha3: 'CZE',
                numeric: '203',
            },
            {
                country: 'Denmark',
                alpha2: 'DK',
                alpha3: 'DNK',
                numeric: '208',
            },
            {
                country: 'Djibouti',
                alpha2: 'DJ',
                alpha3: 'DJI',
                numeric: '262',
            },
            {
                country: 'Dominica',
                alpha2: 'DM',
                alpha3: 'DMA',
                numeric: '212',
            },
            {
                country: 'Dominican Republic',
                alpha2: 'DO',
                alpha3: 'DOM',
                numeric: '214',
            },
            {
                country: 'Ecuador',
                alpha2: 'EC',
                alpha3: 'ECU',
                numeric: '218',
            },
            {
                country: 'Egypt',
                alpha2: 'EG',
                alpha3: 'EGY',
                numeric: '818',
            },
            {
                country: 'El Salvador',
                alpha2: 'SV',
                alpha3: 'SLV',
                numeric: '222',
            },
            {
                country: 'Equatorial Guinea',
                alpha2: 'GQ',
                alpha3: 'GNQ',
                numeric: '226',
            },
            {
                country: 'Eritrea',
                alpha2: 'ER',
                alpha3: 'ERI',
                numeric: '232',
            },
            {
                country: 'Estonia',
                alpha2: 'EE',
                alpha3: 'EST',
                numeric: '233',
            },
            {
                country: 'Ethiopia',
                alpha2: 'ET',
                alpha3: 'ETH',
                numeric: '231',
            },
            {
                country: 'Falkland Islands',
                alpha2: 'FK',
                alpha3: 'FLK',
                numeric: '238',
            },
            {
                country: 'Faroe Islands',
                alpha2: 'FO',
                alpha3: 'FRO',
                numeric: '234',
            },
            {
                country: 'Fiji',
                alpha2: 'FJ',
                alpha3: 'FJI',
                numeric: '242',
            },
            {
                country: 'Finland',
                alpha2: 'FI',
                alpha3: 'FIN',
                numeric: '246',
            },
            {
                country: 'France',
                alpha2: 'FR',
                alpha3: 'FRA',
                numeric: '250',
            },
            {
                country: 'French Guiana',
                alpha2: 'GF',
                alpha3: 'GUF',
                numeric: '254',
            },
            {
                country: 'French Polynesia',
                alpha2: 'PF',
                alpha3: 'PYF',
                numeric: '258',
            },
            {
                country: 'French Southern Territories',
                alpha2: 'TF',
                alpha3: 'ATF',
                numeric: '260',
            },
            {
                country: 'Gabon',
                alpha2: 'GA',
                alpha3: 'GAB',
                numeric: '266',
            },
            {
                country: 'Gambia',
                alpha2: 'GM',
                alpha3: 'GMB',
                numeric: '270',
            },
            {
                country: 'Georgia',
                alpha2: 'GE',
                alpha3: 'GEO',
                numeric: '268',
            },
            {
                country: 'Germany',
                alpha2: 'DE',
                alpha3: 'DEU',
                numeric: '276',
            },
            {
                country: 'Ghana',
                alpha2: 'GH',
                alpha3: 'GHA',
                numeric: '288',
            },
            {
                country: 'Gibraltar',
                alpha2: 'GI',
                alpha3: 'GIB',
                numeric: '292',
            },
            {
                country: 'Greece',
                alpha2: 'GR',
                alpha3: 'GRC',
                numeric: '300',
            },
            {
                country: 'Greenland',
                alpha2: 'GL',
                alpha3: 'GRL',
                numeric: '304',
            },
            {
                country: 'Grenada',
                alpha2: 'GD',
                alpha3: 'GRD',
                numeric: '308',
            },
            {
                country: 'Guadeloupe',
                alpha2: 'GP',
                alpha3: 'GLP',
                numeric: '312',
            },
            {
                country: 'Guam',
                alpha2: 'GU',
                alpha3: 'GUM',
                numeric: '316',
            },
            {
                country: 'Guatemala',
                alpha2: 'GT',
                alpha3: 'GTM',
                numeric: '320',
            },
            {
                country: 'Guernsey',
                alpha2: 'GG',
                alpha3: 'GGY',
                numeric: '831',
            },
            {
                country: 'Guinea',
                alpha2: 'GN',
                alpha3: 'GIN',
                numeric: '324',
            },
            {
                country: 'Guinea-Bissau',
                alpha2: 'GW',
                alpha3: 'GNB',
                numeric: '624',
            },
            {
                country: 'Guyana',
                alpha2: 'GY',
                alpha3: 'GUY',
                numeric: '328',
            },
            {
                country: 'Haiti',
                alpha2: 'HT',
                alpha3: 'HTI',
                numeric: '332',
            },
            {
                country: 'Heard Island and McDonald Islands',
                alpha2: 'HM',
                alpha3: 'HMD',
                numeric: '334',
            },
            {
                country: 'Holy See',
                alpha2: 'VA',
                alpha3: 'VAT',
                numeric: '336',
            },
            {
                country: 'Honduras',
                alpha2: 'HN',
                alpha3: 'HND',
                numeric: '340',
            },
            {
                country: 'Hong Kong',
                alpha2: 'HK',
                alpha3: 'HKG',
                numeric: '344',
            },
            {
                country: 'Hungary',
                alpha2: 'HU',
                alpha3: 'HUN',
                numeric: '348',
            },
            {
                country: 'Iceland',
                alpha2: 'IS',
                alpha3: 'ISL',
                numeric: '352',
            },
            {
                country: 'India',
                alpha2: 'IN',
                alpha3: 'IND',
                numeric: '356',
            },
            {
                country: 'Indonesia',
                alpha2: 'ID',
                alpha3: 'IDN',
                numeric: '360',
            },
            {
                country: 'Islamic Republic of Iran',
                alpha2: 'IR',
                alpha3: 'IRN',
                numeric: '364',
            },
            {
                country: 'Iraq',
                alpha2: 'IQ',
                alpha3: 'IRQ',
                numeric: '368',
            },
            {
                country: 'Ireland',
                alpha2: 'IE',
                alpha3: 'IRL',
                numeric: '372',
            },
            {
                country: 'Isle of Man',
                alpha2: 'IM',
                alpha3: 'IMN',
                numeric: '833',
            },
            {
                country: 'Israel',
                alpha2: 'IL',
                alpha3: 'ISR',
                numeric: '376',
            },
            {
                country: 'Italy',
                alpha2: 'IT',
                alpha3: 'ITA',
                numeric: '380',
            },
            {
                country: 'Jamaica',
                alpha2: 'JM',
                alpha3: 'JAM',
                numeric: '388',
            },
            {
                country: 'Japan',
                alpha2: 'JP',
                alpha3: 'JPN',
                numeric: '392',
            },
            {
                country: 'Jersey',
                alpha2: 'JE',
                alpha3: 'JEY',
                numeric: '832',
            },
            {
                country: 'Jordan',
                alpha2: 'JO',
                alpha3: 'JOR',
                numeric: '400',
            },
            {
                country: 'Kazakhstan',
                alpha2: 'KZ',
                alpha3: 'KAZ',
                numeric: '398',
            },
            {
                country: 'Kenya',
                alpha2: 'KE',
                alpha3: 'KEN',
                numeric: '404',
            },
            {
                country: 'Kiribati',
                alpha2: 'KI',
                alpha3: 'KIR',
                numeric: '296',
            },
            {
                country: "Democratic People's Republic of Korea",
                alpha2: 'KP',
                alpha3: 'PRK',
                numeric: '408',
            },
            {
                country: 'Republic of Korea',
                alpha2: 'KR',
                alpha3: 'KOR',
                numeric: '410',
            },
            {
                country: 'Kuwait',
                alpha2: 'KW',
                alpha3: 'KWT',
                numeric: '414',
            },
            {
                country: 'Kyrgyzstan',
                alpha2: 'KG',
                alpha3: 'KGZ',
                numeric: '417',
            },
            {
                country: "Lao People's Democratic Republic",
                alpha2: 'LA',
                alpha3: 'LAO',
                numeric: '418',
            },
            {
                country: 'Latvia',
                alpha2: 'LV',
                alpha3: 'LVA',
                numeric: '428',
            },
            {
                country: 'Lebanon',
                alpha2: 'LB',
                alpha3: 'LBN',
                numeric: '422',
            },
            {
                country: 'Lesotho',
                alpha2: 'LS',
                alpha3: 'LSO',
                numeric: '426',
            },
            {
                country: 'Liberia',
                alpha2: 'LR',
                alpha3: 'LBR',
                numeric: '430',
            },
            {
                country: 'Libya',
                alpha2: 'LY',
                alpha3: 'LBY',
                numeric: '434',
            },
            {
                country: 'Liechtenstein',
                alpha2: 'LI',
                alpha3: 'LIE',
                numeric: '438',
            },
            {
                country: 'Lithuania',
                alpha2: 'LT',
                alpha3: 'LTU',
                numeric: '440',
            },
            {
                country: 'Luxembourg',
                alpha2: 'LU',
                alpha3: 'LUX',
                numeric: '442',
            },
            {
                country: 'Macao',
                alpha2: 'MO',
                alpha3: 'MAC',
                numeric: '446',
            },
            {
                country: 'Macedonia',
                alpha2: 'MK',
                alpha3: 'MKD',
                numeric: '807',
            },
            {
                country: 'Madagascar',
                alpha2: 'MG',
                alpha3: 'MDG',
                numeric: '450',
            },
            {
                country: 'Malawi',
                alpha2: 'MW',
                alpha3: 'MWI',
                numeric: '454',
            },
            {
                country: 'Malaysia',
                alpha2: 'MY',
                alpha3: 'MYS',
                numeric: '458',
            },
            {
                country: 'Maldives',
                alpha2: 'MV',
                alpha3: 'MDV',
                numeric: '462',
            },
            {
                country: 'Mali',
                alpha2: 'ML',
                alpha3: 'MLI',
                numeric: '466',
            },
            {
                country: 'Malta',
                alpha2: 'MT',
                alpha3: 'MLT',
                numeric: '470',
            },
            {
                country: 'Marshall Islands',
                alpha2: 'MH',
                alpha3: 'MHL',
                numeric: '584',
            },
            {
                country: 'Martinique',
                alpha2: 'MQ',
                alpha3: 'MTQ',
                numeric: '474',
            },
            {
                country: 'Mauritania',
                alpha2: 'MR',
                alpha3: 'MRT',
                numeric: '478',
            },
            {
                country: 'Mauritius',
                alpha2: 'MU',
                alpha3: 'MUS',
                numeric: '480',
            },
            {
                country: 'Mayotte',
                alpha2: 'YT',
                alpha3: 'MYT',
                numeric: '175',
            },
            {
                country: 'Mexico',
                alpha2: 'MX',
                alpha3: 'MEX',
                numeric: '484',
            },
            {
                country: 'Federated States of Micronesia',
                alpha2: 'FM',
                alpha3: 'FSM',
                numeric: '583',
            },
            {
                country: 'Republic of Moldova',
                alpha2: 'MD',
                alpha3: 'MDA',
                numeric: '498',
            },
            {
                country: 'Monaco',
                alpha2: 'MC',
                alpha3: 'MCO',
                numeric: '492',
            },
            {
                country: 'Mongolia',
                alpha2: 'MN',
                alpha3: 'MNG',
                numeric: '496',
            },
            {
                country: 'Montenegro',
                alpha2: 'ME',
                alpha3: 'MNE',
                numeric: '499',
            },
            {
                country: 'Montserrat',
                alpha2: 'MS',
                alpha3: 'MSR',
                numeric: '500',
            },
            {
                country: 'Morocco',
                alpha2: 'MA',
                alpha3: 'MAR',
                numeric: '504',
            },
            {
                country: 'Mozambique',
                alpha2: 'MZ',
                alpha3: 'MOZ',
                numeric: '508',
            },
            {
                country: 'Myanmar',
                alpha2: 'MM',
                alpha3: 'MMR',
                numeric: '104',
            },
            {
                country: 'Namibia',
                alpha2: 'NA',
                alpha3: 'NAM',
                numeric: '516',
            },
            {
                country: 'Nauru',
                alpha2: 'NR',
                alpha3: 'NRU',
                numeric: '520',
            },
            {
                country: 'Nepal',
                alpha2: 'NP',
                alpha3: 'NPL',
                numeric: '524',
            },
            {
                country: 'Netherlands',
                alpha2: 'NL',
                alpha3: 'NLD',
                numeric: '528',
            },
            {
                country: 'New Caledonia',
                alpha2: 'NC',
                alpha3: 'NCL',
                numeric: '540',
            },
            {
                country: 'New Zealand',
                alpha2: 'NZ',
                alpha3: 'NZL',
                numeric: '554',
            },
            {
                country: 'Nicaragua',
                alpha2: 'NI',
                alpha3: 'NIC',
                numeric: '558',
            },
            {
                country: 'Niger',
                alpha2: 'NE',
                alpha3: 'NER',
                numeric: '562',
            },
            {
                country: 'Nigeria',
                alpha2: 'NG',
                alpha3: 'NGA',
                numeric: '566',
            },
            {
                country: 'Niue',
                alpha2: 'NU',
                alpha3: 'NIU',
                numeric: '570',
            },
            {
                country: 'Norfolk Island',
                alpha2: 'NF',
                alpha3: 'NFK',
                numeric: '574',
            },
            {
                country: 'Northern Mariana Islands',
                alpha2: 'MP',
                alpha3: 'MNP',
                numeric: '580',
            },
            {
                country: 'Norway',
                alpha2: 'NO',
                alpha3: 'NOR',
                numeric: '578',
            },
            {
                country: 'Oman',
                alpha2: 'OM',
                alpha3: 'OMN',
                numeric: '512',
            },
            {
                country: 'Pakistan',
                alpha2: 'PK',
                alpha3: 'PAK',
                numeric: '586',
            },
            {
                country: 'Palau',
                alpha2: 'PW',
                alpha3: 'PLW',
                numeric: '585',
            },
            {
                country: 'State of Palestine',
                alpha2: 'PS',
                alpha3: 'PSE',
                numeric: '275',
            },
            {
                country: 'Panama',
                alpha2: 'PA',
                alpha3: 'PAN',
                numeric: '591',
            },
            {
                country: 'Papua New Guinea',
                alpha2: 'PG',
                alpha3: 'PNG',
                numeric: '598',
            },
            {
                country: 'Paraguay',
                alpha2: 'PY',
                alpha3: 'PRY',
                numeric: '600',
            },
            {
                country: 'Peru',
                alpha2: 'PE',
                alpha3: 'PER',
                numeric: '604',
            },
            {
                country: 'Philippines',
                alpha2: 'PH',
                alpha3: 'PHL',
                numeric: '608',
            },
            {
                country: 'Pitcairn',
                alpha2: 'PN',
                alpha3: 'PCN',
                numeric: '612',
            },
            {
                country: 'Poland',
                alpha2: 'PL',
                alpha3: 'POL',
                numeric: '616',
            },
            {
                country: 'Portugal',
                alpha2: 'PT',
                alpha3: 'PRT',
                numeric: '620',
            },
            {
                country: 'Puerto Rico',
                alpha2: 'PR',
                alpha3: 'PRI',
                numeric: '630',
            },
            {
                country: 'Qatar',
                alpha2: 'QA',
                alpha3: 'QAT',
                numeric: '634',
            },
            {
                country: 'Réunion',
                alpha2: 'RE',
                alpha3: 'REU',
                numeric: '638',
            },
            {
                country: 'Romania',
                alpha2: 'RO',
                alpha3: 'ROU',
                numeric: '642',
            },
            {
                country: 'Russian Federation',
                alpha2: 'RU',
                alpha3: 'RUS',
                numeric: '643',
            },
            {
                country: 'Rwanda',
                alpha2: 'RW',
                alpha3: 'RWA',
                numeric: '646',
            },
            {
                country: 'Saint Barthélemy',
                alpha2: 'BL',
                alpha3: 'BLM',
                numeric: '652',
            },
            {
                country: 'Saint Helena, Ascension and Tristan da Cunha',
                alpha2: 'SH',
                alpha3: 'SHN',
                numeric: '654',
            },
            {
                country: 'Saint Kitts and Nevis',
                alpha2: 'KN',
                alpha3: 'KNA',
                numeric: '659',
            },
            {
                country: 'Saint Lucia',
                alpha2: 'LC',
                alpha3: 'LCA',
                numeric: '662',
            },
            {
                country: 'Saint Martin',
                alpha2: 'MF',
                alpha3: 'MAF',
                numeric: '663',
            },
            {
                country: 'Saint Pierre and Miquelon',
                alpha2: 'PM',
                alpha3: 'SPM',
                numeric: '666',
            },
            {
                country: 'Saint Vincent and the Grenadines',
                alpha2: 'VC',
                alpha3: 'VCT',
                numeric: '670',
            },
            {
                country: 'Samoa',
                alpha2: 'WS',
                alpha3: 'WSM',
                numeric: '882',
            },
            {
                country: 'San Marino',
                alpha2: 'SM',
                alpha3: 'SMR',
                numeric: '674',
            },
            {
                country: 'Sao Tome and Principe',
                alpha2: 'ST',
                alpha3: 'STP',
                numeric: '678',
            },
            {
                country: 'Saudi Arabia',
                alpha2: 'SA',
                alpha3: 'SAU',
                numeric: '682',
            },
            {
                country: 'Senegal',
                alpha2: 'SN',
                alpha3: 'SEN',
                numeric: '686',
            },
            {
                country: 'Serbia',
                alpha2: 'RS',
                alpha3: 'SRB',
                numeric: '688',
            },
            {
                country: 'Seychelles',
                alpha2: 'SC',
                alpha3: 'SYC',
                numeric: '690',
            },
            {
                country: 'Sierra Leone',
                alpha2: 'SL',
                alpha3: 'SLE',
                numeric: '694',
            },
            {
                country: 'Singapore',
                alpha2: 'SG',
                alpha3: 'SGP',
                numeric: '702',
            },
            {
                country: 'Sint Maarten',
                alpha2: 'SX',
                alpha3: 'SXM',
                numeric: '534',
            },
            {
                country: 'Slovakia',
                alpha2: 'SK',
                alpha3: 'SVK',
                numeric: '703',
            },
            {
                country: 'Slovenia',
                alpha2: 'SI',
                alpha3: 'SVN',
                numeric: '705',
            },
            {
                country: 'Solomon Islands',
                alpha2: 'SB',
                alpha3: 'SLB',
                numeric: '090',
            },
            {
                country: 'Somalia',
                alpha2: 'SO',
                alpha3: 'SOM',
                numeric: '706',
            },
            {
                country: 'South Africa',
                alpha2: 'ZA',
                alpha3: 'ZAF',
                numeric: '710',
            },
            {
                country: 'South Georgia and the South Sandwich Islands',
                alpha2: 'GS',
                alpha3: 'SGS',
                numeric: '239',
            },
            {
                country: 'South Sudan',
                alpha2: 'SS',
                alpha3: 'SSD',
                numeric: '728',
            },
            {
                country: 'Spain',
                alpha2: 'ES',
                alpha3: 'ESP',
                numeric: '724',
            },
            {
                country: 'Sri Lanka',
                alpha2: 'LK',
                alpha3: 'LKA',
                numeric: '144',
            },
            {
                country: 'Sudan',
                alpha2: 'SD',
                alpha3: 'SDN',
                numeric: '729',
            },
            {
                country: 'Suriname',
                alpha2: 'SR',
                alpha3: 'SUR',
                numeric: '740',
            },
            {
                country: 'Svalbard and Jan Mayen',
                alpha2: 'SJ',
                alpha3: 'SJM',
                numeric: '744',
            },
            {
                country: 'Swaziland',
                alpha2: 'SZ',
                alpha3: 'SWZ',
                numeric: '748',
            },
            {
                country: 'Sweden',
                alpha2: 'SE',
                alpha3: 'SWE',
                numeric: '752',
            },
            {
                country: 'Switzerland',
                alpha2: 'CH',
                alpha3: 'CHE',
                numeric: '756',
            },
            {
                country: 'Syrian Arab Republic',
                alpha2: 'SY',
                alpha3: 'SYR',
                numeric: '760',
            },
            {
                country: 'Taiwan, Province of China',
                alpha2: 'TW',
                alpha3: 'TWN',
                numeric: '158',
            },
            {
                country: 'Tajikistan',
                alpha2: 'TJ',
                alpha3: 'TJK',
                numeric: '762',
            },
            {
                country: 'United Republic of Tanzania',
                alpha2: 'TZ',
                alpha3: 'TZA',
                numeric: '834',
            },
            {
                country: 'Thailand',
                alpha2: 'TH',
                alpha3: 'THA',
                numeric: '764',
            },
            {
                country: 'Timor-Leste',
                alpha2: 'TL',
                alpha3: 'TLS',
                numeric: '626',
            },
            {
                country: 'Togo',
                alpha2: 'TG',
                alpha3: 'TGO',
                numeric: '768',
            },
            {
                country: 'Tokelau',
                alpha2: 'TK',
                alpha3: 'TKL',
                numeric: '772',
            },
            {
                country: 'Tonga',
                alpha2: 'TO',
                alpha3: 'TON',
                numeric: '776',
            },
            {
                country: 'Trinidad and Tobago',
                alpha2: 'TT',
                alpha3: 'TTO',
                numeric: '780',
            },
            {
                country: 'Tunisia',
                alpha2: 'TN',
                alpha3: 'TUN',
                numeric: '788',
            },
            {
                country: 'Turkey',
                alpha2: 'TR',
                alpha3: 'TUR',
                numeric: '792',
            },
            {
                country: 'Turkmenistan',
                alpha2: 'TM',
                alpha3: 'TKM',
                numeric: '795',
            },
            {
                country: 'Turks and Caicos Islands',
                alpha2: 'TC',
                alpha3: 'TCA',
                numeric: '796',
            },
            {
                country: 'Tuvalu',
                alpha2: 'TV',
                alpha3: 'TUV',
                numeric: '798',
            },
            {
                country: 'Uganda',
                alpha2: 'UG',
                alpha3: 'UGA',
                numeric: '800',
            },
            {
                country: 'Ukraine',
                alpha2: 'UA',
                alpha3: 'UKR',
                numeric: '804',
            },
            {
                country: 'United Arab Emirates',
                alpha2: 'AE',
                alpha3: 'ARE',
                numeric: '784',
            },
            {
                country: 'United Kingdom of Great Britain and Northern Ireland',
                alpha2: 'GB',
                alpha3: 'GBR',
                numeric: '826',
            },
            {
                country: 'United States of America',
                alpha2: 'US',
                alpha3: 'USA',
                numeric: '840',
            },
            {
                country: 'United States Minor Outlying Islands',
                alpha2: 'UM',
                alpha3: 'UMI',
                numeric: '581',
            },
            {
                country: 'Uruguay',
                alpha2: 'UY',
                alpha3: 'URY',
                numeric: '858',
            },
            {
                country: 'Uzbekistan',
                alpha2: 'UZ',
                alpha3: 'UZB',
                numeric: '860',
            },
            {
                country: 'Vanuatu',
                alpha2: 'VU',
                alpha3: 'VUT',
                numeric: '548',
            },
            {
                country: 'Venezuela (Bolivarian Republic of)',
                alpha2: 'VE',
                alpha3: 'VEN',
                numeric: '862',
            },
            {
                country: 'Viet Nam',
                alpha2: 'VN',
                alpha3: 'VNM',
                numeric: '704',
            },
            {
                country: 'Virgin Islands',
                alpha2: 'VG',
                alpha3: 'VGB',
                numeric: '092',
            },
            {
                country: 'Virgin Islands of the United States',
                alpha2: 'VI',
                alpha3: 'VIR',
                numeric: '850',
            },
            {
                country: 'Wallis and Futuna',
                alpha2: 'WF',
                alpha3: 'WLF',
                numeric: '876',
            },
            {
                country: 'Western Sahara',
                alpha2: 'EH',
                alpha3: 'ESH',
                numeric: '732',
            },
            {
                country: 'Yemen',
                alpha2: 'YE',
                alpha3: 'YEM',
                numeric: '887',
            },
            {
                country: 'Zambia',
                alpha2: 'ZM',
                alpha3: 'ZMB',
                numeric: '894',
            },
            {
                country: 'Zimbabwe',
                alpha2: 'ZW',
                alpha3: 'ZWE',
                numeric: '716',
            },
        ];
        exports.default = countries;
    },
});

// node_modules/iso-3166-1/dist/index.js
var require_dist = __commonJS({
    'node_modules/iso-3166-1/dist/index.js'(exports) {
        'use strict';
        var __importDefault =
            (exports && exports.__importDefault) ||
            function (mod2) {
                return mod2 && mod2.__esModule ? mod2 : { default: mod2 };
            };
        Object.defineProperty(exports, '__esModule', { value: true });
        exports.all = exports.whereNumeric = exports.whereAlpha3 = exports.whereAlpha2 = exports.whereCountry = void 0;
        var iso_3166_1 = __importDefault(require_iso_3166());
        exports.whereCountry = (name) => {
            return iso_3166_1.default.find((country) => country.country.toUpperCase() === name.toUpperCase());
        };
        exports.whereAlpha2 = (alpha2) => {
            return iso_3166_1.default.find((country) => country.alpha2 === alpha2.toUpperCase());
        };
        exports.whereAlpha3 = (alpha3) => {
            return iso_3166_1.default.find((country) => country.alpha3 === alpha3.toUpperCase());
        };
        exports.whereNumeric = (numeric) => {
            return iso_3166_1.default.find((country) => country.numeric === String(numeric));
        };
        exports.all = () => iso_3166_1.default;
        exports.default = {
            all: exports.all,
            whereCountry: exports.whereCountry,
            whereAlpha2: exports.whereAlpha2,
            whereAlpha3: exports.whereAlpha3,
            whereNumeric: exports.whereNumeric,
        };
    },
});

// node_modules/@concordium/web-sdk/lib/esm/types/NodeInfo.js
var PassiveCommitteeInfo;
(function (PassiveCommitteeInfo2) {
    PassiveCommitteeInfo2[(PassiveCommitteeInfo2['NotInCommittee'] = 0)] = 'NotInCommittee';
    PassiveCommitteeInfo2[(PassiveCommitteeInfo2['AddedButNotActiveInCommittee'] = 1)] = 'AddedButNotActiveInCommittee';
    PassiveCommitteeInfo2[(PassiveCommitteeInfo2['AddedButWrongKeys'] = 2)] = 'AddedButWrongKeys';
})(PassiveCommitteeInfo || (PassiveCommitteeInfo = {}));

// node_modules/@concordium/web-sdk/lib/esm/types/PeerInfo.js
var NodeCatchupStatus;
(function (NodeCatchupStatus2) {
    NodeCatchupStatus2[(NodeCatchupStatus2['UpToDate'] = 0)] = 'UpToDate';
    NodeCatchupStatus2[(NodeCatchupStatus2['Pending'] = 1)] = 'Pending';
    NodeCatchupStatus2[(NodeCatchupStatus2['CatchingUp'] = 2)] = 'CatchingUp';
})(NodeCatchupStatus || (NodeCatchupStatus = {}));

// node_modules/@concordium/web-sdk/lib/esm/types/transactionEvent.js
var TransactionEventTag;
(function (TransactionEventTag2) {
    TransactionEventTag2['ModuleDeployed'] = 'ModuleDeployed';
    TransactionEventTag2['ContractInitialized'] = 'ContractInitialized';
    TransactionEventTag2['AccountCreated'] = 'AccountCreated';
    TransactionEventTag2['CredentialDeployed'] = 'CredentialDeployed';
    TransactionEventTag2['BakerAdded'] = 'BakerAdded';
    TransactionEventTag2['BakerRemoved'] = 'BakerRemoved';
    TransactionEventTag2['BakerStakeIncreased'] = 'BakerStakeIncreased';
    TransactionEventTag2['BakerStakeDecreased'] = 'BakerStakeDecreased';
    TransactionEventTag2['BakerSetRestakeEarnings'] = 'BakerSetRestakeEarnings';
    TransactionEventTag2['BakerKeysUpdated'] = 'BakerKeysUpdated';
    TransactionEventTag2['CredentialKeysUpdated'] = 'CredentialKeysUpdated';
    TransactionEventTag2['NewEncryptedAmount'] = 'NewEncryptedAmount';
    TransactionEventTag2['EncryptedAmountsRemoved'] = 'EncryptedAmountsRemoved';
    TransactionEventTag2['AmountAddedByDecryption'] = 'AmountAddedByDecryption';
    TransactionEventTag2['EncryptedSelfAmountAdded'] = 'EncryptedSelfAmountAdded';
    TransactionEventTag2['UpdateEnqueued'] = 'UpdateEnqueued';
    TransactionEventTag2['TransferredWithSchedule'] = 'TransferredWithSchedule';
    TransactionEventTag2['CredentialsUpdated'] = 'CredentialsUpdated';
    TransactionEventTag2['DataRegistered'] = 'DataRegistered';
    TransactionEventTag2['BakerSetOpenStatus'] = 'BakerSetOpenStatus';
    TransactionEventTag2['BakerSetMetadataURL'] = 'BakerSetMetadataURL';
    TransactionEventTag2['BakerSetTransactionFeeCommission'] = 'BakerSetTransactionFeeCommission';
    TransactionEventTag2['BakerSetBakingRewardCommission'] = 'BakerSetBakingRewardCommission';
    TransactionEventTag2['BakerSetFinalizationRewardCommission'] = 'BakerSetFinalizationRewardCommission';
    TransactionEventTag2['DelegationStakeIncreased'] = 'DelegationStakeIncreased';
    TransactionEventTag2['DelegationStakeDecreased'] = 'DelegationStakeDecreased';
    TransactionEventTag2['DelegationSetRestakeEarnings'] = 'DelegationSetRestakeEarnings';
    TransactionEventTag2['DelegationSetDelegationTarget'] = 'DelegationSetDelegationTarget';
    TransactionEventTag2['DelegationAdded'] = 'DelegationAdded';
    TransactionEventTag2['DelegationRemoved'] = 'DelegationRemoved';
    TransactionEventTag2['TransferMemo'] = 'TransferMemo';
    TransactionEventTag2['Transferred'] = 'Transferred';
    TransactionEventTag2['Interrupted'] = 'Interrupted';
    TransactionEventTag2['Resumed'] = 'Resumed';
    TransactionEventTag2['Updated'] = 'Updated';
    TransactionEventTag2['Upgraded'] = 'Upgraded';
})(TransactionEventTag || (TransactionEventTag = {}));

// node_modules/@concordium/web-sdk/lib/esm/util.js
var import_buffer = __toESM(require_buffer(), 1);
function isHex(str2) {
    return /^[A-F0-9]+$/i.test(str2);
}
function isValidIp(ip) {
    const expression =
        /((^\s*((([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]))\s*$)|(^\s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)(\.(25[0-5]|2[0-4]\d|1\d\d|[1-9]?\d)){3}))|:)))(%.+)?\s*$))/;
    return expression.test(ip);
}
function countSignatures(accountSignatures) {
    let totalSignatureCount = 0n;
    const values = Object.values(accountSignatures);
    for (const credentialSignature of values) {
        const signatureCount = BigInt(Object.keys(credentialSignature).length);
        totalSignatureCount += signatureCount;
    }
    return totalSignatureCount;
}
function wasmToSchema(wasm9) {
    const wasmModule = new WebAssembly.Module(wasm9);
    const schemaBytes = schemaBytesFromWasmModule(wasmModule, 'concordium-schema');
    if (schemaBytes === null) {
        throw Error('WASM-Module contains no schema!');
    }
    return new Uint8Array(schemaBytes);
}
function schemaBytesFromWasmModule(wasmModule, sectionName) {
    const sections = WebAssembly.Module.customSections(wasmModule, sectionName);
    if (sections.length === 1) {
        return sections[0];
    } else if (sections.length === 0) {
        return null;
    } else {
        throw Error('Invalid WASM-Module retrieved!');
    }
}
function secondsSinceEpoch(date) {
    return BigInt(Math.floor(date.getTime() / 1e3));
}
function unwrap(x) {
    if (x === void 0) {
        console.trace();
        throw Error('Undefined value found.');
    } else {
        return x;
    }
}
function mapRecord(rec, valMapper, keyMapper = (a) => a) {
    const ret = {};
    for (const i in rec) {
        ret[keyMapper(i)] = valMapper(rec[i]);
    }
    return ret;
}
function mapStream(stream, mapper) {
    return {
        [Symbol.asyncIterator]() {
            return {
                async next() {
                    for await (const val of stream) {
                        return {
                            done: false,
                            value: mapper(val),
                        };
                    }
                    return {
                        done: true,
                        value: void 0,
                    };
                },
            };
        },
    };
}
function filterRecord(rec, predicate) {
    return Object.fromEntries(Object.entries(rec).filter(([k, v]) => predicate(k, v)));
}
async function streamToList(iterable) {
    const list = [];
    for await (const iter of iterable) {
        list.push(iter);
    }
    return list;
}
var makeDynamicFunction = (fun) => (input) => fun(Array.isArray(input) ? input : [input]);
function isDefined(v) {
    return v !== void 0;
}
function toBuffer(s, encoding) {
    return import_buffer.Buffer.from(s, encoding);
}

// node_modules/@concordium/web-sdk/lib/esm/contractHelpers.js
var CONTRACT_PARAM_MAX_LENGTH = 65535;
var checkParameterLength = (buffer) => {
    if (buffer.byteLength > CONTRACT_PARAM_MAX_LENGTH) {
        throw new Error(
            `Serialized parameter exceeds max length of smart contract parameter (${CONTRACT_PARAM_MAX_LENGTH} bytes)`
        );
    }
};
var isEqualContractAddress = (a) => (b) => a.index === b.index && a.subindex === b.subindex;
function isAsciiAlphaNumericPunctuation(string) {
    for (let i = 0; i < string.length; i++) {
        const charCode = string.charCodeAt(i);
        if (
            (32 <= charCode && charCode <= 47) || // Punctuation ! to /
            (48 <= charCode && charCode <= 57) || // Numeric
            (58 <= charCode && charCode <= 64) || // Punctuation : to @
            (65 <= charCode && charCode <= 90) || // Uppercase alpha
            (91 <= charCode && charCode <= 96) || // Punctuation [ to `
            (97 <= charCode && charCode <= 122) || // Lowercase alpha
            (123 <= charCode && charCode <= 126)
        ) {
            continue;
        } else {
            return false;
        }
    }
    return true;
}
function isInitName(string) {
    return (
        string.length <= 100 &&
        string.startsWith('init_') &&
        !string.includes('.') &&
        isAsciiAlphaNumericPunctuation(string)
    );
}
function getContractNameFromInit(initName) {
    return initName.substring(5);
}
function isReceiveName(string) {
    return string.length <= 100 && string.includes('.') && isAsciiAlphaNumericPunctuation(string);
}
function getNamesFromReceive(receiveName) {
    const splitPoint = receiveName.indexOf('.');
    if (splitPoint === -1) {
        throw new Error('Invalid receive name');
    }
    return {
        contractName: receiveName.substring(0, splitPoint),
        entrypointName: receiveName.substring(splitPoint + 1),
    };
}

// node_modules/@concordium/web-sdk/lib/esm/types/AccountAddress.js
var AccountAddress_exports = {};
__export(AccountAddress_exports, {
    JSON_DISCRIMINATOR: () => JSON_DISCRIMINATOR,
    equals: () => equals,
    fromBase58: () => fromBase58,
    fromBuffer: () => fromBuffer,
    fromProto: () => fromProto,
    fromSchemaValue: () => fromSchemaValue,
    fromTypedJSON: () => fromTypedJSON,
    getAlias: () => getAlias,
    instanceOf: () => instanceOf,
    isAlias: () => isAlias,
    toBase58: () => toBase58,
    toBuffer: () => toBuffer2,
    toProto: () => toProto,
    toSchemaValue: () => toSchemaValue,
    toTypedJSON: () => toTypedJSON,
    toUnwrappedJSON: () => toUnwrappedJSON,
});
var import_bs58check = __toESM(require_bs58check(), 1);
var import_buffer2 = __toESM(require_buffer(), 1);

// node_modules/@concordium/web-sdk/lib/esm/types/util.js
var TypedJsonDiscriminator;
(function (TypedJsonDiscriminator2) {
    TypedJsonDiscriminator2['AccountAddress'] = 'ccd_account_address';
    TypedJsonDiscriminator2['BlockHash'] = 'ccd_block_hash';
    TypedJsonDiscriminator2['CcdAmount'] = 'ccd_ccd_amount';
    TypedJsonDiscriminator2['ContractAddress'] = 'ccd_contract_address';
    TypedJsonDiscriminator2['ContractName'] = 'ccd_contract_name';
    TypedJsonDiscriminator2['CredentialRegistrationId'] = 'ccd_cred_reg_id';
    TypedJsonDiscriminator2['DataBlob'] = 'ccd_data_blob';
    TypedJsonDiscriminator2['Duration'] = 'ccd_duration';
    TypedJsonDiscriminator2['Energy'] = 'ccd_energy';
    TypedJsonDiscriminator2['EntrypointName'] = 'ccd_entrypoint_name';
    TypedJsonDiscriminator2['InitName'] = 'ccd_init_name';
    TypedJsonDiscriminator2['ModuleReference'] = 'ccd_module_reference';
    TypedJsonDiscriminator2['Parameter'] = 'ccd_parameter';
    TypedJsonDiscriminator2['ReceiveName'] = 'ccd_receive_name';
    TypedJsonDiscriminator2['ReturnValue'] = 'ccd_return_value';
    TypedJsonDiscriminator2['SequenceNumber'] = 'ccd_sequence_number';
    TypedJsonDiscriminator2['Timestamp'] = 'ccd_timestamp';
    TypedJsonDiscriminator2['TransactionExpiry'] = 'ccd_transaction_expiry';
    TypedJsonDiscriminator2['TransactionHash'] = 'ccd_transaction_hash';
})(TypedJsonDiscriminator || (TypedJsonDiscriminator = {}));
function isTypedJsonCandidate(value) {
    if (typeof value !== 'object' || value === null) {
        return false;
    }
    return ['@type', 'value'].every((name) => Object.getOwnPropertyNames(value).includes(name));
}
var TypedJsonParseErrorCode;
(function (TypedJsonParseErrorCode2) {
    TypedJsonParseErrorCode2['MALFORMED'] = 'MALFORMED';
    TypedJsonParseErrorCode2['WRONG_TYPE'] = 'WRONG_TYPE';
    TypedJsonParseErrorCode2['INVALID_VALUE'] = 'INVALID_VALUE';
})(TypedJsonParseErrorCode || (TypedJsonParseErrorCode = {}));
var TypedJsonParseError = class extends Error {
    /**
     * @param {string} message - The error message.
     */
    constructor(message) {
        super(message);
        this._name = 'TypedJsonParseError';
    }
    get name() {
        return `${this._name}.${this.code}`;
    }
};
var TypedJsonMalformedError = class extends TypedJsonParseError {
    constructor() {
        super(...arguments);
        this.code = TypedJsonParseErrorCode.MALFORMED;
    }
};
var TypedJsonWrongTypeError = class extends TypedJsonParseError {
    /**
     * @param {TypedJsonDiscriminator} expected - The discriminator expected by the typed JSON parser.
     * @param {TypedJsonDiscriminator} actual - The discriminator received by the typed JSON parser.
     */
    constructor(expected, actual) {
        super(`Wrong type discriminator found in JSON. Expected "${expected}", found "${actual}"`);
        this.expected = expected;
        this.actual = actual;
        this.code = TypedJsonParseErrorCode.WRONG_TYPE;
    }
};
var TypedJsonInvalidValueError = class extends TypedJsonParseError {
    /**
     * @param {string} inner - The original cause of the error.
     */
    constructor(inner) {
        super(`Unable to parse value (${(inner == null ? void 0 : inner.message) ?? inner})`);
        this.inner = inner;
        this.code = TypedJsonParseErrorCode.INVALID_VALUE;
        if (inner instanceof Error) {
            this.stack = inner.stack ?? this.stack;
        }
    }
};
function makeFromTypedJson(expectedTypeDiscriminator, toType) {
    return ({ ['@type']: type, value }) => {
        if (type === void 0 || value === void 0) {
            throw new TypedJsonMalformedError('Expected both "@type" and "value" properties to be available in JSON');
        }
        if (expectedTypeDiscriminator !== type) {
            throw new TypedJsonWrongTypeError(expectedTypeDiscriminator, type);
        }
        try {
            return toType(value);
        } catch (e) {
            throw new TypedJsonInvalidValueError(value);
        }
    };
}

// node_modules/@concordium/web-sdk/lib/esm/types/AccountAddress.js
var JSON_DISCRIMINATOR = TypedJsonDiscriminator.AccountAddress;
var AccountAddress = class {
    constructor(address, decodedAddress) {
        this.address = address;
        this.decodedAddress = decodedAddress;
        this.__type = JSON_DISCRIMINATOR;
    }
};
function toUnwrappedJSON(value) {
    return toBase58(value);
}
function instanceOf(value) {
    return value instanceof AccountAddress;
}
function fromBuffer(buffer) {
    if (buffer.byteLength !== 32) {
        throw new Error(`The provided buffer '${buffer}' is invalid as its length was not 32`);
    }
    const address = import_bs58check.default.encode(
        import_buffer2.Buffer.concat([Uint8Array.of(1), new Uint8Array(buffer)])
    );
    return new AccountAddress(address, new Uint8Array(buffer));
}
function fromBase58(address) {
    if (address.length !== 50) {
        throw new Error(`The provided address '${address}' is invalid as its length was not 50`);
    }
    const buffer = import_bs58check.default.decode(address);
    const versionByte = buffer.at(0);
    if (versionByte !== 1) {
        throw new Error(`The provided address '${address}' does not use version byte with value of 1`);
    }
    const decodedAddress = buffer.subarray(1, 33);
    return new AccountAddress(address, new Uint8Array(decodedAddress));
}
function toBuffer2(accountAddress) {
    return accountAddress.decodedAddress;
}
function toBase58(accountAddress) {
    return accountAddress.address;
}
function toSchemaValue(accountAddress) {
    return accountAddress.address;
}
function fromSchemaValue(accountAddress) {
    return fromBase58(accountAddress);
}
var addressByteLength = 32;
var aliasBytesLength = 3;
var commonBytesLength = addressByteLength - aliasBytesLength;
var maxCount = 16777215;
function isAlias(address, alias) {
    return (
        0 ===
        import_buffer2.Buffer.from(address.decodedAddress).compare(
            alias.decodedAddress,
            0,
            commonBytesLength,
            0,
            commonBytesLength
        )
    );
}
function getAlias(address, counter) {
    if (counter < 0 || counter > maxCount) {
        throw new Error(
            `An invalid counter value was given: ${counter}. The value has to satisfy that 0 <= counter < 2^24`
        );
    }
    const commonBytes = address.decodedAddress.slice(0, commonBytesLength);
    const aliasBytes = import_buffer2.Buffer.alloc(aliasBytesLength);
    aliasBytes.writeUIntBE(counter, 0, aliasBytesLength);
    return fromBuffer(import_buffer2.Buffer.concat([commonBytes, aliasBytes]));
}
function fromProto(accountAddress) {
    return fromBuffer(accountAddress.value);
}
function toProto(accountAddress) {
    return {
        value: accountAddress.decodedAddress,
    };
}
function equals(left, right) {
    return left.address === right.address;
}
function toTypedJSON(value) {
    return {
        ['@type']: JSON_DISCRIMINATOR,
        value: toBase58(value),
    };
}
var fromTypedJSON = makeFromTypedJson(JSON_DISCRIMINATOR, fromBase58);

// node_modules/@concordium/web-sdk/lib/esm/types/blockItemSummary.js
var TransactionKindString;
(function (TransactionKindString2) {
    TransactionKindString2['DeployModule'] = 'deployModule';
    TransactionKindString2['InitContract'] = 'initContract';
    TransactionKindString2['Update'] = 'update';
    TransactionKindString2['Transfer'] = 'transfer';
    TransactionKindString2['AddBaker'] = 'addBaker';
    TransactionKindString2['RemoveBaker'] = 'removeBaker';
    TransactionKindString2['UpdateBakerStake'] = 'updateBakerStake';
    TransactionKindString2['UpdateBakerRestakeEarnings'] = 'updateBakerRestakeEarnings';
    TransactionKindString2['UpdateBakerKeys'] = 'updateBakerKeys';
    TransactionKindString2['UpdateCredentialKeys'] = 'updateCredentialKeys';
    TransactionKindString2['BakingReward'] = 'bakingReward';
    TransactionKindString2['BlockReward'] = 'blockReward';
    TransactionKindString2['FinalizationReward'] = 'finalizationReward';
    TransactionKindString2['EncryptedAmountTransfer'] = 'encryptedAmountTransfer';
    TransactionKindString2['TransferToEncrypted'] = 'transferToEncrypted';
    TransactionKindString2['TransferToPublic'] = 'transferToPublic';
    TransactionKindString2['TransferWithSchedule'] = 'transferWithSchedule';
    TransactionKindString2['UpdateCredentials'] = 'updateCredentials';
    TransactionKindString2['RegisterData'] = 'registerData';
    TransactionKindString2['TransferWithMemo'] = 'transferWithMemo';
    TransactionKindString2['EncryptedAmountTransferWithMemo'] = 'encryptedAmountTransferWithMemo';
    TransactionKindString2['TransferWithScheduleAndMemo'] = 'transferWithScheduleAndMemo';
    TransactionKindString2['ConfigureBaker'] = 'configureBaker';
    TransactionKindString2['ConfigureDelegation'] = 'configureDelegation';
    TransactionKindString2['StakingReward'] = 'paydayAccountReward';
    TransactionKindString2['Failed'] = 'failed';
})(TransactionKindString || (TransactionKindString = {}));
function getTransactionKindString(type) {
    return TransactionKindString[AccountTransactionType[type]];
}
var isInitContractSummary = (summary) =>
    summary.type === TransactionSummaryType.AccountTransaction &&
    summary.transactionType === TransactionKindString.InitContract;
var isUpdateContractSummary = (summary) =>
    summary.type === TransactionSummaryType.AccountTransaction &&
    summary.transactionType === TransactionKindString.Update;
var isTransferLikeSummary = (summary) =>
    summary.type === TransactionSummaryType.AccountTransaction &&
    (summary.transactionType === TransactionKindString.Transfer ||
        summary.transactionType === TransactionKindString.TransferWithMemo);
var isRejectTransaction = (summary) =>
    summary.type === TransactionSummaryType.AccountTransaction &&
    summary.transactionType === TransactionKindString.Failed;
var isSuccessTransaction = (summary) => !isRejectTransaction(summary);
function getTransactionRejectReason(summary) {
    if (!isRejectTransaction(summary)) {
        return void 0;
    }
    return summary.rejectReason;
}
function getReceiverAccount(summary) {
    if (summary.type !== TransactionSummaryType.AccountTransaction) {
        return void 0;
    }
    switch (summary.transactionType) {
        case TransactionKindString.Transfer:
        case TransactionKindString.TransferWithMemo:
        case TransactionKindString.TransferWithScheduleAndMemo:
            return summary.transfer.to;
        case TransactionKindString.TransferWithSchedule:
            return summary.event.to;
    }
}
function affectedContracts(summary) {
    if (summary.type !== TransactionSummaryType.AccountTransaction) {
        return [];
    }
    switch (summary.transactionType) {
        case TransactionKindString.InitContract: {
            return [summary.contractInitialized.address];
        }
        case TransactionKindString.Update: {
            return summary.events.reduce((addresses, event) => {
                if (
                    event.tag !== TransactionEventTag.Updated ||
                    addresses.some(isEqualContractAddress(event.address))
                ) {
                    return addresses;
                }
                return [...addresses, event.address];
            }, []);
        }
        default: {
            return [];
        }
    }
}
function affectedAccounts(summary) {
    if (summary.type !== TransactionSummaryType.AccountTransaction) {
        return [];
    }
    switch (summary.transactionType) {
        case TransactionKindString.EncryptedAmountTransfer:
        case TransactionKindString.EncryptedAmountTransferWithMemo:
            return [summary.added.account, summary.removed.account];
        case TransactionKindString.TransferToEncrypted:
            return [summary.added.account];
        case TransactionKindString.TransferToPublic:
            return [summary.removed.account];
        case TransactionKindString.Update: {
            return summary.events.reduce(
                (addresses, event) => {
                    if (
                        event.tag === TransactionEventTag.Transferred &&
                        !addresses.some(equals.bind(void 0, event.to))
                    ) {
                        return [...addresses, event.to];
                    }
                    return addresses;
                },
                [summary.sender]
            );
        }
        default: {
            const receiver = getReceiverAccount(summary);
            if (receiver === void 0 || equals(summary.sender, receiver)) {
                return [summary.sender];
            }
            return [summary.sender, receiver];
        }
    }
}
function getSummaryContractUpdateLogs(summary) {
    if (summary.type !== TransactionSummaryType.AccountTransaction || !isUpdateContractSummary(summary)) {
        return [];
    }
    return summary.events
        .map((event) => {
            switch (event.tag) {
                case TransactionEventTag.Updated:
                case TransactionEventTag.Interrupted:
                    return { address: event.address, events: event.events };
                default:
                    return void 0;
            }
        })
        .filter(isDefined);
}

// node_modules/@concordium/web-sdk/lib/esm/types/chainUpdate.js
var UpdateType;
(function (UpdateType3) {
    UpdateType3['Root'] = 'root';
    UpdateType3['Level1'] = 'level1';
    UpdateType3['HigherLevelKeyUpdate'] = 'higherLevelKeyUpdate';
    UpdateType3['AuthorizationKeysUpdate'] = 'AuthorizationKeysUpdate';
    UpdateType3['Protocol'] = 'protocol';
    UpdateType3['ElectionDifficulty'] = 'electionDifficulty';
    UpdateType3['EuroPerEnergy'] = 'euroPerEnergy';
    UpdateType3['MicroGtuPerEuro'] = 'microGtuPerEuro';
    UpdateType3['FoundationAccount'] = 'foundationAccount';
    UpdateType3['MintDistribution'] = 'mintDistribution';
    UpdateType3['TransactionFeeDistribution'] = 'transactionFeeDistribution';
    UpdateType3['GasRewards'] = 'gasRewards';
    UpdateType3['PoolParameters'] = 'poolParameters';
    UpdateType3['AddAnonymityRevoker'] = 'addAnonymityRevoker';
    UpdateType3['AddIdentityProvider'] = 'addIdentityProvider';
    UpdateType3['CooldownParameters'] = 'cooldownParameters';
    UpdateType3['TimeParameters'] = 'timeParameters';
    UpdateType3['ProtocolUpdate'] = 'protocolUpdate';
    UpdateType3['BakerStakeThreshold'] = 'bakerStakeThreshold';
    UpdateType3['Emergency'] = 'emergency';
    UpdateType3['GasRewardsCpv2'] = 'gasRewardsCpv2';
    UpdateType3['TimeoutParameters'] = 'timeoutParameters';
    UpdateType3['MinBlockTime'] = 'minBlockTime';
    UpdateType3['BlockEnergyLimit'] = 'blockEnergyLimit';
    UpdateType3['FinalizationCommitteeParameters'] = 'finalizationCommitteeParameters';
})(UpdateType || (UpdateType = {}));
var KeyUpdateEntryStatus;
(function (KeyUpdateEntryStatus2) {
    KeyUpdateEntryStatus2[(KeyUpdateEntryStatus2['Added'] = 0)] = 'Added';
    KeyUpdateEntryStatus2[(KeyUpdateEntryStatus2['Removed'] = 1)] = 'Removed';
    KeyUpdateEntryStatus2[(KeyUpdateEntryStatus2['Unchanged'] = 2)] = 'Unchanged';
})(KeyUpdateEntryStatus || (KeyUpdateEntryStatus = {}));
var HigherLevelKeyUpdateType;
(function (HigherLevelKeyUpdateType2) {
    HigherLevelKeyUpdateType2['RootKeysUpdate'] = 'rootKeysUpdate';
    HigherLevelKeyUpdateType2['Level1KeysUpdate'] = 'level1KeysUpdate';
})(HigherLevelKeyUpdateType || (HigherLevelKeyUpdateType = {}));
var AuthorizationKeysUpdateType;
(function (AuthorizationKeysUpdateType2) {
    AuthorizationKeysUpdateType2['Level2KeysUpdate'] = 'level2KeysUpdate';
    AuthorizationKeysUpdateType2['Level2KeysUpdateV1'] = 'level2KeysUpdateV1';
})(AuthorizationKeysUpdateType || (AuthorizationKeysUpdateType = {}));

// node_modules/@concordium/web-sdk/lib/esm/types/rejectReason.js
var RejectReasonTag;
(function (RejectReasonTag2) {
    RejectReasonTag2['ModuleNotWF'] = 'ModuleNotWF';
    RejectReasonTag2['ModuleHashAlreadyExists'] = 'ModuleHashAlreadyExists';
    RejectReasonTag2['InvalidAccountReference'] = 'InvalidAccountReference';
    RejectReasonTag2['InvalidInitMethod'] = 'InvalidInitMethod';
    RejectReasonTag2['InvalidReceiveMethod'] = 'InvalidReceiveMethod';
    RejectReasonTag2['InvalidModuleReference'] = 'InvalidModuleReference';
    RejectReasonTag2['InvalidContractAddress'] = 'InvalidContractAddress';
    RejectReasonTag2['RuntimeFailure'] = 'RuntimeFailure';
    RejectReasonTag2['AmountTooLarge'] = 'AmountTooLarge';
    RejectReasonTag2['SerializationFailure'] = 'SerializationFailure';
    RejectReasonTag2['OutOfEnergy'] = 'OutOfEnergy';
    RejectReasonTag2['RejectedInit'] = 'RejectedInit';
    RejectReasonTag2['RejectedReceive'] = 'RejectedReceive';
    RejectReasonTag2['NonExistentRewardAccount'] = 'NonExistentRewardAccount';
    RejectReasonTag2['InvalidProof'] = 'InvalidProof';
    RejectReasonTag2['AlreadyABaker'] = 'AlreadyABaker';
    RejectReasonTag2['NotABaker'] = 'NotABaker';
    RejectReasonTag2['InsufficientBalanceForBakerStake'] = 'InsufficientBalanceForBakerStake';
    RejectReasonTag2['StakeUnderMinimumThresholdForBaking'] = 'StakeUnderMinimumThresholdForBaking';
    RejectReasonTag2['BakerInCooldown'] = 'BakerInCooldown';
    RejectReasonTag2['DuplicateAggregationKey'] = 'DuplicateAggregationKey';
    RejectReasonTag2['NonExistentCredentialID'] = 'NonExistentCredentialID';
    RejectReasonTag2['KeyIndexAlreadyInUse'] = 'KeyIndexAlreadyInUse';
    RejectReasonTag2['InvalidAccountThreshold'] = 'InvalidAccountThreshold';
    RejectReasonTag2['InvalidCredentialKeySignThreshold'] = 'InvalidCredentialKeySignThreshold';
    RejectReasonTag2['InvalidEncryptedAmountTransferProof'] = 'InvalidEncryptedAmountTransferProof';
    RejectReasonTag2['InvalidTransferToPublicProof'] = 'InvalidTransferToPublicProof';
    RejectReasonTag2['EncryptedAmountSelfTransfer'] = 'EncryptedAmountSelfTransfer';
    RejectReasonTag2['InvalidIndexOnEncryptedTransfer'] = 'InvalidIndexOnEncryptedTransfer';
    RejectReasonTag2['ZeroScheduledAmount'] = 'ZeroScheduledAmount';
    RejectReasonTag2['NonIncreasingSchedule'] = 'NonIncreasingSchedule';
    RejectReasonTag2['FirstScheduledReleaseExpired'] = 'FirstScheduledReleaseExpired';
    RejectReasonTag2['ScheduledSelfTransfer'] = 'ScheduledSelfTransfer';
    RejectReasonTag2['InvalidCredentials'] = 'InvalidCredentials';
    RejectReasonTag2['DuplicateCredIDs'] = 'DuplicateCredIDs';
    RejectReasonTag2['NonExistentCredIDs'] = 'NonExistentCredIDs';
    RejectReasonTag2['RemoveFirstCredential'] = 'RemoveFirstCredential';
    RejectReasonTag2['CredentialHolderDidNotSign'] = 'CredentialHolderDidNotSign';
    RejectReasonTag2['NotAllowedMultipleCredentials'] = 'NotAllowedMultipleCredentials';
    RejectReasonTag2['NotAllowedToReceiveEncrypted'] = 'NotAllowedToReceiveEncrypted';
    RejectReasonTag2['NotAllowedToHandleEncrypted'] = 'NotAllowedToHandleEncrypted';
    RejectReasonTag2['MissingBakerAddParameters'] = 'MissingBakerAddParameters';
    RejectReasonTag2['FinalizationRewardCommissionNotInRange'] = 'FinalizationRewardCommissionNotInRange';
    RejectReasonTag2['BakingRewardCommissionNotInRange'] = 'BakingRewardCommissionNotInRange';
    RejectReasonTag2['TransactionFeeCommissionNotInRange'] = 'TransactionFeeCommissionNotInRange';
    RejectReasonTag2['AlreadyADelegator'] = 'AlreadyADelegator';
    RejectReasonTag2['InsufficientBalanceForDelegationStake'] = 'InsufficientBalanceForDelegationStake';
    RejectReasonTag2['MissingDelegationAddParameters'] = 'MissingDelegationAddParameters';
    RejectReasonTag2['InsufficientDelegationStake'] = 'InsufficientDelegationStake';
    RejectReasonTag2['DelegatorInCooldown'] = 'DelegatorInCooldown';
    RejectReasonTag2['NotADelegator'] = 'NotADelegator';
    RejectReasonTag2['DelegationTargetNotABaker'] = 'DelegationTargetNotABaker';
    RejectReasonTag2['StakeOverMaximumThresholdForPool'] = 'StakeOverMaximumThresholdForPool';
    RejectReasonTag2['PoolWouldBecomeOverDelegated'] = 'PoolWouldBecomeOverDelegated';
    RejectReasonTag2['PoolClosed'] = 'PoolClosed';
})(RejectReasonTag || (RejectReasonTag = {}));

// node_modules/@concordium/web-sdk/lib/esm/types/BlockSpecialEvents.js
function specialEventAffectedAccounts(event) {
    var _a;
    switch (event.tag) {
        case 'bakingRewards':
            return event.bakingRewards.map((br) => br.account);
        case 'finalizationRewards':
            return ((_a = event.finalizationRewards) == null ? void 0 : _a.map((fr) => fr.account)) ?? [];
        case 'mint':
        case 'paydayFoundationReward':
            return [event.foundationAccount];
        case 'paydayAccountReward':
            return [event.account];
        case 'blockReward': {
            if (equals(event.baker, event.foundationAccount)) {
                return [event.baker];
            }
            return [event.baker, event.foundationAccount];
        }
        default:
            return [];
    }
}

// node_modules/@protobuf-ts/runtime/build/es2015/json-typings.js
function typeofJsonValue(value) {
    let t = typeof value;
    if (t == 'object') {
        if (Array.isArray(value)) return 'array';
        if (value === null) return 'null';
    }
    return t;
}
function isJsonObject(value) {
    return value !== null && typeof value == 'object' && !Array.isArray(value);
}

// node_modules/@protobuf-ts/runtime/build/es2015/base64.js
var encTable = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'.split('');
var decTable = [];
for (let i = 0; i < encTable.length; i++) decTable[encTable[i].charCodeAt(0)] = i;
decTable['-'.charCodeAt(0)] = encTable.indexOf('+');
decTable['_'.charCodeAt(0)] = encTable.indexOf('/');
function base64decode(base64Str) {
    let es = (base64Str.length * 3) / 4;
    if (base64Str[base64Str.length - 2] == '=') es -= 2;
    else if (base64Str[base64Str.length - 1] == '=') es -= 1;
    let bytes2 = new Uint8Array(es),
        bytePos = 0,
        groupPos = 0,
        b,
        p = 0;
    for (let i = 0; i < base64Str.length; i++) {
        b = decTable[base64Str.charCodeAt(i)];
        if (b === void 0) {
            switch (base64Str[i]) {
                case '=':
                    groupPos = 0;
                case '\n':
                case '\r':
                case '	':
                case ' ':
                    continue;
                default:
                    throw Error(`invalid base64 string.`);
            }
        }
        switch (groupPos) {
            case 0:
                p = b;
                groupPos = 1;
                break;
            case 1:
                bytes2[bytePos++] = (p << 2) | ((b & 48) >> 4);
                p = b;
                groupPos = 2;
                break;
            case 2:
                bytes2[bytePos++] = ((p & 15) << 4) | ((b & 60) >> 2);
                p = b;
                groupPos = 3;
                break;
            case 3:
                bytes2[bytePos++] = ((p & 3) << 6) | b;
                groupPos = 0;
                break;
        }
    }
    if (groupPos == 1) throw Error(`invalid base64 string.`);
    return bytes2.subarray(0, bytePos);
}
function base64encode(bytes2) {
    let base642 = '',
        groupPos = 0,
        b,
        p = 0;
    for (let i = 0; i < bytes2.length; i++) {
        b = bytes2[i];
        switch (groupPos) {
            case 0:
                base642 += encTable[b >> 2];
                p = (b & 3) << 4;
                groupPos = 1;
                break;
            case 1:
                base642 += encTable[p | (b >> 4)];
                p = (b & 15) << 2;
                groupPos = 2;
                break;
            case 2:
                base642 += encTable[p | (b >> 6)];
                base642 += encTable[b & 63];
                groupPos = 0;
                break;
        }
    }
    if (groupPos) {
        base642 += encTable[p];
        base642 += '=';
        if (groupPos == 1) base642 += '=';
    }
    return base642;
}

// node_modules/@protobuf-ts/runtime/build/es2015/binary-format-contract.js
var UnknownFieldHandler;
(function (UnknownFieldHandler2) {
    UnknownFieldHandler2.symbol = Symbol.for('protobuf-ts/unknown');
    UnknownFieldHandler2.onRead = (typeName, message, fieldNo, wireType, data) => {
        let container = is(message)
            ? message[UnknownFieldHandler2.symbol]
            : (message[UnknownFieldHandler2.symbol] = []);
        container.push({ no: fieldNo, wireType, data });
    };
    UnknownFieldHandler2.onWrite = (typeName, message, writer) => {
        for (let { no, wireType, data } of UnknownFieldHandler2.list(message)) writer.tag(no, wireType).raw(data);
    };
    UnknownFieldHandler2.list = (message, fieldNo) => {
        if (is(message)) {
            let all = message[UnknownFieldHandler2.symbol];
            return fieldNo ? all.filter((uf) => uf.no == fieldNo) : all;
        }
        return [];
    };
    UnknownFieldHandler2.last = (message, fieldNo) => UnknownFieldHandler2.list(message, fieldNo).slice(-1)[0];
    const is = (message) => message && Array.isArray(message[UnknownFieldHandler2.symbol]);
})(UnknownFieldHandler || (UnknownFieldHandler = {}));
function mergeBinaryOptions(a, b) {
    return Object.assign(Object.assign({}, a), b);
}
var WireType;
(function (WireType2) {
    WireType2[(WireType2['Varint'] = 0)] = 'Varint';
    WireType2[(WireType2['Bit64'] = 1)] = 'Bit64';
    WireType2[(WireType2['LengthDelimited'] = 2)] = 'LengthDelimited';
    WireType2[(WireType2['StartGroup'] = 3)] = 'StartGroup';
    WireType2[(WireType2['EndGroup'] = 4)] = 'EndGroup';
    WireType2[(WireType2['Bit32'] = 5)] = 'Bit32';
})(WireType || (WireType = {}));

// node_modules/@protobuf-ts/runtime/build/es2015/goog-varint.js
function varint64read() {
    let lowBits = 0;
    let highBits = 0;
    for (let shift = 0; shift < 28; shift += 7) {
        let b = this.buf[this.pos++];
        lowBits |= (b & 127) << shift;
        if ((b & 128) == 0) {
            this.assertBounds();
            return [lowBits, highBits];
        }
    }
    let middleByte = this.buf[this.pos++];
    lowBits |= (middleByte & 15) << 28;
    highBits = (middleByte & 112) >> 4;
    if ((middleByte & 128) == 0) {
        this.assertBounds();
        return [lowBits, highBits];
    }
    for (let shift = 3; shift <= 31; shift += 7) {
        let b = this.buf[this.pos++];
        highBits |= (b & 127) << shift;
        if ((b & 128) == 0) {
            this.assertBounds();
            return [lowBits, highBits];
        }
    }
    throw new Error('invalid varint');
}
function varint64write(lo, hi, bytes2) {
    for (let i = 0; i < 28; i = i + 7) {
        const shift = lo >>> i;
        const hasNext = !(shift >>> 7 == 0 && hi == 0);
        const byte = (hasNext ? shift | 128 : shift) & 255;
        bytes2.push(byte);
        if (!hasNext) {
            return;
        }
    }
    const splitBits = ((lo >>> 28) & 15) | ((hi & 7) << 4);
    const hasMoreBits = !(hi >> 3 == 0);
    bytes2.push((hasMoreBits ? splitBits | 128 : splitBits) & 255);
    if (!hasMoreBits) {
        return;
    }
    for (let i = 3; i < 31; i = i + 7) {
        const shift = hi >>> i;
        const hasNext = !(shift >>> 7 == 0);
        const byte = (hasNext ? shift | 128 : shift) & 255;
        bytes2.push(byte);
        if (!hasNext) {
            return;
        }
    }
    bytes2.push((hi >>> 31) & 1);
}
var TWO_PWR_32_DBL = (1 << 16) * (1 << 16);
function int64fromString(dec) {
    let minus = dec[0] == '-';
    if (minus) dec = dec.slice(1);
    const base = 1e6;
    let lowBits = 0;
    let highBits = 0;
    function add1e6digit(begin, end) {
        const digit1e6 = Number(dec.slice(begin, end));
        highBits *= base;
        lowBits = lowBits * base + digit1e6;
        if (lowBits >= TWO_PWR_32_DBL) {
            highBits = highBits + ((lowBits / TWO_PWR_32_DBL) | 0);
            lowBits = lowBits % TWO_PWR_32_DBL;
        }
    }
    add1e6digit(-24, -18);
    add1e6digit(-18, -12);
    add1e6digit(-12, -6);
    add1e6digit(-6);
    return [minus, lowBits, highBits];
}
function int64toString(bitsLow, bitsHigh) {
    if (bitsHigh >>> 0 <= 2097151) {
        return '' + (TWO_PWR_32_DBL * bitsHigh + (bitsLow >>> 0));
    }
    let low = bitsLow & 16777215;
    let mid = (((bitsLow >>> 24) | (bitsHigh << 8)) >>> 0) & 16777215;
    let high = (bitsHigh >> 16) & 65535;
    let digitA = low + mid * 6777216 + high * 6710656;
    let digitB = mid + high * 8147497;
    let digitC = high * 2;
    let base = 1e7;
    if (digitA >= base) {
        digitB += Math.floor(digitA / base);
        digitA %= base;
    }
    if (digitB >= base) {
        digitC += Math.floor(digitB / base);
        digitB %= base;
    }
    function decimalFrom1e7(digit1e7, needLeadingZeros) {
        let partial = digit1e7 ? String(digit1e7) : '';
        if (needLeadingZeros) {
            return '0000000'.slice(partial.length) + partial;
        }
        return partial;
    }
    return (
        decimalFrom1e7(
            digitC,
            /*needLeadingZeros=*/
            0
        ) +
        decimalFrom1e7(
            digitB,
            /*needLeadingZeros=*/
            digitC
        ) + // If the final 1e7 digit didn't need leading zeros, we would have
        // returned via the trivial code path at the top.
        decimalFrom1e7(
            digitA,
            /*needLeadingZeros=*/
            1
        )
    );
}
function varint32write(value, bytes2) {
    if (value >= 0) {
        while (value > 127) {
            bytes2.push((value & 127) | 128);
            value = value >>> 7;
        }
        bytes2.push(value);
    } else {
        for (let i = 0; i < 9; i++) {
            bytes2.push((value & 127) | 128);
            value = value >> 7;
        }
        bytes2.push(1);
    }
}
function varint32read() {
    let b = this.buf[this.pos++];
    let result = b & 127;
    if ((b & 128) == 0) {
        this.assertBounds();
        return result;
    }
    b = this.buf[this.pos++];
    result |= (b & 127) << 7;
    if ((b & 128) == 0) {
        this.assertBounds();
        return result;
    }
    b = this.buf[this.pos++];
    result |= (b & 127) << 14;
    if ((b & 128) == 0) {
        this.assertBounds();
        return result;
    }
    b = this.buf[this.pos++];
    result |= (b & 127) << 21;
    if ((b & 128) == 0) {
        this.assertBounds();
        return result;
    }
    b = this.buf[this.pos++];
    result |= (b & 15) << 28;
    for (let readBytes = 5; (b & 128) !== 0 && readBytes < 10; readBytes++) b = this.buf[this.pos++];
    if ((b & 128) != 0) throw new Error('invalid varint');
    this.assertBounds();
    return result >>> 0;
}

// node_modules/@protobuf-ts/runtime/build/es2015/pb-long.js
var BI;
function detectBi() {
    const dv = new DataView(new ArrayBuffer(8));
    const ok =
        globalThis.BigInt !== void 0 &&
        typeof dv.getBigInt64 === 'function' &&
        typeof dv.getBigUint64 === 'function' &&
        typeof dv.setBigInt64 === 'function' &&
        typeof dv.setBigUint64 === 'function';
    BI = ok
        ? {
              MIN: BigInt('-9223372036854775808'),
              MAX: BigInt('9223372036854775807'),
              UMIN: BigInt('0'),
              UMAX: BigInt('18446744073709551615'),
              C: BigInt,
              V: dv,
          }
        : void 0;
}
detectBi();
function assertBi(bi) {
    if (!bi)
        throw new Error(
            'BigInt unavailable, see https://github.com/timostamm/protobuf-ts/blob/v1.0.8/MANUAL.md#bigint-support'
        );
}
var RE_DECIMAL_STR = /^-?[0-9]+$/;
var TWO_PWR_32_DBL2 = 4294967296;
var HALF_2_PWR_32 = 2147483648;
var SharedPbLong = class {
    /**
     * Create a new instance with the given bits.
     */
    constructor(lo, hi) {
        this.lo = lo | 0;
        this.hi = hi | 0;
    }
    /**
     * Is this instance equal to 0?
     */
    isZero() {
        return this.lo == 0 && this.hi == 0;
    }
    /**
     * Convert to a native number.
     */
    toNumber() {
        let result = this.hi * TWO_PWR_32_DBL2 + (this.lo >>> 0);
        if (!Number.isSafeInteger(result)) throw new Error('cannot convert to safe number');
        return result;
    }
};
var PbULong = class _PbULong extends SharedPbLong {
    /**
     * Create instance from a `string`, `number` or `bigint`.
     */
    static from(value) {
        if (BI)
            switch (typeof value) {
                case 'string':
                    if (value == '0') return this.ZERO;
                    if (value == '') throw new Error('string is no integer');
                    value = BI.C(value);
                case 'number':
                    if (value === 0) return this.ZERO;
                    value = BI.C(value);
                case 'bigint':
                    if (!value) return this.ZERO;
                    if (value < BI.UMIN) throw new Error('signed value for ulong');
                    if (value > BI.UMAX) throw new Error('ulong too large');
                    BI.V.setBigUint64(0, value, true);
                    return new _PbULong(BI.V.getInt32(0, true), BI.V.getInt32(4, true));
            }
        else
            switch (typeof value) {
                case 'string':
                    if (value == '0') return this.ZERO;
                    value = value.trim();
                    if (!RE_DECIMAL_STR.test(value)) throw new Error('string is no integer');
                    let [minus, lo, hi] = int64fromString(value);
                    if (minus) throw new Error('signed value for ulong');
                    return new _PbULong(lo, hi);
                case 'number':
                    if (value == 0) return this.ZERO;
                    if (!Number.isSafeInteger(value)) throw new Error('number is no integer');
                    if (value < 0) throw new Error('signed value for ulong');
                    return new _PbULong(value, value / TWO_PWR_32_DBL2);
            }
        throw new Error('unknown value ' + typeof value);
    }
    /**
     * Convert to decimal string.
     */
    toString() {
        return BI ? this.toBigInt().toString() : int64toString(this.lo, this.hi);
    }
    /**
     * Convert to native bigint.
     */
    toBigInt() {
        assertBi(BI);
        BI.V.setInt32(0, this.lo, true);
        BI.V.setInt32(4, this.hi, true);
        return BI.V.getBigUint64(0, true);
    }
};
PbULong.ZERO = new PbULong(0, 0);
var PbLong = class _PbLong extends SharedPbLong {
    /**
     * Create instance from a `string`, `number` or `bigint`.
     */
    static from(value) {
        if (BI)
            switch (typeof value) {
                case 'string':
                    if (value == '0') return this.ZERO;
                    if (value == '') throw new Error('string is no integer');
                    value = BI.C(value);
                case 'number':
                    if (value === 0) return this.ZERO;
                    value = BI.C(value);
                case 'bigint':
                    if (!value) return this.ZERO;
                    if (value < BI.MIN) throw new Error('signed long too small');
                    if (value > BI.MAX) throw new Error('signed long too large');
                    BI.V.setBigInt64(0, value, true);
                    return new _PbLong(BI.V.getInt32(0, true), BI.V.getInt32(4, true));
            }
        else
            switch (typeof value) {
                case 'string':
                    if (value == '0') return this.ZERO;
                    value = value.trim();
                    if (!RE_DECIMAL_STR.test(value)) throw new Error('string is no integer');
                    let [minus, lo, hi] = int64fromString(value);
                    if (minus) {
                        if (hi > HALF_2_PWR_32 || (hi == HALF_2_PWR_32 && lo != 0))
                            throw new Error('signed long too small');
                    } else if (hi >= HALF_2_PWR_32) throw new Error('signed long too large');
                    let pbl = new _PbLong(lo, hi);
                    return minus ? pbl.negate() : pbl;
                case 'number':
                    if (value == 0) return this.ZERO;
                    if (!Number.isSafeInteger(value)) throw new Error('number is no integer');
                    return value > 0
                        ? new _PbLong(value, value / TWO_PWR_32_DBL2)
                        : new _PbLong(-value, -value / TWO_PWR_32_DBL2).negate();
            }
        throw new Error('unknown value ' + typeof value);
    }
    /**
     * Do we have a minus sign?
     */
    isNegative() {
        return (this.hi & HALF_2_PWR_32) !== 0;
    }
    /**
     * Negate two's complement.
     * Invert all the bits and add one to the result.
     */
    negate() {
        let hi = ~this.hi,
            lo = this.lo;
        if (lo) lo = ~lo + 1;
        else hi += 1;
        return new _PbLong(lo, hi);
    }
    /**
     * Convert to decimal string.
     */
    toString() {
        if (BI) return this.toBigInt().toString();
        if (this.isNegative()) {
            let n = this.negate();
            return '-' + int64toString(n.lo, n.hi);
        }
        return int64toString(this.lo, this.hi);
    }
    /**
     * Convert to native bigint.
     */
    toBigInt() {
        assertBi(BI);
        BI.V.setInt32(0, this.lo, true);
        BI.V.setInt32(4, this.hi, true);
        return BI.V.getBigInt64(0, true);
    }
};
PbLong.ZERO = new PbLong(0, 0);

// node_modules/@protobuf-ts/runtime/build/es2015/binary-reader.js
var defaultsRead = {
    readUnknownField: true,
    readerFactory: (bytes2) => new BinaryReader(bytes2),
};
function binaryReadOptions(options) {
    return options ? Object.assign(Object.assign({}, defaultsRead), options) : defaultsRead;
}
var BinaryReader = class {
    constructor(buf, textDecoder) {
        this.varint64 = varint64read;
        this.uint32 = varint32read;
        this.buf = buf;
        this.len = buf.length;
        this.pos = 0;
        this.view = new DataView(buf.buffer, buf.byteOffset, buf.byteLength);
        this.textDecoder =
            textDecoder !== null && textDecoder !== void 0
                ? textDecoder
                : new TextDecoder('utf-8', {
                      fatal: true,
                      ignoreBOM: true,
                  });
    }
    /**
     * Reads a tag - field number and wire type.
     */
    tag() {
        let tag = this.uint32(),
            fieldNo = tag >>> 3,
            wireType = tag & 7;
        if (fieldNo <= 0 || wireType < 0 || wireType > 5)
            throw new Error('illegal tag: field no ' + fieldNo + ' wire type ' + wireType);
        return [fieldNo, wireType];
    }
    /**
     * Skip one element on the wire and return the skipped data.
     * Supports WireType.StartGroup since v2.0.0-alpha.23.
     */
    skip(wireType) {
        let start = this.pos;
        switch (wireType) {
            case WireType.Varint:
                while (this.buf[this.pos++] & 128) {}
                break;
            case WireType.Bit64:
                this.pos += 4;
            case WireType.Bit32:
                this.pos += 4;
                break;
            case WireType.LengthDelimited:
                let len = this.uint32();
                this.pos += len;
                break;
            case WireType.StartGroup:
                let t;
                while ((t = this.tag()[1]) !== WireType.EndGroup) {
                    this.skip(t);
                }
                break;
            default:
                throw new Error('cant skip wire type ' + wireType);
        }
        this.assertBounds();
        return this.buf.subarray(start, this.pos);
    }
    /**
     * Throws error if position in byte array is out of range.
     */
    assertBounds() {
        if (this.pos > this.len) throw new RangeError('premature EOF');
    }
    /**
     * Read a `int32` field, a signed 32 bit varint.
     */
    int32() {
        return this.uint32() | 0;
    }
    /**
     * Read a `sint32` field, a signed, zigzag-encoded 32-bit varint.
     */
    sint32() {
        let zze = this.uint32();
        return (zze >>> 1) ^ -(zze & 1);
    }
    /**
     * Read a `int64` field, a signed 64-bit varint.
     */
    int64() {
        return new PbLong(...this.varint64());
    }
    /**
     * Read a `uint64` field, an unsigned 64-bit varint.
     */
    uint64() {
        return new PbULong(...this.varint64());
    }
    /**
     * Read a `sint64` field, a signed, zig-zag-encoded 64-bit varint.
     */
    sint64() {
        let [lo, hi] = this.varint64();
        let s = -(lo & 1);
        lo = ((lo >>> 1) | ((hi & 1) << 31)) ^ s;
        hi = (hi >>> 1) ^ s;
        return new PbLong(lo, hi);
    }
    /**
     * Read a `bool` field, a variant.
     */
    bool() {
        let [lo, hi] = this.varint64();
        return lo !== 0 || hi !== 0;
    }
    /**
     * Read a `fixed32` field, an unsigned, fixed-length 32-bit integer.
     */
    fixed32() {
        return this.view.getUint32((this.pos += 4) - 4, true);
    }
    /**
     * Read a `sfixed32` field, a signed, fixed-length 32-bit integer.
     */
    sfixed32() {
        return this.view.getInt32((this.pos += 4) - 4, true);
    }
    /**
     * Read a `fixed64` field, an unsigned, fixed-length 64 bit integer.
     */
    fixed64() {
        return new PbULong(this.sfixed32(), this.sfixed32());
    }
    /**
     * Read a `fixed64` field, a signed, fixed-length 64-bit integer.
     */
    sfixed64() {
        return new PbLong(this.sfixed32(), this.sfixed32());
    }
    /**
     * Read a `float` field, 32-bit floating point number.
     */
    float() {
        return this.view.getFloat32((this.pos += 4) - 4, true);
    }
    /**
     * Read a `double` field, a 64-bit floating point number.
     */
    double() {
        return this.view.getFloat64((this.pos += 8) - 8, true);
    }
    /**
     * Read a `bytes` field, length-delimited arbitrary data.
     */
    bytes() {
        let len = this.uint32();
        let start = this.pos;
        this.pos += len;
        this.assertBounds();
        return this.buf.subarray(start, start + len);
    }
    /**
     * Read a `string` field, length-delimited data converted to UTF-8 text.
     */
    string() {
        return this.textDecoder.decode(this.bytes());
    }
};

// node_modules/@protobuf-ts/runtime/build/es2015/assert.js
function assert(condition, msg) {
    if (!condition) {
        throw new Error(msg);
    }
}
function assertNever(value, msg) {
    throw new Error(msg !== null && msg !== void 0 ? msg : 'Unexpected object: ' + value);
}
var FLOAT32_MAX = 34028234663852886e22;
var FLOAT32_MIN = -34028234663852886e22;
var UINT32_MAX = 4294967295;
var INT32_MAX = 2147483647;
var INT32_MIN = -2147483648;
function assertInt32(arg) {
    if (typeof arg !== 'number') throw new Error('invalid int 32: ' + typeof arg);
    if (!Number.isInteger(arg) || arg > INT32_MAX || arg < INT32_MIN) throw new Error('invalid int 32: ' + arg);
}
function assertUInt32(arg) {
    if (typeof arg !== 'number') throw new Error('invalid uint 32: ' + typeof arg);
    if (!Number.isInteger(arg) || arg > UINT32_MAX || arg < 0) throw new Error('invalid uint 32: ' + arg);
}
function assertFloat32(arg) {
    if (typeof arg !== 'number') throw new Error('invalid float 32: ' + typeof arg);
    if (!Number.isFinite(arg)) return;
    if (arg > FLOAT32_MAX || arg < FLOAT32_MIN) throw new Error('invalid float 32: ' + arg);
}

// node_modules/@protobuf-ts/runtime/build/es2015/binary-writer.js
var defaultsWrite = {
    writeUnknownFields: true,
    writerFactory: () => new BinaryWriter(),
};
function binaryWriteOptions(options) {
    return options ? Object.assign(Object.assign({}, defaultsWrite), options) : defaultsWrite;
}
var BinaryWriter = class {
    constructor(textEncoder) {
        this.stack = [];
        this.textEncoder = textEncoder !== null && textEncoder !== void 0 ? textEncoder : new TextEncoder();
        this.chunks = [];
        this.buf = [];
    }
    /**
     * Return all bytes written and reset this writer.
     */
    finish() {
        this.chunks.push(new Uint8Array(this.buf));
        let len = 0;
        for (let i = 0; i < this.chunks.length; i++) len += this.chunks[i].length;
        let bytes2 = new Uint8Array(len);
        let offset = 0;
        for (let i = 0; i < this.chunks.length; i++) {
            bytes2.set(this.chunks[i], offset);
            offset += this.chunks[i].length;
        }
        this.chunks = [];
        return bytes2;
    }
    /**
     * Start a new fork for length-delimited data like a message
     * or a packed repeated field.
     *
     * Must be joined later with `join()`.
     */
    fork() {
        this.stack.push({ chunks: this.chunks, buf: this.buf });
        this.chunks = [];
        this.buf = [];
        return this;
    }
    /**
     * Join the last fork. Write its length and bytes, then
     * return to the previous state.
     */
    join() {
        let chunk = this.finish();
        let prev = this.stack.pop();
        if (!prev) throw new Error('invalid state, fork stack empty');
        this.chunks = prev.chunks;
        this.buf = prev.buf;
        this.uint32(chunk.byteLength);
        return this.raw(chunk);
    }
    /**
     * Writes a tag (field number and wire type).
     *
     * Equivalent to `uint32( (fieldNo << 3 | type) >>> 0 )`.
     *
     * Generated code should compute the tag ahead of time and call `uint32()`.
     */
    tag(fieldNo, type) {
        return this.uint32(((fieldNo << 3) | type) >>> 0);
    }
    /**
     * Write a chunk of raw bytes.
     */
    raw(chunk) {
        if (this.buf.length) {
            this.chunks.push(new Uint8Array(this.buf));
            this.buf = [];
        }
        this.chunks.push(chunk);
        return this;
    }
    /**
     * Write a `uint32` value, an unsigned 32 bit varint.
     */
    uint32(value) {
        assertUInt32(value);
        while (value > 127) {
            this.buf.push((value & 127) | 128);
            value = value >>> 7;
        }
        this.buf.push(value);
        return this;
    }
    /**
     * Write a `int32` value, a signed 32 bit varint.
     */
    int32(value) {
        assertInt32(value);
        varint32write(value, this.buf);
        return this;
    }
    /**
     * Write a `bool` value, a variant.
     */
    bool(value) {
        this.buf.push(value ? 1 : 0);
        return this;
    }
    /**
     * Write a `bytes` value, length-delimited arbitrary data.
     */
    bytes(value) {
        this.uint32(value.byteLength);
        return this.raw(value);
    }
    /**
     * Write a `string` value, length-delimited data converted to UTF-8 text.
     */
    string(value) {
        let chunk = this.textEncoder.encode(value);
        this.uint32(chunk.byteLength);
        return this.raw(chunk);
    }
    /**
     * Write a `float` value, 32-bit floating point number.
     */
    float(value) {
        assertFloat32(value);
        let chunk = new Uint8Array(4);
        new DataView(chunk.buffer).setFloat32(0, value, true);
        return this.raw(chunk);
    }
    /**
     * Write a `double` value, a 64-bit floating point number.
     */
    double(value) {
        let chunk = new Uint8Array(8);
        new DataView(chunk.buffer).setFloat64(0, value, true);
        return this.raw(chunk);
    }
    /**
     * Write a `fixed32` value, an unsigned, fixed-length 32-bit integer.
     */
    fixed32(value) {
        assertUInt32(value);
        let chunk = new Uint8Array(4);
        new DataView(chunk.buffer).setUint32(0, value, true);
        return this.raw(chunk);
    }
    /**
     * Write a `sfixed32` value, a signed, fixed-length 32-bit integer.
     */
    sfixed32(value) {
        assertInt32(value);
        let chunk = new Uint8Array(4);
        new DataView(chunk.buffer).setInt32(0, value, true);
        return this.raw(chunk);
    }
    /**
     * Write a `sint32` value, a signed, zigzag-encoded 32-bit varint.
     */
    sint32(value) {
        assertInt32(value);
        value = ((value << 1) ^ (value >> 31)) >>> 0;
        varint32write(value, this.buf);
        return this;
    }
    /**
     * Write a `fixed64` value, a signed, fixed-length 64-bit integer.
     */
    sfixed64(value) {
        let chunk = new Uint8Array(8);
        let view = new DataView(chunk.buffer);
        let long = PbLong.from(value);
        view.setInt32(0, long.lo, true);
        view.setInt32(4, long.hi, true);
        return this.raw(chunk);
    }
    /**
     * Write a `fixed64` value, an unsigned, fixed-length 64 bit integer.
     */
    fixed64(value) {
        let chunk = new Uint8Array(8);
        let view = new DataView(chunk.buffer);
        let long = PbULong.from(value);
        view.setInt32(0, long.lo, true);
        view.setInt32(4, long.hi, true);
        return this.raw(chunk);
    }
    /**
     * Write a `int64` value, a signed 64-bit varint.
     */
    int64(value) {
        let long = PbLong.from(value);
        varint64write(long.lo, long.hi, this.buf);
        return this;
    }
    /**
     * Write a `sint64` value, a signed, zig-zag-encoded 64-bit varint.
     */
    sint64(value) {
        let long = PbLong.from(value),
            sign = long.hi >> 31,
            lo = (long.lo << 1) ^ sign,
            hi = ((long.hi << 1) | (long.lo >>> 31)) ^ sign;
        varint64write(lo, hi, this.buf);
        return this;
    }
    /**
     * Write a `uint64` value, an unsigned 64-bit varint.
     */
    uint64(value) {
        let long = PbULong.from(value);
        varint64write(long.lo, long.hi, this.buf);
        return this;
    }
};

// node_modules/@protobuf-ts/runtime/build/es2015/json-format-contract.js
var defaultsWrite2 = {
    emitDefaultValues: false,
    enumAsInteger: false,
    useProtoFieldName: false,
    prettySpaces: 0,
};
var defaultsRead2 = {
    ignoreUnknownFields: false,
};
function jsonReadOptions(options) {
    return options ? Object.assign(Object.assign({}, defaultsRead2), options) : defaultsRead2;
}
function jsonWriteOptions(options) {
    return options ? Object.assign(Object.assign({}, defaultsWrite2), options) : defaultsWrite2;
}
function mergeJsonOptions(a, b) {
    var _a, _b;
    let c = Object.assign(Object.assign({}, a), b);
    c.typeRegistry = [
        ...((_a = a === null || a === void 0 ? void 0 : a.typeRegistry) !== null && _a !== void 0 ? _a : []),
        ...((_b = b === null || b === void 0 ? void 0 : b.typeRegistry) !== null && _b !== void 0 ? _b : []),
    ];
    return c;
}

// node_modules/@protobuf-ts/runtime/build/es2015/message-type-contract.js
var MESSAGE_TYPE = Symbol.for('protobuf-ts/message-type');

// node_modules/@protobuf-ts/runtime/build/es2015/lower-camel-case.js
function lowerCamelCase(snakeCase) {
    let capNext = false;
    const sb = [];
    for (let i = 0; i < snakeCase.length; i++) {
        let next = snakeCase.charAt(i);
        if (next == '_') {
            capNext = true;
        } else if (/\d/.test(next)) {
            sb.push(next);
            capNext = true;
        } else if (capNext) {
            sb.push(next.toUpperCase());
            capNext = false;
        } else if (i == 0) {
            sb.push(next.toLowerCase());
        } else {
            sb.push(next);
        }
    }
    return sb.join('');
}

// node_modules/@protobuf-ts/runtime/build/es2015/reflection-info.js
var ScalarType;
(function (ScalarType2) {
    ScalarType2[(ScalarType2['DOUBLE'] = 1)] = 'DOUBLE';
    ScalarType2[(ScalarType2['FLOAT'] = 2)] = 'FLOAT';
    ScalarType2[(ScalarType2['INT64'] = 3)] = 'INT64';
    ScalarType2[(ScalarType2['UINT64'] = 4)] = 'UINT64';
    ScalarType2[(ScalarType2['INT32'] = 5)] = 'INT32';
    ScalarType2[(ScalarType2['FIXED64'] = 6)] = 'FIXED64';
    ScalarType2[(ScalarType2['FIXED32'] = 7)] = 'FIXED32';
    ScalarType2[(ScalarType2['BOOL'] = 8)] = 'BOOL';
    ScalarType2[(ScalarType2['STRING'] = 9)] = 'STRING';
    ScalarType2[(ScalarType2['BYTES'] = 12)] = 'BYTES';
    ScalarType2[(ScalarType2['UINT32'] = 13)] = 'UINT32';
    ScalarType2[(ScalarType2['SFIXED32'] = 15)] = 'SFIXED32';
    ScalarType2[(ScalarType2['SFIXED64'] = 16)] = 'SFIXED64';
    ScalarType2[(ScalarType2['SINT32'] = 17)] = 'SINT32';
    ScalarType2[(ScalarType2['SINT64'] = 18)] = 'SINT64';
})(ScalarType || (ScalarType = {}));
var LongType;
(function (LongType2) {
    LongType2[(LongType2['BIGINT'] = 0)] = 'BIGINT';
    LongType2[(LongType2['STRING'] = 1)] = 'STRING';
    LongType2[(LongType2['NUMBER'] = 2)] = 'NUMBER';
})(LongType || (LongType = {}));
var RepeatType;
(function (RepeatType2) {
    RepeatType2[(RepeatType2['NO'] = 0)] = 'NO';
    RepeatType2[(RepeatType2['PACKED'] = 1)] = 'PACKED';
    RepeatType2[(RepeatType2['UNPACKED'] = 2)] = 'UNPACKED';
})(RepeatType || (RepeatType = {}));
function normalizeFieldInfo(field) {
    var _a, _b, _c, _d;
    field.localName = (_a = field.localName) !== null && _a !== void 0 ? _a : lowerCamelCase(field.name);
    field.jsonName = (_b = field.jsonName) !== null && _b !== void 0 ? _b : lowerCamelCase(field.name);
    field.repeat = (_c = field.repeat) !== null && _c !== void 0 ? _c : RepeatType.NO;
    field.opt =
        (_d = field.opt) !== null && _d !== void 0
            ? _d
            : field.repeat
              ? false
              : field.oneof
                ? false
                : field.kind == 'message';
    return field;
}

// node_modules/@protobuf-ts/runtime/build/es2015/oneof.js
function isOneofGroup(any) {
    if (typeof any != 'object' || any === null || !any.hasOwnProperty('oneofKind')) {
        return false;
    }
    switch (typeof any.oneofKind) {
        case 'string':
            if (any[any.oneofKind] === void 0) return false;
            return Object.keys(any).length == 2;
        case 'undefined':
            return Object.keys(any).length == 1;
        default:
            return false;
    }
}

// node_modules/@protobuf-ts/runtime/build/es2015/reflection-type-check.js
var ReflectionTypeCheck = class {
    constructor(info) {
        var _a;
        this.fields = (_a = info.fields) !== null && _a !== void 0 ? _a : [];
    }
    prepare() {
        if (this.data) return;
        const req = [],
            known = [],
            oneofs = [];
        for (let field of this.fields) {
            if (field.oneof) {
                if (!oneofs.includes(field.oneof)) {
                    oneofs.push(field.oneof);
                    req.push(field.oneof);
                    known.push(field.oneof);
                }
            } else {
                known.push(field.localName);
                switch (field.kind) {
                    case 'scalar':
                    case 'enum':
                        if (!field.opt || field.repeat) req.push(field.localName);
                        break;
                    case 'message':
                        if (field.repeat) req.push(field.localName);
                        break;
                    case 'map':
                        req.push(field.localName);
                        break;
                }
            }
        }
        this.data = { req, known, oneofs: Object.values(oneofs) };
    }
    /**
     * Is the argument a valid message as specified by the
     * reflection information?
     *
     * Checks all field types recursively. The `depth`
     * specifies how deep into the structure the check will be.
     *
     * With a depth of 0, only the presence of fields
     * is checked.
     *
     * With a depth of 1 or more, the field types are checked.
     *
     * With a depth of 2 or more, the members of map, repeated
     * and message fields are checked.
     *
     * Message fields will be checked recursively with depth - 1.
     *
     * The number of map entries / repeated values being checked
     * is < depth.
     */
    is(message, depth, allowExcessProperties = false) {
        if (depth < 0) return true;
        if (message === null || message === void 0 || typeof message != 'object') return false;
        this.prepare();
        let keys = Object.keys(message),
            data = this.data;
        if (keys.length < data.req.length || data.req.some((n) => !keys.includes(n))) return false;
        if (!allowExcessProperties) {
            if (keys.some((k) => !data.known.includes(k))) return false;
        }
        if (depth < 1) {
            return true;
        }
        for (const name of data.oneofs) {
            const group = message[name];
            if (!isOneofGroup(group)) return false;
            if (group.oneofKind === void 0) continue;
            const field = this.fields.find((f) => f.localName === group.oneofKind);
            if (!field) return false;
            if (!this.field(group[group.oneofKind], field, allowExcessProperties, depth)) return false;
        }
        for (const field of this.fields) {
            if (field.oneof !== void 0) continue;
            if (!this.field(message[field.localName], field, allowExcessProperties, depth)) return false;
        }
        return true;
    }
    field(arg, field, allowExcessProperties, depth) {
        let repeated = field.repeat;
        switch (field.kind) {
            case 'scalar':
                if (arg === void 0) return field.opt;
                if (repeated) return this.scalars(arg, field.T, depth, field.L);
                return this.scalar(arg, field.T, field.L);
            case 'enum':
                if (arg === void 0) return field.opt;
                if (repeated) return this.scalars(arg, ScalarType.INT32, depth);
                return this.scalar(arg, ScalarType.INT32);
            case 'message':
                if (arg === void 0) return true;
                if (repeated) return this.messages(arg, field.T(), allowExcessProperties, depth);
                return this.message(arg, field.T(), allowExcessProperties, depth);
            case 'map':
                if (typeof arg != 'object' || arg === null) return false;
                if (depth < 2) return true;
                if (!this.mapKeys(arg, field.K, depth)) return false;
                switch (field.V.kind) {
                    case 'scalar':
                        return this.scalars(Object.values(arg), field.V.T, depth, field.V.L);
                    case 'enum':
                        return this.scalars(Object.values(arg), ScalarType.INT32, depth);
                    case 'message':
                        return this.messages(Object.values(arg), field.V.T(), allowExcessProperties, depth);
                }
                break;
        }
        return true;
    }
    message(arg, type, allowExcessProperties, depth) {
        if (allowExcessProperties) {
            return type.isAssignable(arg, depth);
        }
        return type.is(arg, depth);
    }
    messages(arg, type, allowExcessProperties, depth) {
        if (!Array.isArray(arg)) return false;
        if (depth < 2) return true;
        if (allowExcessProperties) {
            for (let i = 0; i < arg.length && i < depth; i++) if (!type.isAssignable(arg[i], depth - 1)) return false;
        } else {
            for (let i = 0; i < arg.length && i < depth; i++) if (!type.is(arg[i], depth - 1)) return false;
        }
        return true;
    }
    scalar(arg, type, longType) {
        let argType = typeof arg;
        switch (type) {
            case ScalarType.UINT64:
            case ScalarType.FIXED64:
            case ScalarType.INT64:
            case ScalarType.SFIXED64:
            case ScalarType.SINT64:
                switch (longType) {
                    case LongType.BIGINT:
                        return argType == 'bigint';
                    case LongType.NUMBER:
                        return argType == 'number' && !isNaN(arg);
                    default:
                        return argType == 'string';
                }
            case ScalarType.BOOL:
                return argType == 'boolean';
            case ScalarType.STRING:
                return argType == 'string';
            case ScalarType.BYTES:
                return arg instanceof Uint8Array;
            case ScalarType.DOUBLE:
            case ScalarType.FLOAT:
                return argType == 'number' && !isNaN(arg);
            default:
                return argType == 'number' && Number.isInteger(arg);
        }
    }
    scalars(arg, type, depth, longType) {
        if (!Array.isArray(arg)) return false;
        if (depth < 2) return true;
        if (Array.isArray(arg)) {
            for (let i = 0; i < arg.length && i < depth; i++) if (!this.scalar(arg[i], type, longType)) return false;
        }
        return true;
    }
    mapKeys(map, type, depth) {
        let keys = Object.keys(map);
        switch (type) {
            case ScalarType.INT32:
            case ScalarType.FIXED32:
            case ScalarType.SFIXED32:
            case ScalarType.SINT32:
            case ScalarType.UINT32:
                return this.scalars(
                    keys.slice(0, depth).map((k) => parseInt(k)),
                    type,
                    depth
                );
            case ScalarType.BOOL:
                return this.scalars(
                    keys.slice(0, depth).map((k) => (k == 'true' ? true : k == 'false' ? false : k)),
                    type,
                    depth
                );
            default:
                return this.scalars(keys, type, depth, LongType.STRING);
        }
    }
};

// node_modules/@protobuf-ts/runtime/build/es2015/reflection-long-convert.js
function reflectionLongConvert(long, type) {
    switch (type) {
        case LongType.BIGINT:
            return long.toBigInt();
        case LongType.NUMBER:
            return long.toNumber();
        default:
            return long.toString();
    }
}

// node_modules/@protobuf-ts/runtime/build/es2015/reflection-json-reader.js
var ReflectionJsonReader = class {
    constructor(info) {
        this.info = info;
    }
    prepare() {
        var _a;
        if (this.fMap === void 0) {
            this.fMap = {};
            const fieldsInput = (_a = this.info.fields) !== null && _a !== void 0 ? _a : [];
            for (const field of fieldsInput) {
                this.fMap[field.name] = field;
                this.fMap[field.jsonName] = field;
                this.fMap[field.localName] = field;
            }
        }
    }
    // Cannot parse JSON <type of jsonValue> for <type name>#<fieldName>.
    assert(condition, fieldName, jsonValue) {
        if (!condition) {
            let what = typeofJsonValue(jsonValue);
            if (what == 'number' || what == 'boolean') what = jsonValue.toString();
            throw new Error(`Cannot parse JSON ${what} for ${this.info.typeName}#${fieldName}`);
        }
    }
    /**
     * Reads a message from canonical JSON format into the target message.
     *
     * Repeated fields are appended. Map entries are added, overwriting
     * existing keys.
     *
     * If a message field is already present, it will be merged with the
     * new data.
     */
    read(input, message, options) {
        this.prepare();
        const oneofsHandled = [];
        for (const [jsonKey, jsonValue] of Object.entries(input)) {
            const field = this.fMap[jsonKey];
            if (!field) {
                if (!options.ignoreUnknownFields)
                    throw new Error(
                        `Found unknown field while reading ${this.info.typeName} from JSON format. JSON key: ${jsonKey}`
                    );
                continue;
            }
            const localName = field.localName;
            let target;
            if (field.oneof) {
                if (jsonValue === null && (field.kind !== 'enum' || field.T()[0] !== 'google.protobuf.NullValue')) {
                    continue;
                }
                if (oneofsHandled.includes(field.oneof))
                    throw new Error(
                        `Multiple members of the oneof group "${field.oneof}" of ${this.info.typeName} are present in JSON.`
                    );
                oneofsHandled.push(field.oneof);
                target = message[field.oneof] = {
                    oneofKind: localName,
                };
            } else {
                target = message;
            }
            if (field.kind == 'map') {
                if (jsonValue === null) {
                    continue;
                }
                this.assert(isJsonObject(jsonValue), field.name, jsonValue);
                const fieldObj = target[localName];
                for (const [jsonObjKey, jsonObjValue] of Object.entries(jsonValue)) {
                    this.assert(jsonObjValue !== null, field.name + ' map value', null);
                    let val;
                    switch (field.V.kind) {
                        case 'message':
                            val = field.V.T().internalJsonRead(jsonObjValue, options);
                            break;
                        case 'enum':
                            val = this.enum(field.V.T(), jsonObjValue, field.name, options.ignoreUnknownFields);
                            if (val === false) continue;
                            break;
                        case 'scalar':
                            val = this.scalar(jsonObjValue, field.V.T, field.V.L, field.name);
                            break;
                    }
                    this.assert(val !== void 0, field.name + ' map value', jsonObjValue);
                    let key = jsonObjKey;
                    if (field.K == ScalarType.BOOL) key = key == 'true' ? true : key == 'false' ? false : key;
                    key = this.scalar(key, field.K, LongType.STRING, field.name).toString();
                    fieldObj[key] = val;
                }
            } else if (field.repeat) {
                if (jsonValue === null) continue;
                this.assert(Array.isArray(jsonValue), field.name, jsonValue);
                const fieldArr = target[localName];
                for (const jsonItem of jsonValue) {
                    this.assert(jsonItem !== null, field.name, null);
                    let val;
                    switch (field.kind) {
                        case 'message':
                            val = field.T().internalJsonRead(jsonItem, options);
                            break;
                        case 'enum':
                            val = this.enum(field.T(), jsonItem, field.name, options.ignoreUnknownFields);
                            if (val === false) continue;
                            break;
                        case 'scalar':
                            val = this.scalar(jsonItem, field.T, field.L, field.name);
                            break;
                    }
                    this.assert(val !== void 0, field.name, jsonValue);
                    fieldArr.push(val);
                }
            } else {
                switch (field.kind) {
                    case 'message':
                        if (jsonValue === null && field.T().typeName != 'google.protobuf.Value') {
                            this.assert(field.oneof === void 0, field.name + ' (oneof member)', null);
                            continue;
                        }
                        target[localName] = field.T().internalJsonRead(jsonValue, options, target[localName]);
                        break;
                    case 'enum':
                        let val = this.enum(field.T(), jsonValue, field.name, options.ignoreUnknownFields);
                        if (val === false) continue;
                        target[localName] = val;
                        break;
                    case 'scalar':
                        target[localName] = this.scalar(jsonValue, field.T, field.L, field.name);
                        break;
                }
            }
        }
    }
    /**
     * Returns `false` for unrecognized string representations.
     *
     * google.protobuf.NullValue accepts only JSON `null` (or the old `"NULL_VALUE"`).
     */
    enum(type, json, fieldName, ignoreUnknownFields) {
        if (type[0] == 'google.protobuf.NullValue')
            assert(
                json === null || json === 'NULL_VALUE',
                `Unable to parse field ${this.info.typeName}#${fieldName}, enum ${type[0]} only accepts null.`
            );
        if (json === null) return 0;
        switch (typeof json) {
            case 'number':
                assert(
                    Number.isInteger(json),
                    `Unable to parse field ${this.info.typeName}#${fieldName}, enum can only be integral number, got ${json}.`
                );
                return json;
            case 'string':
                let localEnumName = json;
                if (type[2] && json.substring(0, type[2].length) === type[2])
                    localEnumName = json.substring(type[2].length);
                let enumNumber = type[1][localEnumName];
                if (typeof enumNumber === 'undefined' && ignoreUnknownFields) {
                    return false;
                }
                assert(
                    typeof enumNumber == 'number',
                    `Unable to parse field ${this.info.typeName}#${fieldName}, enum ${type[0]} has no value for "${json}".`
                );
                return enumNumber;
        }
        assert(
            false,
            `Unable to parse field ${this.info.typeName}#${fieldName}, cannot parse enum value from ${typeof json}".`
        );
    }
    scalar(json, type, longType, fieldName) {
        let e;
        try {
            switch (type) {
                case ScalarType.DOUBLE:
                case ScalarType.FLOAT:
                    if (json === null) return 0;
                    if (json === 'NaN') return Number.NaN;
                    if (json === 'Infinity') return Number.POSITIVE_INFINITY;
                    if (json === '-Infinity') return Number.NEGATIVE_INFINITY;
                    if (json === '') {
                        e = 'empty string';
                        break;
                    }
                    if (typeof json == 'string' && json.trim().length !== json.length) {
                        e = 'extra whitespace';
                        break;
                    }
                    if (typeof json != 'string' && typeof json != 'number') {
                        break;
                    }
                    let float = Number(json);
                    if (Number.isNaN(float)) {
                        e = 'not a number';
                        break;
                    }
                    if (!Number.isFinite(float)) {
                        e = 'too large or small';
                        break;
                    }
                    if (type == ScalarType.FLOAT) assertFloat32(float);
                    return float;
                case ScalarType.INT32:
                case ScalarType.FIXED32:
                case ScalarType.SFIXED32:
                case ScalarType.SINT32:
                case ScalarType.UINT32:
                    if (json === null) return 0;
                    let int32;
                    if (typeof json == 'number') int32 = json;
                    else if (json === '') e = 'empty string';
                    else if (typeof json == 'string') {
                        if (json.trim().length !== json.length) e = 'extra whitespace';
                        else int32 = Number(json);
                    }
                    if (int32 === void 0) break;
                    if (type == ScalarType.UINT32) assertUInt32(int32);
                    else assertInt32(int32);
                    return int32;
                case ScalarType.INT64:
                case ScalarType.SFIXED64:
                case ScalarType.SINT64:
                    if (json === null) return reflectionLongConvert(PbLong.ZERO, longType);
                    if (typeof json != 'number' && typeof json != 'string') break;
                    return reflectionLongConvert(PbLong.from(json), longType);
                case ScalarType.FIXED64:
                case ScalarType.UINT64:
                    if (json === null) return reflectionLongConvert(PbULong.ZERO, longType);
                    if (typeof json != 'number' && typeof json != 'string') break;
                    return reflectionLongConvert(PbULong.from(json), longType);
                case ScalarType.BOOL:
                    if (json === null) return false;
                    if (typeof json !== 'boolean') break;
                    return json;
                case ScalarType.STRING:
                    if (json === null) return '';
                    if (typeof json !== 'string') {
                        e = 'extra whitespace';
                        break;
                    }
                    try {
                        encodeURIComponent(json);
                    } catch (e2) {
                        e2 = 'invalid UTF8';
                        break;
                    }
                    return json;
                case ScalarType.BYTES:
                    if (json === null || json === '') return new Uint8Array(0);
                    if (typeof json !== 'string') break;
                    return base64decode(json);
            }
        } catch (error) {
            e = error.message;
        }
        this.assert(false, fieldName + (e ? ' - ' + e : ''), json);
    }
};

// node_modules/@protobuf-ts/runtime/build/es2015/reflection-json-writer.js
var ReflectionJsonWriter = class {
    constructor(info) {
        var _a;
        this.fields = (_a = info.fields) !== null && _a !== void 0 ? _a : [];
    }
    /**
     * Converts the message to a JSON object, based on the field descriptors.
     */
    write(message, options) {
        const json = {},
            source = message;
        for (const field of this.fields) {
            if (!field.oneof) {
                let jsonValue2 = this.field(field, source[field.localName], options);
                if (jsonValue2 !== void 0) json[options.useProtoFieldName ? field.name : field.jsonName] = jsonValue2;
                continue;
            }
            const group = source[field.oneof];
            if (group.oneofKind !== field.localName) continue;
            const opt =
                field.kind == 'scalar' || field.kind == 'enum'
                    ? Object.assign(Object.assign({}, options), { emitDefaultValues: true })
                    : options;
            let jsonValue = this.field(field, group[field.localName], opt);
            assert(jsonValue !== void 0);
            json[options.useProtoFieldName ? field.name : field.jsonName] = jsonValue;
        }
        return json;
    }
    field(field, value, options) {
        let jsonValue = void 0;
        if (field.kind == 'map') {
            assert(typeof value == 'object' && value !== null);
            const jsonObj = {};
            switch (field.V.kind) {
                case 'scalar':
                    for (const [entryKey, entryValue] of Object.entries(value)) {
                        const val = this.scalar(field.V.T, entryValue, field.name, false, true);
                        assert(val !== void 0);
                        jsonObj[entryKey.toString()] = val;
                    }
                    break;
                case 'message':
                    const messageType = field.V.T();
                    for (const [entryKey, entryValue] of Object.entries(value)) {
                        const val = this.message(messageType, entryValue, field.name, options);
                        assert(val !== void 0);
                        jsonObj[entryKey.toString()] = val;
                    }
                    break;
                case 'enum':
                    const enumInfo = field.V.T();
                    for (const [entryKey, entryValue] of Object.entries(value)) {
                        assert(entryValue === void 0 || typeof entryValue == 'number');
                        const val = this.enum(enumInfo, entryValue, field.name, false, true, options.enumAsInteger);
                        assert(val !== void 0);
                        jsonObj[entryKey.toString()] = val;
                    }
                    break;
            }
            if (options.emitDefaultValues || Object.keys(jsonObj).length > 0) jsonValue = jsonObj;
        } else if (field.repeat) {
            assert(Array.isArray(value));
            const jsonArr = [];
            switch (field.kind) {
                case 'scalar':
                    for (let i = 0; i < value.length; i++) {
                        const val = this.scalar(field.T, value[i], field.name, field.opt, true);
                        assert(val !== void 0);
                        jsonArr.push(val);
                    }
                    break;
                case 'enum':
                    const enumInfo = field.T();
                    for (let i = 0; i < value.length; i++) {
                        assert(value[i] === void 0 || typeof value[i] == 'number');
                        const val = this.enum(enumInfo, value[i], field.name, field.opt, true, options.enumAsInteger);
                        assert(val !== void 0);
                        jsonArr.push(val);
                    }
                    break;
                case 'message':
                    const messageType = field.T();
                    for (let i = 0; i < value.length; i++) {
                        const val = this.message(messageType, value[i], field.name, options);
                        assert(val !== void 0);
                        jsonArr.push(val);
                    }
                    break;
            }
            if (options.emitDefaultValues || jsonArr.length > 0 || options.emitDefaultValues) jsonValue = jsonArr;
        } else {
            switch (field.kind) {
                case 'scalar':
                    jsonValue = this.scalar(field.T, value, field.name, field.opt, options.emitDefaultValues);
                    break;
                case 'enum':
                    jsonValue = this.enum(
                        field.T(),
                        value,
                        field.name,
                        field.opt,
                        options.emitDefaultValues,
                        options.enumAsInteger
                    );
                    break;
                case 'message':
                    jsonValue = this.message(field.T(), value, field.name, options);
                    break;
            }
        }
        return jsonValue;
    }
    /**
     * Returns `null` as the default for google.protobuf.NullValue.
     */
    enum(type, value, fieldName, optional, emitDefaultValues, enumAsInteger) {
        if (type[0] == 'google.protobuf.NullValue') return !emitDefaultValues && !optional ? void 0 : null;
        if (value === void 0) {
            assert(optional);
            return void 0;
        }
        if (value === 0 && !emitDefaultValues && !optional) return void 0;
        assert(typeof value == 'number');
        assert(Number.isInteger(value));
        if (enumAsInteger || !type[1].hasOwnProperty(value)) return value;
        if (type[2]) return type[2] + type[1][value];
        return type[1][value];
    }
    message(type, value, fieldName, options) {
        if (value === void 0) return options.emitDefaultValues ? null : void 0;
        return type.internalJsonWrite(value, options);
    }
    scalar(type, value, fieldName, optional, emitDefaultValues) {
        if (value === void 0) {
            assert(optional);
            return void 0;
        }
        const ed = emitDefaultValues || optional;
        switch (type) {
            case ScalarType.INT32:
            case ScalarType.SFIXED32:
            case ScalarType.SINT32:
                if (value === 0) return ed ? 0 : void 0;
                assertInt32(value);
                return value;
            case ScalarType.FIXED32:
            case ScalarType.UINT32:
                if (value === 0) return ed ? 0 : void 0;
                assertUInt32(value);
                return value;
            case ScalarType.FLOAT:
                assertFloat32(value);
            case ScalarType.DOUBLE:
                if (value === 0) return ed ? 0 : void 0;
                assert(typeof value == 'number');
                if (Number.isNaN(value)) return 'NaN';
                if (value === Number.POSITIVE_INFINITY) return 'Infinity';
                if (value === Number.NEGATIVE_INFINITY) return '-Infinity';
                return value;
            case ScalarType.STRING:
                if (value === '') return ed ? '' : void 0;
                assert(typeof value == 'string');
                return value;
            case ScalarType.BOOL:
                if (value === false) return ed ? false : void 0;
                assert(typeof value == 'boolean');
                return value;
            case ScalarType.UINT64:
            case ScalarType.FIXED64:
                assert(typeof value == 'number' || typeof value == 'string' || typeof value == 'bigint');
                let ulong = PbULong.from(value);
                if (ulong.isZero() && !ed) return void 0;
                return ulong.toString();
            case ScalarType.INT64:
            case ScalarType.SFIXED64:
            case ScalarType.SINT64:
                assert(typeof value == 'number' || typeof value == 'string' || typeof value == 'bigint');
                let long = PbLong.from(value);
                if (long.isZero() && !ed) return void 0;
                return long.toString();
            case ScalarType.BYTES:
                assert(value instanceof Uint8Array);
                if (!value.byteLength) return ed ? '' : void 0;
                return base64encode(value);
        }
    }
};

// node_modules/@protobuf-ts/runtime/build/es2015/reflection-scalar-default.js
function reflectionScalarDefault(type, longType = LongType.STRING) {
    switch (type) {
        case ScalarType.BOOL:
            return false;
        case ScalarType.UINT64:
        case ScalarType.FIXED64:
            return reflectionLongConvert(PbULong.ZERO, longType);
        case ScalarType.INT64:
        case ScalarType.SFIXED64:
        case ScalarType.SINT64:
            return reflectionLongConvert(PbLong.ZERO, longType);
        case ScalarType.DOUBLE:
        case ScalarType.FLOAT:
            return 0;
        case ScalarType.BYTES:
            return new Uint8Array(0);
        case ScalarType.STRING:
            return '';
        default:
            return 0;
    }
}

// node_modules/@protobuf-ts/runtime/build/es2015/reflection-binary-reader.js
var ReflectionBinaryReader = class {
    constructor(info) {
        this.info = info;
    }
    prepare() {
        var _a;
        if (!this.fieldNoToField) {
            const fieldsInput = (_a = this.info.fields) !== null && _a !== void 0 ? _a : [];
            this.fieldNoToField = new Map(fieldsInput.map((field) => [field.no, field]));
        }
    }
    /**
     * Reads a message from binary format into the target message.
     *
     * Repeated fields are appended. Map entries are added, overwriting
     * existing keys.
     *
     * If a message field is already present, it will be merged with the
     * new data.
     */
    read(reader, message, options, length) {
        this.prepare();
        const end = length === void 0 ? reader.len : reader.pos + length;
        while (reader.pos < end) {
            const [fieldNo, wireType] = reader.tag(),
                field = this.fieldNoToField.get(fieldNo);
            if (!field) {
                let u = options.readUnknownField;
                if (u == 'throw')
                    throw new Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.info.typeName}`);
                let d = reader.skip(wireType);
                if (u !== false)
                    (u === true ? UnknownFieldHandler.onRead : u)(this.info.typeName, message, fieldNo, wireType, d);
                continue;
            }
            let target = message,
                repeated = field.repeat,
                localName = field.localName;
            if (field.oneof) {
                target = target[field.oneof];
                if (target.oneofKind !== localName)
                    target = message[field.oneof] = {
                        oneofKind: localName,
                    };
            }
            switch (field.kind) {
                case 'scalar':
                case 'enum':
                    let T = field.kind == 'enum' ? ScalarType.INT32 : field.T;
                    let L = field.kind == 'scalar' ? field.L : void 0;
                    if (repeated) {
                        let arr = target[localName];
                        if (wireType == WireType.LengthDelimited && T != ScalarType.STRING && T != ScalarType.BYTES) {
                            let e = reader.uint32() + reader.pos;
                            while (reader.pos < e) arr.push(this.scalar(reader, T, L));
                        } else arr.push(this.scalar(reader, T, L));
                    } else target[localName] = this.scalar(reader, T, L);
                    break;
                case 'message':
                    if (repeated) {
                        let arr = target[localName];
                        let msg = field.T().internalBinaryRead(reader, reader.uint32(), options);
                        arr.push(msg);
                    } else
                        target[localName] = field
                            .T()
                            .internalBinaryRead(reader, reader.uint32(), options, target[localName]);
                    break;
                case 'map':
                    let [mapKey, mapVal] = this.mapEntry(field, reader, options);
                    target[localName][mapKey] = mapVal;
                    break;
            }
        }
    }
    /**
     * Read a map field, expecting key field = 1, value field = 2
     */
    mapEntry(field, reader, options) {
        let length = reader.uint32();
        let end = reader.pos + length;
        let key = void 0;
        let val = void 0;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case 1:
                    if (field.K == ScalarType.BOOL) key = reader.bool().toString();
                    else key = this.scalar(reader, field.K, LongType.STRING);
                    break;
                case 2:
                    switch (field.V.kind) {
                        case 'scalar':
                            val = this.scalar(reader, field.V.T, field.V.L);
                            break;
                        case 'enum':
                            val = reader.int32();
                            break;
                        case 'message':
                            val = field.V.T().internalBinaryRead(reader, reader.uint32(), options);
                            break;
                    }
                    break;
                default:
                    throw new Error(
                        `Unknown field ${fieldNo} (wire type ${wireType}) in map entry for ${this.info.typeName}#${field.name}`
                    );
            }
        }
        if (key === void 0) {
            let keyRaw = reflectionScalarDefault(field.K);
            key = field.K == ScalarType.BOOL ? keyRaw.toString() : keyRaw;
        }
        if (val === void 0)
            switch (field.V.kind) {
                case 'scalar':
                    val = reflectionScalarDefault(field.V.T, field.V.L);
                    break;
                case 'enum':
                    val = 0;
                    break;
                case 'message':
                    val = field.V.T().create();
                    break;
            }
        return [key, val];
    }
    scalar(reader, type, longType) {
        switch (type) {
            case ScalarType.INT32:
                return reader.int32();
            case ScalarType.STRING:
                return reader.string();
            case ScalarType.BOOL:
                return reader.bool();
            case ScalarType.DOUBLE:
                return reader.double();
            case ScalarType.FLOAT:
                return reader.float();
            case ScalarType.INT64:
                return reflectionLongConvert(reader.int64(), longType);
            case ScalarType.UINT64:
                return reflectionLongConvert(reader.uint64(), longType);
            case ScalarType.FIXED64:
                return reflectionLongConvert(reader.fixed64(), longType);
            case ScalarType.FIXED32:
                return reader.fixed32();
            case ScalarType.BYTES:
                return reader.bytes();
            case ScalarType.UINT32:
                return reader.uint32();
            case ScalarType.SFIXED32:
                return reader.sfixed32();
            case ScalarType.SFIXED64:
                return reflectionLongConvert(reader.sfixed64(), longType);
            case ScalarType.SINT32:
                return reader.sint32();
            case ScalarType.SINT64:
                return reflectionLongConvert(reader.sint64(), longType);
        }
    }
};

// node_modules/@protobuf-ts/runtime/build/es2015/reflection-binary-writer.js
var ReflectionBinaryWriter = class {
    constructor(info) {
        this.info = info;
    }
    prepare() {
        if (!this.fields) {
            const fieldsInput = this.info.fields ? this.info.fields.concat() : [];
            this.fields = fieldsInput.sort((a, b) => a.no - b.no);
        }
    }
    /**
     * Writes the message to binary format.
     */
    write(message, writer, options) {
        this.prepare();
        for (const field of this.fields) {
            let value,
                emitDefault,
                repeated = field.repeat,
                localName = field.localName;
            if (field.oneof) {
                const group = message[field.oneof];
                if (group.oneofKind !== localName) continue;
                value = group[localName];
                emitDefault = true;
            } else {
                value = message[localName];
                emitDefault = false;
            }
            switch (field.kind) {
                case 'scalar':
                case 'enum':
                    let T = field.kind == 'enum' ? ScalarType.INT32 : field.T;
                    if (repeated) {
                        assert(Array.isArray(value));
                        if (repeated == RepeatType.PACKED) this.packed(writer, T, field.no, value);
                        else for (const item of value) this.scalar(writer, T, field.no, item, true);
                    } else if (value === void 0) assert(field.opt);
                    else this.scalar(writer, T, field.no, value, emitDefault || field.opt);
                    break;
                case 'message':
                    if (repeated) {
                        assert(Array.isArray(value));
                        for (const item of value) this.message(writer, options, field.T(), field.no, item);
                    } else {
                        this.message(writer, options, field.T(), field.no, value);
                    }
                    break;
                case 'map':
                    assert(typeof value == 'object' && value !== null);
                    for (const [key, val] of Object.entries(value)) this.mapEntry(writer, options, field, key, val);
                    break;
            }
        }
        let u = options.writeUnknownFields;
        if (u !== false) (u === true ? UnknownFieldHandler.onWrite : u)(this.info.typeName, message, writer);
    }
    mapEntry(writer, options, field, key, value) {
        writer.tag(field.no, WireType.LengthDelimited);
        writer.fork();
        let keyValue = key;
        switch (field.K) {
            case ScalarType.INT32:
            case ScalarType.FIXED32:
            case ScalarType.UINT32:
            case ScalarType.SFIXED32:
            case ScalarType.SINT32:
                keyValue = Number.parseInt(key);
                break;
            case ScalarType.BOOL:
                assert(key == 'true' || key == 'false');
                keyValue = key == 'true';
                break;
        }
        this.scalar(writer, field.K, 1, keyValue, true);
        switch (field.V.kind) {
            case 'scalar':
                this.scalar(writer, field.V.T, 2, value, true);
                break;
            case 'enum':
                this.scalar(writer, ScalarType.INT32, 2, value, true);
                break;
            case 'message':
                this.message(writer, options, field.V.T(), 2, value);
                break;
        }
        writer.join();
    }
    message(writer, options, handler, fieldNo, value) {
        if (value === void 0) return;
        handler.internalBinaryWrite(value, writer.tag(fieldNo, WireType.LengthDelimited).fork(), options);
        writer.join();
    }
    /**
     * Write a single scalar value.
     */
    scalar(writer, type, fieldNo, value, emitDefault) {
        let [wireType, method, isDefault] = this.scalarInfo(type, value);
        if (!isDefault || emitDefault) {
            writer.tag(fieldNo, wireType);
            writer[method](value);
        }
    }
    /**
     * Write an array of scalar values in packed format.
     */
    packed(writer, type, fieldNo, value) {
        if (!value.length) return;
        assert(type !== ScalarType.BYTES && type !== ScalarType.STRING);
        writer.tag(fieldNo, WireType.LengthDelimited);
        writer.fork();
        let [, method] = this.scalarInfo(type);
        for (let i = 0; i < value.length; i++) writer[method](value[i]);
        writer.join();
    }
    /**
     * Get information for writing a scalar value.
     *
     * Returns tuple:
     * [0]: appropriate WireType
     * [1]: name of the appropriate method of IBinaryWriter
     * [2]: whether the given value is a default value
     *
     * If argument `value` is omitted, [2] is always false.
     */
    scalarInfo(type, value) {
        let t = WireType.Varint;
        let m;
        let i = value === void 0;
        let d = value === 0;
        switch (type) {
            case ScalarType.INT32:
                m = 'int32';
                break;
            case ScalarType.STRING:
                d = i || !value.length;
                t = WireType.LengthDelimited;
                m = 'string';
                break;
            case ScalarType.BOOL:
                d = value === false;
                m = 'bool';
                break;
            case ScalarType.UINT32:
                m = 'uint32';
                break;
            case ScalarType.DOUBLE:
                t = WireType.Bit64;
                m = 'double';
                break;
            case ScalarType.FLOAT:
                t = WireType.Bit32;
                m = 'float';
                break;
            case ScalarType.INT64:
                d = i || PbLong.from(value).isZero();
                m = 'int64';
                break;
            case ScalarType.UINT64:
                d = i || PbULong.from(value).isZero();
                m = 'uint64';
                break;
            case ScalarType.FIXED64:
                d = i || PbULong.from(value).isZero();
                t = WireType.Bit64;
                m = 'fixed64';
                break;
            case ScalarType.BYTES:
                d = i || !value.byteLength;
                t = WireType.LengthDelimited;
                m = 'bytes';
                break;
            case ScalarType.FIXED32:
                t = WireType.Bit32;
                m = 'fixed32';
                break;
            case ScalarType.SFIXED32:
                t = WireType.Bit32;
                m = 'sfixed32';
                break;
            case ScalarType.SFIXED64:
                d = i || PbLong.from(value).isZero();
                t = WireType.Bit64;
                m = 'sfixed64';
                break;
            case ScalarType.SINT32:
                m = 'sint32';
                break;
            case ScalarType.SINT64:
                d = i || PbLong.from(value).isZero();
                m = 'sint64';
                break;
        }
        return [t, m, i || d];
    }
};

// node_modules/@protobuf-ts/runtime/build/es2015/reflection-create.js
function reflectionCreate(type) {
    const msg = type.messagePrototype
        ? Object.create(type.messagePrototype)
        : Object.defineProperty({}, MESSAGE_TYPE, { value: type });
    for (let field of type.fields) {
        let name = field.localName;
        if (field.opt) continue;
        if (field.oneof) msg[field.oneof] = { oneofKind: void 0 };
        else if (field.repeat) msg[name] = [];
        else
            switch (field.kind) {
                case 'scalar':
                    msg[name] = reflectionScalarDefault(field.T, field.L);
                    break;
                case 'enum':
                    msg[name] = 0;
                    break;
                case 'map':
                    msg[name] = {};
                    break;
            }
    }
    return msg;
}

// node_modules/@protobuf-ts/runtime/build/es2015/reflection-merge-partial.js
function reflectionMergePartial(info, target, source) {
    let fieldValue,
        input = source,
        output2;
    for (let field of info.fields) {
        let name = field.localName;
        if (field.oneof) {
            const group = input[field.oneof];
            if ((group === null || group === void 0 ? void 0 : group.oneofKind) == void 0) {
                continue;
            }
            fieldValue = group[name];
            output2 = target[field.oneof];
            output2.oneofKind = group.oneofKind;
            if (fieldValue == void 0) {
                delete output2[name];
                continue;
            }
        } else {
            fieldValue = input[name];
            output2 = target;
            if (fieldValue == void 0) {
                continue;
            }
        }
        if (field.repeat) output2[name].length = fieldValue.length;
        switch (field.kind) {
            case 'scalar':
            case 'enum':
                if (field.repeat) for (let i = 0; i < fieldValue.length; i++) output2[name][i] = fieldValue[i];
                else output2[name] = fieldValue;
                break;
            case 'message':
                let T = field.T();
                if (field.repeat)
                    for (let i = 0; i < fieldValue.length; i++) output2[name][i] = T.create(fieldValue[i]);
                else if (output2[name] === void 0) output2[name] = T.create(fieldValue);
                else T.mergePartial(output2[name], fieldValue);
                break;
            case 'map':
                switch (field.V.kind) {
                    case 'scalar':
                    case 'enum':
                        Object.assign(output2[name], fieldValue);
                        break;
                    case 'message':
                        let T2 = field.V.T();
                        for (let k of Object.keys(fieldValue)) output2[name][k] = T2.create(fieldValue[k]);
                        break;
                }
                break;
        }
    }
}

// node_modules/@protobuf-ts/runtime/build/es2015/reflection-equals.js
function reflectionEquals(info, a, b) {
    if (a === b) return true;
    if (!a || !b) return false;
    for (let field of info.fields) {
        let localName = field.localName;
        let val_a = field.oneof ? a[field.oneof][localName] : a[localName];
        let val_b = field.oneof ? b[field.oneof][localName] : b[localName];
        switch (field.kind) {
            case 'enum':
            case 'scalar':
                let t = field.kind == 'enum' ? ScalarType.INT32 : field.T;
                if (!(field.repeat ? repeatedPrimitiveEq(t, val_a, val_b) : primitiveEq(t, val_a, val_b))) return false;
                break;
            case 'map':
                if (
                    !(field.V.kind == 'message'
                        ? repeatedMsgEq(field.V.T(), objectValues(val_a), objectValues(val_b))
                        : repeatedPrimitiveEq(
                              field.V.kind == 'enum' ? ScalarType.INT32 : field.V.T,
                              objectValues(val_a),
                              objectValues(val_b)
                          ))
                )
                    return false;
                break;
            case 'message':
                let T = field.T();
                if (!(field.repeat ? repeatedMsgEq(T, val_a, val_b) : T.equals(val_a, val_b))) return false;
                break;
        }
    }
    return true;
}
var objectValues = Object.values;
function primitiveEq(type, a, b) {
    if (a === b) return true;
    if (type !== ScalarType.BYTES) return false;
    let ba = a;
    let bb = b;
    if (ba.length !== bb.length) return false;
    for (let i = 0; i < ba.length; i++) if (ba[i] != bb[i]) return false;
    return true;
}
function repeatedPrimitiveEq(type, a, b) {
    if (a.length !== b.length) return false;
    for (let i = 0; i < a.length; i++) if (!primitiveEq(type, a[i], b[i])) return false;
    return true;
}
function repeatedMsgEq(type, a, b) {
    if (a.length !== b.length) return false;
    for (let i = 0; i < a.length; i++) if (!type.equals(a[i], b[i])) return false;
    return true;
}

// node_modules/@protobuf-ts/runtime/build/es2015/message-type.js
var MessageType = class {
    constructor(name, fields, options) {
        this.defaultCheckDepth = 16;
        this.typeName = name;
        this.fields = fields.map(normalizeFieldInfo);
        this.options = options !== null && options !== void 0 ? options : {};
        this.messagePrototype = Object.defineProperty({}, MESSAGE_TYPE, { value: this });
        this.refTypeCheck = new ReflectionTypeCheck(this);
        this.refJsonReader = new ReflectionJsonReader(this);
        this.refJsonWriter = new ReflectionJsonWriter(this);
        this.refBinReader = new ReflectionBinaryReader(this);
        this.refBinWriter = new ReflectionBinaryWriter(this);
    }
    create(value) {
        let message = reflectionCreate(this);
        if (value !== void 0) {
            reflectionMergePartial(this, message, value);
        }
        return message;
    }
    /**
     * Clone the message.
     *
     * Unknown fields are discarded.
     */
    clone(message) {
        let copy2 = this.create();
        reflectionMergePartial(this, copy2, message);
        return copy2;
    }
    /**
     * Determines whether two message of the same type have the same field values.
     * Checks for deep equality, traversing repeated fields, oneof groups, maps
     * and messages recursively.
     * Will also return true if both messages are `undefined`.
     */
    equals(a, b) {
        return reflectionEquals(this, a, b);
    }
    /**
     * Is the given value assignable to our message type
     * and contains no [excess properties](https://www.typescriptlang.org/docs/handbook/interfaces.html#excess-property-checks)?
     */
    is(arg, depth = this.defaultCheckDepth) {
        return this.refTypeCheck.is(arg, depth, false);
    }
    /**
     * Is the given value assignable to our message type,
     * regardless of [excess properties](https://www.typescriptlang.org/docs/handbook/interfaces.html#excess-property-checks)?
     */
    isAssignable(arg, depth = this.defaultCheckDepth) {
        return this.refTypeCheck.is(arg, depth, true);
    }
    /**
     * Copy partial data into the target message.
     */
    mergePartial(target, source) {
        reflectionMergePartial(this, target, source);
    }
    /**
     * Create a new message from binary format.
     */
    fromBinary(data, options) {
        let opt = binaryReadOptions(options);
        return this.internalBinaryRead(opt.readerFactory(data), data.byteLength, opt);
    }
    /**
     * Read a new message from a JSON value.
     */
    fromJson(json, options) {
        return this.internalJsonRead(json, jsonReadOptions(options));
    }
    /**
     * Read a new message from a JSON string.
     * This is equivalent to `T.fromJson(JSON.parse(json))`.
     */
    fromJsonString(json, options) {
        let value = JSON.parse(json);
        return this.fromJson(value, options);
    }
    /**
     * Write the message to canonical JSON value.
     */
    toJson(message, options) {
        return this.internalJsonWrite(message, jsonWriteOptions(options));
    }
    /**
     * Convert the message to canonical JSON string.
     * This is equivalent to `JSON.stringify(T.toJson(t))`
     */
    toJsonString(message, options) {
        var _a;
        let value = this.toJson(message, options);
        return JSON.stringify(
            value,
            null,
            (_a = options === null || options === void 0 ? void 0 : options.prettySpaces) !== null && _a !== void 0
                ? _a
                : 0
        );
    }
    /**
     * Write the message to binary format.
     */
    toBinary(message, options) {
        let opt = binaryWriteOptions(options);
        return this.internalBinaryWrite(message, opt.writerFactory(), opt).finish();
    }
    /**
     * This is an internal method. If you just want to read a message from
     * JSON, use `fromJson()` or `fromJsonString()`.
     *
     * Reads JSON value and merges the fields into the target
     * according to protobuf rules. If the target is omitted,
     * a new instance is created first.
     */
    internalJsonRead(json, options, target) {
        if (json !== null && typeof json == 'object' && !Array.isArray(json)) {
            let message = target !== null && target !== void 0 ? target : this.create();
            this.refJsonReader.read(json, message, options);
            return message;
        }
        throw new Error(`Unable to parse message ${this.typeName} from JSON ${typeofJsonValue(json)}.`);
    }
    /**
     * This is an internal method. If you just want to write a message
     * to JSON, use `toJson()` or `toJsonString().
     *
     * Writes JSON value and returns it.
     */
    internalJsonWrite(message, options) {
        return this.refJsonWriter.write(message, options);
    }
    /**
     * This is an internal method. If you just want to write a message
     * in binary format, use `toBinary()`.
     *
     * Serializes the message in binary format and appends it to the given
     * writer. Returns passed writer.
     */
    internalBinaryWrite(message, writer, options) {
        this.refBinWriter.write(message, writer, options);
        return writer;
    }
    /**
     * This is an internal method. If you just want to read a message from
     * binary data, use `fromBinary()`.
     *
     * Reads data from binary format and merges the fields into
     * the target according to protobuf rules. If the target is
     * omitted, a new instance is created first.
     */
    internalBinaryRead(reader, length, options, target) {
        let message = target !== null && target !== void 0 ? target : this.create();
        this.refBinReader.read(reader, message, options, length);
        return message;
    }
};

// node_modules/@protobuf-ts/runtime-rpc/build/es2015/reflection-info.js
function normalizeMethodInfo(method, service) {
    var _a, _b, _c;
    let m = method;
    m.service = service;
    m.localName = (_a = m.localName) !== null && _a !== void 0 ? _a : lowerCamelCase(m.name);
    m.serverStreaming = !!m.serverStreaming;
    m.clientStreaming = !!m.clientStreaming;
    m.options = (_b = m.options) !== null && _b !== void 0 ? _b : {};
    m.idempotency = (_c = m.idempotency) !== null && _c !== void 0 ? _c : void 0;
    return m;
}

// node_modules/@protobuf-ts/runtime-rpc/build/es2015/service-type.js
var ServiceType = class {
    constructor(typeName, methods, options) {
        this.typeName = typeName;
        this.methods = methods.map((i) => normalizeMethodInfo(i, this));
        this.options = options !== null && options !== void 0 ? options : {};
    }
};

// node_modules/@protobuf-ts/runtime-rpc/build/es2015/rpc-error.js
var RpcError = class extends Error {
    constructor(message, code = 'UNKNOWN', meta) {
        super(message);
        this.name = 'RpcError';
        Object.setPrototypeOf(this, new.target.prototype);
        this.code = code;
        this.meta = meta !== null && meta !== void 0 ? meta : {};
    }
    toString() {
        const l = [this.name + ': ' + this.message];
        if (this.code) {
            l.push('');
            l.push('Code: ' + this.code);
        }
        if (this.serviceName && this.methodName) {
            l.push('Method: ' + this.serviceName + '/' + this.methodName);
        }
        let m = Object.entries(this.meta);
        if (m.length) {
            l.push('');
            l.push('Meta:');
            for (let [k, v] of m) {
                l.push(`  ${k}: ${v}`);
            }
        }
        return l.join('\n');
    }
};

// node_modules/@protobuf-ts/runtime-rpc/build/es2015/rpc-options.js
function mergeRpcOptions(defaults, options) {
    if (!options) return defaults;
    let o = {};
    copy(defaults, o);
    copy(options, o);
    for (let key of Object.keys(options)) {
        let val = options[key];
        switch (key) {
            case 'jsonOptions':
                o.jsonOptions = mergeJsonOptions(defaults.jsonOptions, o.jsonOptions);
                break;
            case 'binaryOptions':
                o.binaryOptions = mergeBinaryOptions(defaults.binaryOptions, o.binaryOptions);
                break;
            case 'meta':
                o.meta = {};
                copy(defaults.meta, o.meta);
                copy(options.meta, o.meta);
                break;
            case 'interceptors':
                o.interceptors = defaults.interceptors ? defaults.interceptors.concat(val) : val.concat();
                break;
        }
    }
    return o;
}
function copy(a, into) {
    if (!a) return;
    let c = into;
    for (let [k, v] of Object.entries(a)) {
        if (v instanceof Date) c[k] = new Date(v.getTime());
        else if (Array.isArray(v)) c[k] = v.concat();
        else c[k] = v;
    }
}

// node_modules/@protobuf-ts/runtime-rpc/build/es2015/deferred.js
var DeferredState;
(function (DeferredState2) {
    DeferredState2[(DeferredState2['PENDING'] = 0)] = 'PENDING';
    DeferredState2[(DeferredState2['REJECTED'] = 1)] = 'REJECTED';
    DeferredState2[(DeferredState2['RESOLVED'] = 2)] = 'RESOLVED';
})(DeferredState || (DeferredState = {}));
var Deferred = class {
    /**
     * @param preventUnhandledRejectionWarning - prevents the warning
     * "Unhandled Promise rejection" by adding a noop rejection handler.
     * Working with calls returned from the runtime-rpc package in an
     * async function usually means awaiting one call property after
     * the other. This means that the "status" is not being awaited when
     * an earlier await for the "headers" is rejected. This causes the
     * "unhandled promise reject" warning. A more correct behaviour for
     * calls might be to become aware whether at least one of the
     * promises is handled and swallow the rejection warning for the
     * others.
     */
    constructor(preventUnhandledRejectionWarning = true) {
        this._state = DeferredState.PENDING;
        this._promise = new Promise((resolve, reject) => {
            this._resolve = resolve;
            this._reject = reject;
        });
        if (preventUnhandledRejectionWarning) {
            this._promise.catch((_) => {});
        }
    }
    /**
     * Get the current state of the promise.
     */
    get state() {
        return this._state;
    }
    /**
     * Get the deferred promise.
     */
    get promise() {
        return this._promise;
    }
    /**
     * Resolve the promise. Throws if the promise is already resolved or rejected.
     */
    resolve(value) {
        if (this.state !== DeferredState.PENDING)
            throw new Error(`cannot resolve ${DeferredState[this.state].toLowerCase()}`);
        this._resolve(value);
        this._state = DeferredState.RESOLVED;
    }
    /**
     * Reject the promise. Throws if the promise is already resolved or rejected.
     */
    reject(reason) {
        if (this.state !== DeferredState.PENDING)
            throw new Error(`cannot reject ${DeferredState[this.state].toLowerCase()}`);
        this._reject(reason);
        this._state = DeferredState.REJECTED;
    }
    /**
     * Resolve the promise. Ignore if not pending.
     */
    resolvePending(val) {
        if (this._state === DeferredState.PENDING) this.resolve(val);
    }
    /**
     * Reject the promise. Ignore if not pending.
     */
    rejectPending(reason) {
        if (this._state === DeferredState.PENDING) this.reject(reason);
    }
};

// node_modules/@protobuf-ts/runtime-rpc/build/es2015/rpc-output-stream.js
var RpcOutputStreamController = class {
    constructor() {
        this._lis = {
            nxt: [],
            msg: [],
            err: [],
            cmp: [],
        };
        this._closed = false;
    }
    // --- RpcOutputStream callback API
    onNext(callback) {
        return this.addLis(callback, this._lis.nxt);
    }
    onMessage(callback) {
        return this.addLis(callback, this._lis.msg);
    }
    onError(callback) {
        return this.addLis(callback, this._lis.err);
    }
    onComplete(callback) {
        return this.addLis(callback, this._lis.cmp);
    }
    addLis(callback, list) {
        list.push(callback);
        return () => {
            let i = list.indexOf(callback);
            if (i >= 0) list.splice(i, 1);
        };
    }
    // remove all listeners
    clearLis() {
        for (let l of Object.values(this._lis)) l.splice(0, l.length);
    }
    // --- Controller API
    /**
     * Is this stream already closed by a completion or error?
     */
    get closed() {
        return this._closed !== false;
    }
    /**
     * Emit message, close with error, or close successfully, but only one
     * at a time.
     * Can be used to wrap a stream by using the other stream's `onNext`.
     */
    notifyNext(message, error, complete) {
        assert((message ? 1 : 0) + (error ? 1 : 0) + (complete ? 1 : 0) <= 1, 'only one emission at a time');
        if (message) this.notifyMessage(message);
        if (error) this.notifyError(error);
        if (complete) this.notifyComplete();
    }
    /**
     * Emits a new message. Throws if stream is closed.
     *
     * Triggers onNext and onMessage callbacks.
     */
    notifyMessage(message) {
        assert(!this.closed, 'stream is closed');
        this.pushIt({ value: message, done: false });
        this._lis.msg.forEach((l) => l(message));
        this._lis.nxt.forEach((l) => l(message, void 0, false));
    }
    /**
     * Closes the stream with an error. Throws if stream is closed.
     *
     * Triggers onNext and onError callbacks.
     */
    notifyError(error) {
        assert(!this.closed, 'stream is closed');
        this._closed = error;
        this.pushIt(error);
        this._lis.err.forEach((l) => l(error));
        this._lis.nxt.forEach((l) => l(void 0, error, false));
        this.clearLis();
    }
    /**
     * Closes the stream successfully. Throws if stream is closed.
     *
     * Triggers onNext and onComplete callbacks.
     */
    notifyComplete() {
        assert(!this.closed, 'stream is closed');
        this._closed = true;
        this.pushIt({ value: null, done: true });
        this._lis.cmp.forEach((l) => l());
        this._lis.nxt.forEach((l) => l(void 0, void 0, true));
        this.clearLis();
    }
    /**
     * Creates an async iterator (that can be used with `for await {...}`)
     * to consume the stream.
     *
     * Some things to note:
     * - If an error occurs, the `for await` will throw it.
     * - If an error occurred before the `for await` was started, `for await`
     *   will re-throw it.
     * - If the stream is already complete, the `for await` will be empty.
     * - If your `for await` consumes slower than the stream produces,
     *   for example because you are relaying messages in a slow operation,
     *   messages are queued.
     */
    [Symbol.asyncIterator]() {
        if (!this._itState) {
            this._itState = { q: [] };
        }
        if (this._closed === true) this.pushIt({ value: null, done: true });
        else if (this._closed !== false) this.pushIt(this._closed);
        return {
            next: () => {
                let state = this._itState;
                assert(state, 'bad state');
                assert(!state.p, 'iterator contract broken');
                let first = state.q.shift();
                if (first) return 'value' in first ? Promise.resolve(first) : Promise.reject(first);
                state.p = new Deferred();
                return state.p.promise;
            },
        };
    }
    // "push" a new iterator result.
    // this either resolves a pending promise, or enqueues the result.
    pushIt(result) {
        let state = this._itState;
        if (!state) return;
        if (state.p) {
            const p = state.p;
            assert(p.state == DeferredState.PENDING, 'iterator contract broken');
            'value' in result ? p.resolve(result) : p.reject(result);
            delete state.p;
        } else {
            state.q.push(result);
        }
    }
};

// node_modules/@protobuf-ts/runtime-rpc/build/es2015/unary-call.js
var __awaiter = function (thisArg, _arguments, P3, generator) {
    function adopt(value) {
        return value instanceof P3
            ? value
            : new P3(function (resolve) {
                  resolve(value);
              });
    }
    return new (P3 || (P3 = Promise))(function (resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator['throw'](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var UnaryCall = class {
    constructor(method, requestHeaders, request, headers, response, status, trailers) {
        this.method = method;
        this.requestHeaders = requestHeaders;
        this.request = request;
        this.headers = headers;
        this.response = response;
        this.status = status;
        this.trailers = trailers;
    }
    /**
     * If you are only interested in the final outcome of this call,
     * you can await it to receive a `FinishedUnaryCall`.
     */
    then(onfulfilled, onrejected) {
        return this.promiseFinished().then(
            (value) => (onfulfilled ? Promise.resolve(onfulfilled(value)) : value),
            (reason) => (onrejected ? Promise.resolve(onrejected(reason)) : Promise.reject(reason))
        );
    }
    promiseFinished() {
        return __awaiter(this, void 0, void 0, function* () {
            let [headers, response, status, trailers] = yield Promise.all([
                this.headers,
                this.response,
                this.status,
                this.trailers,
            ]);
            return {
                method: this.method,
                requestHeaders: this.requestHeaders,
                request: this.request,
                headers,
                response,
                status,
                trailers,
            };
        });
    }
};

// node_modules/@protobuf-ts/runtime-rpc/build/es2015/server-streaming-call.js
var __awaiter2 = function (thisArg, _arguments, P3, generator) {
    function adopt(value) {
        return value instanceof P3
            ? value
            : new P3(function (resolve) {
                  resolve(value);
              });
    }
    return new (P3 || (P3 = Promise))(function (resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator['throw'](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var ServerStreamingCall = class {
    constructor(method, requestHeaders, request, headers, response, status, trailers) {
        this.method = method;
        this.requestHeaders = requestHeaders;
        this.request = request;
        this.headers = headers;
        this.responses = response;
        this.status = status;
        this.trailers = trailers;
    }
    /**
     * Instead of awaiting the response status and trailers, you can
     * just as well await this call itself to receive the server outcome.
     * You should first setup some listeners to the `request` to
     * see the actual messages the server replied with.
     */
    then(onfulfilled, onrejected) {
        return this.promiseFinished().then(
            (value) => (onfulfilled ? Promise.resolve(onfulfilled(value)) : value),
            (reason) => (onrejected ? Promise.resolve(onrejected(reason)) : Promise.reject(reason))
        );
    }
    promiseFinished() {
        return __awaiter2(this, void 0, void 0, function* () {
            let [headers, status, trailers] = yield Promise.all([this.headers, this.status, this.trailers]);
            return {
                method: this.method,
                requestHeaders: this.requestHeaders,
                request: this.request,
                headers,
                status,
                trailers,
            };
        });
    }
};

// node_modules/@protobuf-ts/runtime-rpc/build/es2015/client-streaming-call.js
var __awaiter3 = function (thisArg, _arguments, P3, generator) {
    function adopt(value) {
        return value instanceof P3
            ? value
            : new P3(function (resolve) {
                  resolve(value);
              });
    }
    return new (P3 || (P3 = Promise))(function (resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator['throw'](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var ClientStreamingCall = class {
    constructor(method, requestHeaders, request, headers, response, status, trailers) {
        this.method = method;
        this.requestHeaders = requestHeaders;
        this.requests = request;
        this.headers = headers;
        this.response = response;
        this.status = status;
        this.trailers = trailers;
    }
    /**
     * Instead of awaiting the response status and trailers, you can
     * just as well await this call itself to receive the server outcome.
     * Note that it may still be valid to send more request messages.
     */
    then(onfulfilled, onrejected) {
        return this.promiseFinished().then(
            (value) => (onfulfilled ? Promise.resolve(onfulfilled(value)) : value),
            (reason) => (onrejected ? Promise.resolve(onrejected(reason)) : Promise.reject(reason))
        );
    }
    promiseFinished() {
        return __awaiter3(this, void 0, void 0, function* () {
            let [headers, response, status, trailers] = yield Promise.all([
                this.headers,
                this.response,
                this.status,
                this.trailers,
            ]);
            return {
                method: this.method,
                requestHeaders: this.requestHeaders,
                headers,
                response,
                status,
                trailers,
            };
        });
    }
};

// node_modules/@protobuf-ts/runtime-rpc/build/es2015/duplex-streaming-call.js
var __awaiter4 = function (thisArg, _arguments, P3, generator) {
    function adopt(value) {
        return value instanceof P3
            ? value
            : new P3(function (resolve) {
                  resolve(value);
              });
    }
    return new (P3 || (P3 = Promise))(function (resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator['throw'](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var DuplexStreamingCall = class {
    constructor(method, requestHeaders, request, headers, response, status, trailers) {
        this.method = method;
        this.requestHeaders = requestHeaders;
        this.requests = request;
        this.headers = headers;
        this.responses = response;
        this.status = status;
        this.trailers = trailers;
    }
    /**
     * Instead of awaiting the response status and trailers, you can
     * just as well await this call itself to receive the server outcome.
     * Note that it may still be valid to send more request messages.
     */
    then(onfulfilled, onrejected) {
        return this.promiseFinished().then(
            (value) => (onfulfilled ? Promise.resolve(onfulfilled(value)) : value),
            (reason) => (onrejected ? Promise.resolve(onrejected(reason)) : Promise.reject(reason))
        );
    }
    promiseFinished() {
        return __awaiter4(this, void 0, void 0, function* () {
            let [headers, status, trailers] = yield Promise.all([this.headers, this.status, this.trailers]);
            return {
                method: this.method,
                requestHeaders: this.requestHeaders,
                headers,
                status,
                trailers,
            };
        });
    }
};

// node_modules/@protobuf-ts/runtime-rpc/build/es2015/test-transport.js
var __awaiter5 = function (thisArg, _arguments, P3, generator) {
    function adopt(value) {
        return value instanceof P3
            ? value
            : new P3(function (resolve) {
                  resolve(value);
              });
    }
    return new (P3 || (P3 = Promise))(function (resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator['throw'](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var TestTransport = class _TestTransport {
    /**
     * Initialize with mock data. Omitted fields have default value.
     */
    constructor(data) {
        this.suppressUncaughtRejections = true;
        this.headerDelay = 10;
        this.responseDelay = 50;
        this.betweenResponseDelay = 10;
        this.afterResponseDelay = 10;
        this.data = data !== null && data !== void 0 ? data : {};
    }
    /**
     * Sent message(s) during the last operation.
     */
    get sentMessages() {
        if (this.lastInput instanceof TestInputStream) {
            return this.lastInput.sent;
        } else if (typeof this.lastInput == 'object') {
            return [this.lastInput.single];
        }
        return [];
    }
    /**
     * Sending message(s) completed?
     */
    get sendComplete() {
        if (this.lastInput instanceof TestInputStream) {
            return this.lastInput.completed;
        } else if (typeof this.lastInput == 'object') {
            return true;
        }
        return false;
    }
    // Creates a promise for response headers from the mock data.
    promiseHeaders() {
        var _a;
        const headers = (_a = this.data.headers) !== null && _a !== void 0 ? _a : _TestTransport.defaultHeaders;
        return headers instanceof RpcError ? Promise.reject(headers) : Promise.resolve(headers);
    }
    // Creates a promise for a single, valid, message from the mock data.
    promiseSingleResponse(method) {
        if (this.data.response instanceof RpcError) {
            return Promise.reject(this.data.response);
        }
        let r;
        if (Array.isArray(this.data.response)) {
            assert(this.data.response.length > 0);
            r = this.data.response[0];
        } else if (this.data.response !== void 0) {
            r = this.data.response;
        } else {
            r = method.O.create();
        }
        assert(method.O.is(r));
        return Promise.resolve(r);
    }
    /**
     * Pushes response messages from the mock data to the output stream.
     * If an error response, status or trailers are mocked, the stream is
     * closed with the respective error.
     * Otherwise, stream is completed successfully.
     *
     * The returned promise resolves when the stream is closed. It should
     * not reject. If it does, code is broken.
     */
    streamResponses(method, stream, abort) {
        return __awaiter5(this, void 0, void 0, function* () {
            const messages = [];
            if (this.data.response === void 0) {
                messages.push(method.O.create());
            } else if (Array.isArray(this.data.response)) {
                for (let msg of this.data.response) {
                    assert(method.O.is(msg));
                    messages.push(msg);
                }
            } else if (!(this.data.response instanceof RpcError)) {
                assert(method.O.is(this.data.response));
                messages.push(this.data.response);
            }
            try {
                yield delay(this.responseDelay, abort)(void 0);
            } catch (error) {
                stream.notifyError(error);
                return;
            }
            if (this.data.response instanceof RpcError) {
                stream.notifyError(this.data.response);
                return;
            }
            for (let msg of messages) {
                stream.notifyMessage(msg);
                try {
                    yield delay(this.betweenResponseDelay, abort)(void 0);
                } catch (error) {
                    stream.notifyError(error);
                    return;
                }
            }
            if (this.data.status instanceof RpcError) {
                stream.notifyError(this.data.status);
                return;
            }
            if (this.data.trailers instanceof RpcError) {
                stream.notifyError(this.data.trailers);
                return;
            }
            stream.notifyComplete();
        });
    }
    // Creates a promise for response status from the mock data.
    promiseStatus() {
        var _a;
        const status = (_a = this.data.status) !== null && _a !== void 0 ? _a : _TestTransport.defaultStatus;
        return status instanceof RpcError ? Promise.reject(status) : Promise.resolve(status);
    }
    // Creates a promise for response trailers from the mock data.
    promiseTrailers() {
        var _a;
        const trailers = (_a = this.data.trailers) !== null && _a !== void 0 ? _a : _TestTransport.defaultTrailers;
        return trailers instanceof RpcError ? Promise.reject(trailers) : Promise.resolve(trailers);
    }
    maybeSuppressUncaught(...promise) {
        if (this.suppressUncaughtRejections) {
            for (let p of promise) {
                p.catch(() => {});
            }
        }
    }
    mergeOptions(options) {
        return mergeRpcOptions({}, options);
    }
    unary(method, input, options) {
        var _a;
        const requestHeaders = (_a = options.meta) !== null && _a !== void 0 ? _a : {},
            headersPromise = this.promiseHeaders().then(delay(this.headerDelay, options.abort)),
            responsePromise = headersPromise
                .catch((_) => {})
                .then(delay(this.responseDelay, options.abort))
                .then((_) => this.promiseSingleResponse(method)),
            statusPromise = responsePromise
                .catch((_) => {})
                .then(delay(this.afterResponseDelay, options.abort))
                .then((_) => this.promiseStatus()),
            trailersPromise = responsePromise
                .catch((_) => {})
                .then(delay(this.afterResponseDelay, options.abort))
                .then((_) => this.promiseTrailers());
        this.maybeSuppressUncaught(statusPromise, trailersPromise);
        this.lastInput = { single: input };
        return new UnaryCall(
            method,
            requestHeaders,
            input,
            headersPromise,
            responsePromise,
            statusPromise,
            trailersPromise
        );
    }
    serverStreaming(method, input, options) {
        var _a;
        const requestHeaders = (_a = options.meta) !== null && _a !== void 0 ? _a : {},
            headersPromise = this.promiseHeaders().then(delay(this.headerDelay, options.abort)),
            outputStream = new RpcOutputStreamController(),
            responseStreamClosedPromise = headersPromise
                .then(delay(this.responseDelay, options.abort))
                .catch(() => {})
                .then(() => this.streamResponses(method, outputStream, options.abort))
                .then(delay(this.afterResponseDelay, options.abort)),
            statusPromise = responseStreamClosedPromise.then(() => this.promiseStatus()),
            trailersPromise = responseStreamClosedPromise.then(() => this.promiseTrailers());
        this.maybeSuppressUncaught(statusPromise, trailersPromise);
        this.lastInput = { single: input };
        return new ServerStreamingCall(
            method,
            requestHeaders,
            input,
            headersPromise,
            outputStream,
            statusPromise,
            trailersPromise
        );
    }
    clientStreaming(method, options) {
        var _a;
        const requestHeaders = (_a = options.meta) !== null && _a !== void 0 ? _a : {},
            headersPromise = this.promiseHeaders().then(delay(this.headerDelay, options.abort)),
            responsePromise = headersPromise
                .catch((_) => {})
                .then(delay(this.responseDelay, options.abort))
                .then((_) => this.promiseSingleResponse(method)),
            statusPromise = responsePromise
                .catch((_) => {})
                .then(delay(this.afterResponseDelay, options.abort))
                .then((_) => this.promiseStatus()),
            trailersPromise = responsePromise
                .catch((_) => {})
                .then(delay(this.afterResponseDelay, options.abort))
                .then((_) => this.promiseTrailers());
        this.maybeSuppressUncaught(statusPromise, trailersPromise);
        this.lastInput = new TestInputStream(this.data, options.abort);
        return new ClientStreamingCall(
            method,
            requestHeaders,
            this.lastInput,
            headersPromise,
            responsePromise,
            statusPromise,
            trailersPromise
        );
    }
    duplex(method, options) {
        var _a;
        const requestHeaders = (_a = options.meta) !== null && _a !== void 0 ? _a : {},
            headersPromise = this.promiseHeaders().then(delay(this.headerDelay, options.abort)),
            outputStream = new RpcOutputStreamController(),
            responseStreamClosedPromise = headersPromise
                .then(delay(this.responseDelay, options.abort))
                .catch(() => {})
                .then(() => this.streamResponses(method, outputStream, options.abort))
                .then(delay(this.afterResponseDelay, options.abort)),
            statusPromise = responseStreamClosedPromise.then(() => this.promiseStatus()),
            trailersPromise = responseStreamClosedPromise.then(() => this.promiseTrailers());
        this.maybeSuppressUncaught(statusPromise, trailersPromise);
        this.lastInput = new TestInputStream(this.data, options.abort);
        return new DuplexStreamingCall(
            method,
            requestHeaders,
            this.lastInput,
            headersPromise,
            outputStream,
            statusPromise,
            trailersPromise
        );
    }
};
TestTransport.defaultHeaders = {
    responseHeader: 'test',
};
TestTransport.defaultStatus = {
    code: 'OK',
    detail: 'all good',
};
TestTransport.defaultTrailers = {
    responseTrailer: 'test',
};
function delay(ms, abort) {
    return (v) =>
        new Promise((resolve, reject) => {
            if (abort === null || abort === void 0 ? void 0 : abort.aborted) {
                reject(new RpcError('user cancel', 'CANCELLED'));
            } else {
                const id = setTimeout(() => resolve(v), ms);
                if (abort) {
                    abort.addEventListener('abort', (ev) => {
                        clearTimeout(id);
                        reject(new RpcError('user cancel', 'CANCELLED'));
                    });
                }
            }
        });
}
var TestInputStream = class {
    constructor(data, abort) {
        this._completed = false;
        this._sent = [];
        this.data = data;
        this.abort = abort;
    }
    get sent() {
        return this._sent;
    }
    get completed() {
        return this._completed;
    }
    send(message) {
        if (this.data.inputMessage instanceof RpcError) {
            return Promise.reject(this.data.inputMessage);
        }
        const delayMs = this.data.inputMessage === void 0 ? 10 : this.data.inputMessage;
        return Promise.resolve(void 0)
            .then(() => {
                this._sent.push(message);
            })
            .then(delay(delayMs, this.abort));
    }
    complete() {
        if (this.data.inputComplete instanceof RpcError) {
            return Promise.reject(this.data.inputComplete);
        }
        const delayMs = this.data.inputComplete === void 0 ? 10 : this.data.inputComplete;
        return Promise.resolve(void 0)
            .then(() => {
                this._completed = true;
            })
            .then(delay(delayMs, this.abort));
    }
};

// node_modules/@protobuf-ts/runtime-rpc/build/es2015/rpc-interceptor.js
function stackIntercept(kind, transport, method, options, input) {
    var _a, _b, _c, _d;
    if (kind == 'unary') {
        let tail = (mtd, inp, opt) => transport.unary(mtd, inp, opt);
        for (const curr of ((_a = options.interceptors) !== null && _a !== void 0 ? _a : [])
            .filter((i) => i.interceptUnary)
            .reverse()) {
            const next = tail;
            tail = (mtd, inp, opt) => curr.interceptUnary(next, mtd, inp, opt);
        }
        return tail(method, input, options);
    }
    if (kind == 'serverStreaming') {
        let tail = (mtd, inp, opt) => transport.serverStreaming(mtd, inp, opt);
        for (const curr of ((_b = options.interceptors) !== null && _b !== void 0 ? _b : [])
            .filter((i) => i.interceptServerStreaming)
            .reverse()) {
            const next = tail;
            tail = (mtd, inp, opt) => curr.interceptServerStreaming(next, mtd, inp, opt);
        }
        return tail(method, input, options);
    }
    if (kind == 'clientStreaming') {
        let tail = (mtd, opt) => transport.clientStreaming(mtd, opt);
        for (const curr of ((_c = options.interceptors) !== null && _c !== void 0 ? _c : [])
            .filter((i) => i.interceptClientStreaming)
            .reverse()) {
            const next = tail;
            tail = (mtd, opt) => curr.interceptClientStreaming(next, mtd, opt);
        }
        return tail(method, options);
    }
    if (kind == 'duplex') {
        let tail = (mtd, opt) => transport.duplex(mtd, opt);
        for (const curr of ((_d = options.interceptors) !== null && _d !== void 0 ? _d : [])
            .filter((i) => i.interceptDuplex)
            .reverse()) {
            const next = tail;
            tail = (mtd, opt) => curr.interceptDuplex(next, mtd, opt);
        }
        return tail(method, options);
    }
    assertNever(kind);
}

// node_modules/@concordium/web-sdk/lib/esm/types/errors.js
function isRpcError(error) {
    return error instanceof RpcError;
}

// node_modules/@concordium/web-sdk/lib/esm/types.js
var AttributesKeys;
(function (AttributesKeys2) {
    AttributesKeys2[(AttributesKeys2['firstName'] = 0)] = 'firstName';
    AttributesKeys2[(AttributesKeys2['lastName'] = 1)] = 'lastName';
    AttributesKeys2[(AttributesKeys2['sex'] = 2)] = 'sex';
    AttributesKeys2[(AttributesKeys2['dob'] = 3)] = 'dob';
    AttributesKeys2[(AttributesKeys2['countryOfResidence'] = 4)] = 'countryOfResidence';
    AttributesKeys2[(AttributesKeys2['nationality'] = 5)] = 'nationality';
    AttributesKeys2[(AttributesKeys2['idDocType'] = 6)] = 'idDocType';
    AttributesKeys2[(AttributesKeys2['idDocNo'] = 7)] = 'idDocNo';
    AttributesKeys2[(AttributesKeys2['idDocIssuer'] = 8)] = 'idDocIssuer';
    AttributesKeys2[(AttributesKeys2['idDocIssuedAt'] = 9)] = 'idDocIssuedAt';
    AttributesKeys2[(AttributesKeys2['idDocExpiresAt'] = 10)] = 'idDocExpiresAt';
    AttributesKeys2[(AttributesKeys2['nationalIdNo'] = 11)] = 'nationalIdNo';
    AttributesKeys2[(AttributesKeys2['taxIdNo'] = 12)] = 'taxIdNo';
})(AttributesKeys || (AttributesKeys = {}));
var AttributeKeyString;
(function (AttributeKeyString2) {
    AttributeKeyString2['firstName'] = 'firstName';
    AttributeKeyString2['lastName'] = 'lastName';
    AttributeKeyString2['sex'] = 'sex';
    AttributeKeyString2['dob'] = 'dob';
    AttributeKeyString2['countryOfResidence'] = 'countryOfResidence';
    AttributeKeyString2['nationality'] = 'nationality';
    AttributeKeyString2['idDocType'] = 'idDocType';
    AttributeKeyString2['idDocNo'] = 'idDocNo';
    AttributeKeyString2['idDocIssuer'] = 'idDocIssuer';
    AttributeKeyString2['idDocIssuedAt'] = 'idDocIssuedAt';
    AttributeKeyString2['idDocExpiresAt'] = 'idDocExpiresAt';
    AttributeKeyString2['nationalIdNo'] = 'nationalIdNo';
    AttributeKeyString2['taxIdNo'] = 'taxIdNo';
})(AttributeKeyString || (AttributeKeyString = {}));
var Sex;
(function (Sex2) {
    Sex2['NotKnown'] = '0';
    Sex2['Male'] = '1';
    Sex2['Female'] = '2';
    Sex2['NA'] = '9';
})(Sex || (Sex = {}));
var IdDocType;
(function (IdDocType2) {
    IdDocType2['NA'] = '0';
    IdDocType2['Passport'] = '1';
    IdDocType2['NationalIdCard'] = '2';
    IdDocType2['DriversLicense'] = '3';
    IdDocType2['ImmigrationCard'] = '4';
})(IdDocType || (IdDocType = {}));
var TransactionStatusEnum;
(function (TransactionStatusEnum2) {
    TransactionStatusEnum2['Received'] = 'received';
    TransactionStatusEnum2['Finalized'] = 'finalized';
    TransactionStatusEnum2['Committed'] = 'committed';
})(TransactionStatusEnum || (TransactionStatusEnum = {}));
var TransactionSummaryType;
(function (TransactionSummaryType2) {
    TransactionSummaryType2['AccountTransaction'] = 'accountTransaction';
    TransactionSummaryType2['CredentialDeploymentTransaction'] = 'credentialDeploymentTransaction';
    TransactionSummaryType2['AccountCreation'] = 'accountCreation';
    TransactionSummaryType2['UpdateTransaction'] = 'updateTransaction';
})(TransactionSummaryType || (TransactionSummaryType = {}));
var StakePendingChangeType;
(function (StakePendingChangeType2) {
    StakePendingChangeType2['ReduceStake'] = 'ReduceStake';
    StakePendingChangeType2['RemoveStake'] = 'RemoveStake';
})(StakePendingChangeType || (StakePendingChangeType = {}));
var OpenStatus;
(function (OpenStatus3) {
    OpenStatus3[(OpenStatus3['OpenForAll'] = 0)] = 'OpenForAll';
    OpenStatus3[(OpenStatus3['ClosedForNew'] = 1)] = 'ClosedForNew';
    OpenStatus3[(OpenStatus3['ClosedForAll'] = 2)] = 'ClosedForAll';
})(OpenStatus || (OpenStatus = {}));
var OpenStatusText;
(function (OpenStatusText2) {
    OpenStatusText2['OpenForAll'] = 'openForAll';
    OpenStatusText2['ClosedForNew'] = 'closedForNew';
    OpenStatusText2['ClosedForAll'] = 'closedForAll';
})(OpenStatusText || (OpenStatusText = {}));
var BakerPoolPendingChangeType;
(function (BakerPoolPendingChangeType2) {
    BakerPoolPendingChangeType2['ReduceBakerCapital'] = 'ReduceBakerCapital';
    BakerPoolPendingChangeType2['RemovePool'] = 'RemovePool';
    BakerPoolPendingChangeType2['NoChange'] = 'NoChange';
})(BakerPoolPendingChangeType || (BakerPoolPendingChangeType = {}));
var PoolStatusType;
(function (PoolStatusType2) {
    PoolStatusType2['BakerPool'] = 'BakerPool';
    PoolStatusType2['PassiveDelegation'] = 'PassiveDelegation';
})(PoolStatusType || (PoolStatusType = {}));
var DelegationTargetType;
(function (DelegationTargetType2) {
    DelegationTargetType2['PassiveDelegation'] = 'Passive';
    DelegationTargetType2['Baker'] = 'Baker';
})(DelegationTargetType || (DelegationTargetType = {}));
var AccountInfoType;
(function (AccountInfoType2) {
    AccountInfoType2['Simple'] = 'simple';
    AccountInfoType2['Baker'] = 'baker';
    AccountInfoType2['Delegator'] = 'delegator';
})(AccountInfoType || (AccountInfoType = {}));
var BlockItemKind;
(function (BlockItemKind2) {
    BlockItemKind2[(BlockItemKind2['AccountTransactionKind'] = 0)] = 'AccountTransactionKind';
    BlockItemKind2[(BlockItemKind2['CredentialDeploymentKind'] = 1)] = 'CredentialDeploymentKind';
    BlockItemKind2[(BlockItemKind2['UpdateInstructionKind'] = 2)] = 'UpdateInstructionKind';
})(BlockItemKind || (BlockItemKind = {}));
var AccountTransactionType;
(function (AccountTransactionType2) {
    AccountTransactionType2[(AccountTransactionType2['DeployModule'] = 0)] = 'DeployModule';
    AccountTransactionType2[(AccountTransactionType2['InitContract'] = 1)] = 'InitContract';
    AccountTransactionType2[(AccountTransactionType2['Update'] = 2)] = 'Update';
    AccountTransactionType2[(AccountTransactionType2['Transfer'] = 3)] = 'Transfer';
    AccountTransactionType2[(AccountTransactionType2['AddBaker'] = 4)] = 'AddBaker';
    AccountTransactionType2[(AccountTransactionType2['RemoveBaker'] = 5)] = 'RemoveBaker';
    AccountTransactionType2[(AccountTransactionType2['UpdateBakerStake'] = 6)] = 'UpdateBakerStake';
    AccountTransactionType2[(AccountTransactionType2['UpdateBakerRestakeEarnings'] = 7)] = 'UpdateBakerRestakeEarnings';
    AccountTransactionType2[(AccountTransactionType2['UpdateBakerKeys'] = 8)] = 'UpdateBakerKeys';
    AccountTransactionType2[(AccountTransactionType2['UpdateCredentialKeys'] = 13)] = 'UpdateCredentialKeys';
    AccountTransactionType2[(AccountTransactionType2['EncryptedAmountTransfer'] = 16)] = 'EncryptedAmountTransfer';
    AccountTransactionType2[(AccountTransactionType2['TransferToEncrypted'] = 17)] = 'TransferToEncrypted';
    AccountTransactionType2[(AccountTransactionType2['TransferToPublic'] = 18)] = 'TransferToPublic';
    AccountTransactionType2[(AccountTransactionType2['TransferWithSchedule'] = 19)] = 'TransferWithSchedule';
    AccountTransactionType2[(AccountTransactionType2['UpdateCredentials'] = 20)] = 'UpdateCredentials';
    AccountTransactionType2[(AccountTransactionType2['RegisterData'] = 21)] = 'RegisterData';
    AccountTransactionType2[(AccountTransactionType2['TransferWithMemo'] = 22)] = 'TransferWithMemo';
    AccountTransactionType2[(AccountTransactionType2['EncryptedAmountTransferWithMemo'] = 23)] =
        'EncryptedAmountTransferWithMemo';
    AccountTransactionType2[(AccountTransactionType2['TransferWithScheduleAndMemo'] = 24)] =
        'TransferWithScheduleAndMemo';
    AccountTransactionType2[(AccountTransactionType2['ConfigureBaker'] = 25)] = 'ConfigureBaker';
    AccountTransactionType2[(AccountTransactionType2['ConfigureDelegation'] = 26)] = 'ConfigureDelegation';
})(AccountTransactionType || (AccountTransactionType = {}));
function isAccountTransactionType(candidate) {
    return candidate in AccountTransactionType;
}
var ContractVersion;
(function (ContractVersion3) {
    ContractVersion3[(ContractVersion3['V0'] = 0)] = 'V0';
    ContractVersion3[(ContractVersion3['V1'] = 1)] = 'V1';
})(ContractVersion || (ContractVersion = {}));
var SchemaVersion;
(function (SchemaVersion2) {
    SchemaVersion2[(SchemaVersion2['V0'] = 0)] = 'V0';
    SchemaVersion2[(SchemaVersion2['V1'] = 1)] = 'V1';
    SchemaVersion2[(SchemaVersion2['V2'] = 2)] = 'V2';
})(SchemaVersion || (SchemaVersion = {}));

// node_modules/@concordium/web-sdk/lib/esm/serialization.js
var import_buffer11 = __toESM(require_buffer(), 1);

// node_modules/@concordium/web-sdk/lib/esm/accountTransactions.js
var import_buffer9 = __toESM(require_buffer(), 1);

// node_modules/@concordium/web-sdk/lib/esm/serializationHelpers.js
var import_buffer3 = __toESM(require_buffer(), 1);
function serializeMap(map, encodeSize, encodeKey, encodeValue) {
    const keys = Object.keys(map);
    const buffers = [encodeSize(keys.length)];
    keys.forEach((key) => {
        buffers.push(encodeKey(key));
        buffers.push(encodeValue(map[key]));
    });
    return import_buffer3.Buffer.concat(buffers);
}
function serializeList(list, putSize, putMember) {
    const buffers = [putSize(list.length)];
    list.forEach((member) => {
        buffers.push(putMember(member));
    });
    return import_buffer3.Buffer.concat(buffers);
}
function encodeBool(value) {
    const result = value === true ? 1 : 0;
    const arr = new ArrayBuffer(1);
    const view = new DataView(arr);
    view.setInt8(0, result);
    return import_buffer3.Buffer.from(new Int8Array(arr));
}
function encodeWord64(value, useLittleEndian = false) {
    if (value > 18446744073709551615n || value < 0n) {
        throw new Error('The input has to be a 64 bit unsigned integer but it was: ' + value);
    }
    const arr = new ArrayBuffer(8);
    const view = new DataView(arr);
    view.setBigUint64(0, value, useLittleEndian);
    return import_buffer3.Buffer.from(new Uint8Array(arr));
}
function encodeWord32(value, useLittleEndian = false) {
    if (value > 4294967295 || value < 0 || !Number.isInteger(value)) {
        throw new Error('The input has to be a 32 bit unsigned integer but it was: ' + value);
    }
    const arr = new ArrayBuffer(4);
    const view = new DataView(arr);
    view.setUint32(0, value, useLittleEndian);
    return import_buffer3.Buffer.from(new Uint8Array(arr));
}
function encodeWord16(value, useLittleEndian = false) {
    if (value > 65535 || value < 0 || !Number.isInteger(value)) {
        throw new Error('The input has to be a 16 bit unsigned integer but it was: ' + value);
    }
    const arr = new ArrayBuffer(2);
    const view = new DataView(arr);
    view.setUint16(0, value, useLittleEndian);
    return import_buffer3.Buffer.from(new Uint8Array(arr));
}
function encodeInt8(value) {
    if (value > 127 || value < -128 || !Number.isInteger(value)) {
        throw new Error('The input has to be a 8 bit signed integer but it was: ' + value);
    }
    return import_buffer3.Buffer.from(import_buffer3.Buffer.of(value));
}
function encodeWord8(value) {
    if (value > 255 || value < 0 || !Number.isInteger(value)) {
        throw new Error('The input has to be a 8 bit unsigned integer but it was: ' + value);
    }
    return import_buffer3.Buffer.from(import_buffer3.Buffer.of(value));
}
function encodeWord8FromString(value) {
    return encodeWord8(Number(value));
}
function encodeDataBlob(blob) {
    const length = encodeWord16(blob.data.length);
    return import_buffer3.Buffer.concat([length, blob.data]);
}
function packBufferWithWord32Length(buffer, useLittleEndian = false) {
    const length = encodeWord32(buffer.length, useLittleEndian);
    return import_buffer3.Buffer.concat([length, buffer]);
}
function packBufferWithWord16Length(buffer, useLittleEndian = false) {
    const length = encodeWord16(buffer.length, useLittleEndian);
    return import_buffer3.Buffer.concat([length, buffer]);
}
function packBufferWithWord8Length(buffer) {
    const length = encodeWord8(buffer.length);
    return import_buffer3.Buffer.concat([length, buffer]);
}
function encodeHexString(s) {
    return import_buffer3.Buffer.from(s, 'hex');
}
var SchemeId;
(function (SchemeId2) {
    SchemeId2[(SchemeId2['Ed25519'] = 0)] = 'Ed25519';
})(SchemeId || (SchemeId = {}));
function serializeVerifyKey(key) {
    const scheme = key.schemeId;
    let schemeId;
    if (SchemeId[scheme] !== void 0) {
        schemeId = SchemeId[scheme];
    } else {
        throw new Error(`Unknown key type: ${scheme}`);
    }
    const keyBuffer = import_buffer3.Buffer.from(key.verifyKey, 'hex');
    const serializedScheme = encodeWord8(schemeId);
    return import_buffer3.Buffer.concat([serializedScheme, keyBuffer]);
}
function serializeYearMonth(yearMonth) {
    const year = parseInt(yearMonth.substring(0, 4), 10);
    const month = parseInt(yearMonth.substring(4, 6), 10);
    const serializedYear = encodeWord16(year);
    const serializedMonth = encodeWord8(month);
    return import_buffer3.Buffer.concat([serializedYear, serializedMonth]);
}
function getPayloadBitmap(payload, fieldOrder) {
    return fieldOrder
        .map((k) => payload[k])
        .reduceRight(
            // eslint-disable-next-line no-bitwise
            (acc, cur) => (acc << 1) | Number(cur !== void 0),
            0
        );
}
var serializeFromSpec = (spec) => (payload) => {
    const buffers = Object.keys(spec)
        .map((k) => {
            const v = payload[k];
            const f = spec[k];
            return f(v);
        })
        .filter(isDefined);
    return import_buffer3.Buffer.concat(buffers);
};
var orUndefined = (fun) => (v) => (v !== void 0 ? fun(v) : void 0);
function serializeDelegationTarget(target) {
    if (target.delegateType === DelegationTargetType.PassiveDelegation) {
        return encodeInt8(0);
    } else {
        return import_buffer3.Buffer.concat([encodeInt8(1), encodeWord64(target.bakerId)]);
    }
}
var configureDelegationSerializationSpec = {
    stake: orUndefined((x) => encodeWord64(x.microCcdAmount)),
    restakeEarnings: orUndefined(encodeBool),
    delegationTarget: orUndefined(serializeDelegationTarget),
};
var getSerializedConfigureDelegationBitmap = (payload) =>
    encodeWord16(getPayloadBitmap(payload, Object.keys(configureDelegationSerializationSpec)));
function serializeConfigureDelegationPayload(payload) {
    const bitmap = getSerializedConfigureDelegationBitmap(payload);
    const serializedPayload = serializeFromSpec(configureDelegationSerializationSpec)(payload);
    return import_buffer3.Buffer.concat([bitmap, serializedPayload]);
}
var serializeVerifyKeys = serializeFromSpec({
    electionVerifyKey: encodeHexString,
    proofElection: encodeHexString,
    signatureVerifyKey: encodeHexString,
    proofSig: encodeHexString,
    aggregationVerifyKey: encodeHexString,
    proofAggregation: encodeHexString,
});
var serializeUrl = (url) => {
    const data = import_buffer3.Buffer.from(new TextEncoder().encode(url));
    const length = encodeWord16(data.length);
    return import_buffer3.Buffer.concat([length, data]);
};
var configureBakerSerializationSpec = {
    stake: orUndefined((v) => encodeWord64(v.microCcdAmount)),
    restakeEarnings: orUndefined(encodeBool),
    openForDelegation: orUndefined(encodeWord8),
    keys: orUndefined(serializeVerifyKeys),
    metadataUrl: orUndefined(serializeUrl),
    transactionFeeCommission: orUndefined(encodeWord32),
    bakingRewardCommission: orUndefined(encodeWord32),
    finalizationRewardCommission: orUndefined(encodeWord32),
};
var getSerializedConfigureBakerBitmap = (payload) =>
    encodeWord16(getPayloadBitmap(payload, Object.keys(configureBakerSerializationSpec)));
function serializeConfigureBakerPayload(payload) {
    const bitmap = getSerializedConfigureBakerBitmap(payload);
    const serializedPayload = serializeFromSpec(configureBakerSerializationSpec)(payload);
    return import_buffer3.Buffer.concat([bitmap, serializedPayload]);
}
var makeSerializeOptional = (fun) => (value) => {
    if (value === void 0) {
        return encodeBool(false);
    }
    return import_buffer3.Buffer.concat([encodeBool(true), fun(value)]);
};

// node_modules/@concordium/web-sdk/lib/esm/types/DataBlob.js
var import_buffer4 = __toESM(require_buffer(), 1);
var JSON_DISCRIMINATOR2 = TypedJsonDiscriminator.DataBlob;
var DataBlob = class _DataBlob {
    constructor(data) {
        this.__type = JSON_DISCRIMINATOR2;
        if (data.byteLength > 256) {
            throw new Error("A data blob's size cannot exceed 256 bytes");
        }
        this.data = import_buffer4.Buffer.from(data);
    }
    /**
     * Encodes the data to a JSON-serializable hex-string.
     *
     * @returns The hex-string representation of the data.
     */
    toJSON() {
        return packBufferWithWord16Length(this.data).toString('hex');
    }
    /**
     * Takes a hex-string and converts it to an instance of type {@linkcode DataBlob}.
     * The method expects the string to be prefixed with a 2-byte length like the one returned by {@linkcode toJSON}.
     *
     * @param value Hex-string to be converted to a DataBlob.
     * @returns The parsed instance.
     */
    static fromJSON(value) {
        return new _DataBlob(encodeHexString(value.substring(4)));
    }
    /**
     * Takes an {@linkcode Type} and transforms it to a {@linkcode TypedJson} format.
     *
     * @returns {TypedJson} The transformed object.
     */
    toTypedJSON() {
        return {
            ['@type']: JSON_DISCRIMINATOR2,
            value: this.data.toString('hex'),
        };
    }
};
DataBlob.fromTypedJSON = makeFromTypedJson(JSON_DISCRIMINATOR2, (v) => {
    const data = import_buffer4.Buffer.from(v, 'hex');
    return new DataBlob(data);
});

// node_modules/@concordium/web-sdk/lib/esm/types/CcdAmount.js
var CcdAmount_exports = {};
__export(CcdAmount_exports, {
    JSON_DISCRIMINATOR: () => JSON_DISCRIMINATOR3,
    ccdToMicroCcd: () => ccdToMicroCcd,
    fromCcd: () => fromCcd,
    fromMicroCcd: () => fromMicroCcd,
    fromProto: () => fromProto2,
    fromSchemaValue: () => fromSchemaValue2,
    fromSerializable: () => fromSerializable,
    fromTypedJSON: () => fromTypedJSON2,
    instanceOf: () => instanceOf2,
    microCcdToCcd: () => microCcdToCcd,
    toCcd: () => toCcd,
    toMicroCcd: () => toMicroCcd,
    toProto: () => toProto2,
    toSchemaValue: () => toSchemaValue2,
    toSerializable: () => toSerializable,
    toTypedJSON: () => toTypedJSON2,
    zero: () => zero,
});

// node_modules/big.js/big.mjs
var DP = 20;
var RM = 1;
var MAX_DP = 1e6;
var MAX_POWER = 1e6;
var NE = -7;
var PE = 21;
var STRICT = false;
var NAME = '[big.js] ';
var INVALID = NAME + 'Invalid ';
var INVALID_DP = INVALID + 'decimal places';
var INVALID_RM = INVALID + 'rounding mode';
var DIV_BY_ZERO = NAME + 'Division by zero';
var P = {};
var UNDEFINED = void 0;
var NUMERIC = /^-?(\d+(\.\d*)?|\.\d+)(e[+-]?\d+)?$/i;
function _Big_() {
    function Big2(n) {
        var x = this;
        if (!(x instanceof Big2)) return n === UNDEFINED ? _Big_() : new Big2(n);
        if (n instanceof Big2) {
            x.s = n.s;
            x.e = n.e;
            x.c = n.c.slice();
        } else {
            if (typeof n !== 'string') {
                if (Big2.strict === true && typeof n !== 'bigint') {
                    throw TypeError(INVALID + 'value');
                }
                n = n === 0 && 1 / n < 0 ? '-0' : String(n);
            }
            parse(x, n);
        }
        x.constructor = Big2;
    }
    Big2.prototype = P;
    Big2.DP = DP;
    Big2.RM = RM;
    Big2.NE = NE;
    Big2.PE = PE;
    Big2.strict = STRICT;
    Big2.roundDown = 0;
    Big2.roundHalfUp = 1;
    Big2.roundHalfEven = 2;
    Big2.roundUp = 3;
    return Big2;
}
function parse(x, n) {
    var e, i, nl;
    if (!NUMERIC.test(n)) {
        throw Error(INVALID + 'number');
    }
    x.s = n.charAt(0) == '-' ? ((n = n.slice(1)), -1) : 1;
    if ((e = n.indexOf('.')) > -1) n = n.replace('.', '');
    if ((i = n.search(/e/i)) > 0) {
        if (e < 0) e = i;
        e += +n.slice(i + 1);
        n = n.substring(0, i);
    } else if (e < 0) {
        e = n.length;
    }
    nl = n.length;
    for (i = 0; i < nl && n.charAt(i) == '0'; ) ++i;
    if (i == nl) {
        x.c = [(x.e = 0)];
    } else {
        for (; nl > 0 && n.charAt(--nl) == '0'; );
        x.e = e - i - 1;
        x.c = [];
        for (e = 0; i <= nl; ) x.c[e++] = +n.charAt(i++);
    }
    return x;
}
function round(x, sd, rm, more) {
    var xc = x.c;
    if (rm === UNDEFINED) rm = x.constructor.RM;
    if (rm !== 0 && rm !== 1 && rm !== 2 && rm !== 3) {
        throw Error(INVALID_RM);
    }
    if (sd < 1) {
        more =
            (rm === 3 && (more || !!xc[0])) ||
            (sd === 0 &&
                ((rm === 1 && xc[0] >= 5) ||
                    (rm === 2 && (xc[0] > 5 || (xc[0] === 5 && (more || xc[1] !== UNDEFINED))))));
        xc.length = 1;
        if (more) {
            x.e = x.e - sd + 1;
            xc[0] = 1;
        } else {
            xc[0] = x.e = 0;
        }
    } else if (sd < xc.length) {
        more =
            (rm === 1 && xc[sd] >= 5) ||
            (rm === 2 && (xc[sd] > 5 || (xc[sd] === 5 && (more || xc[sd + 1] !== UNDEFINED || xc[sd - 1] & 1)))) ||
            (rm === 3 && (more || !!xc[0]));
        xc.length = sd;
        if (more) {
            for (; ++xc[--sd] > 9; ) {
                xc[sd] = 0;
                if (sd === 0) {
                    ++x.e;
                    xc.unshift(1);
                    break;
                }
            }
        }
        for (sd = xc.length; !xc[--sd]; ) xc.pop();
    }
    return x;
}
function stringify(x, doExponential, isNonzero) {
    var e = x.e,
        s = x.c.join(''),
        n = s.length;
    if (doExponential) {
        s = s.charAt(0) + (n > 1 ? '.' + s.slice(1) : '') + (e < 0 ? 'e' : 'e+') + e;
    } else if (e < 0) {
        for (; ++e; ) s = '0' + s;
        s = '0.' + s;
    } else if (e > 0) {
        if (++e > n) {
            for (e -= n; e--; ) s += '0';
        } else if (e < n) {
            s = s.slice(0, e) + '.' + s.slice(e);
        }
    } else if (n > 1) {
        s = s.charAt(0) + '.' + s.slice(1);
    }
    return x.s < 0 && isNonzero ? '-' + s : s;
}
P.abs = function () {
    var x = new this.constructor(this);
    x.s = 1;
    return x;
};
P.cmp = function (y) {
    var isneg,
        x = this,
        xc = x.c,
        yc = (y = new x.constructor(y)).c,
        i = x.s,
        j = y.s,
        k = x.e,
        l = y.e;
    if (!xc[0] || !yc[0]) return !xc[0] ? (!yc[0] ? 0 : -j) : i;
    if (i != j) return i;
    isneg = i < 0;
    if (k != l) return (k > l) ^ isneg ? 1 : -1;
    j = (k = xc.length) < (l = yc.length) ? k : l;
    for (i = -1; ++i < j; ) {
        if (xc[i] != yc[i]) return (xc[i] > yc[i]) ^ isneg ? 1 : -1;
    }
    return k == l ? 0 : (k > l) ^ isneg ? 1 : -1;
};
P.div = function (y) {
    var x = this,
        Big2 = x.constructor,
        a = x.c,
        b = (y = new Big2(y)).c,
        k = x.s == y.s ? 1 : -1,
        dp = Big2.DP;
    if (dp !== ~~dp || dp < 0 || dp > MAX_DP) {
        throw Error(INVALID_DP);
    }
    if (!b[0]) {
        throw Error(DIV_BY_ZERO);
    }
    if (!a[0]) {
        y.s = k;
        y.c = [(y.e = 0)];
        return y;
    }
    var bl,
        bt,
        n,
        cmp,
        ri,
        bz = b.slice(),
        ai = (bl = b.length),
        al = a.length,
        r = a.slice(0, bl),
        rl = r.length,
        q = y,
        qc = (q.c = []),
        qi = 0,
        p = dp + (q.e = x.e - y.e) + 1;
    q.s = k;
    k = p < 0 ? 0 : p;
    bz.unshift(0);
    for (; rl++ < bl; ) r.push(0);
    do {
        for (n = 0; n < 10; n++) {
            if (bl != (rl = r.length)) {
                cmp = bl > rl ? 1 : -1;
            } else {
                for (ri = -1, cmp = 0; ++ri < bl; ) {
                    if (b[ri] != r[ri]) {
                        cmp = b[ri] > r[ri] ? 1 : -1;
                        break;
                    }
                }
            }
            if (cmp < 0) {
                for (bt = rl == bl ? b : bz; rl; ) {
                    if (r[--rl] < bt[rl]) {
                        ri = rl;
                        for (; ri && !r[--ri]; ) r[ri] = 9;
                        --r[ri];
                        r[rl] += 10;
                    }
                    r[rl] -= bt[rl];
                }
                for (; !r[0]; ) r.shift();
            } else {
                break;
            }
        }
        qc[qi++] = cmp ? n : ++n;
        if (r[0] && cmp) r[rl] = a[ai] || 0;
        else r = [a[ai]];
    } while ((ai++ < al || r[0] !== UNDEFINED) && k--);
    if (!qc[0] && qi != 1) {
        qc.shift();
        q.e--;
        p--;
    }
    if (qi > p) round(q, p, Big2.RM, r[0] !== UNDEFINED);
    return q;
};
P.eq = function (y) {
    return this.cmp(y) === 0;
};
P.gt = function (y) {
    return this.cmp(y) > 0;
};
P.gte = function (y) {
    return this.cmp(y) > -1;
};
P.lt = function (y) {
    return this.cmp(y) < 0;
};
P.lte = function (y) {
    return this.cmp(y) < 1;
};
P.minus = P.sub = function (y) {
    var i,
        j,
        t,
        xlty,
        x = this,
        Big2 = x.constructor,
        a = x.s,
        b = (y = new Big2(y)).s;
    if (a != b) {
        y.s = -b;
        return x.plus(y);
    }
    var xc = x.c.slice(),
        xe = x.e,
        yc = y.c,
        ye = y.e;
    if (!xc[0] || !yc[0]) {
        if (yc[0]) {
            y.s = -b;
        } else if (xc[0]) {
            y = new Big2(x);
        } else {
            y.s = 1;
        }
        return y;
    }
    if ((a = xe - ye)) {
        if ((xlty = a < 0)) {
            a = -a;
            t = xc;
        } else {
            ye = xe;
            t = yc;
        }
        t.reverse();
        for (b = a; b--; ) t.push(0);
        t.reverse();
    } else {
        j = ((xlty = xc.length < yc.length) ? xc : yc).length;
        for (a = b = 0; b < j; b++) {
            if (xc[b] != yc[b]) {
                xlty = xc[b] < yc[b];
                break;
            }
        }
    }
    if (xlty) {
        t = xc;
        xc = yc;
        yc = t;
        y.s = -y.s;
    }
    if ((b = (j = yc.length) - (i = xc.length)) > 0) for (; b--; ) xc[i++] = 0;
    for (b = i; j > a; ) {
        if (xc[--j] < yc[j]) {
            for (i = j; i && !xc[--i]; ) xc[i] = 9;
            --xc[i];
            xc[j] += 10;
        }
        xc[j] -= yc[j];
    }
    for (; xc[--b] === 0; ) xc.pop();
    for (; xc[0] === 0; ) {
        xc.shift();
        --ye;
    }
    if (!xc[0]) {
        y.s = 1;
        xc = [(ye = 0)];
    }
    y.c = xc;
    y.e = ye;
    return y;
};
P.mod = function (y) {
    var ygtx,
        x = this,
        Big2 = x.constructor,
        a = x.s,
        b = (y = new Big2(y)).s;
    if (!y.c[0]) {
        throw Error(DIV_BY_ZERO);
    }
    x.s = y.s = 1;
    ygtx = y.cmp(x) == 1;
    x.s = a;
    y.s = b;
    if (ygtx) return new Big2(x);
    a = Big2.DP;
    b = Big2.RM;
    Big2.DP = Big2.RM = 0;
    x = x.div(y);
    Big2.DP = a;
    Big2.RM = b;
    return this.minus(x.times(y));
};
P.neg = function () {
    var x = new this.constructor(this);
    x.s = -x.s;
    return x;
};
P.plus = P.add = function (y) {
    var e,
        k,
        t,
        x = this,
        Big2 = x.constructor;
    y = new Big2(y);
    if (x.s != y.s) {
        y.s = -y.s;
        return x.minus(y);
    }
    var xe = x.e,
        xc = x.c,
        ye = y.e,
        yc = y.c;
    if (!xc[0] || !yc[0]) {
        if (!yc[0]) {
            if (xc[0]) {
                y = new Big2(x);
            } else {
                y.s = x.s;
            }
        }
        return y;
    }
    xc = xc.slice();
    if ((e = xe - ye)) {
        if (e > 0) {
            ye = xe;
            t = yc;
        } else {
            e = -e;
            t = xc;
        }
        t.reverse();
        for (; e--; ) t.push(0);
        t.reverse();
    }
    if (xc.length - yc.length < 0) {
        t = yc;
        yc = xc;
        xc = t;
    }
    e = yc.length;
    for (k = 0; e; xc[e] %= 10) k = ((xc[--e] = xc[e] + yc[e] + k) / 10) | 0;
    if (k) {
        xc.unshift(k);
        ++ye;
    }
    for (e = xc.length; xc[--e] === 0; ) xc.pop();
    y.c = xc;
    y.e = ye;
    return y;
};
P.pow = function (n) {
    var x = this,
        one = new x.constructor('1'),
        y = one,
        isneg = n < 0;
    if (n !== ~~n || n < -MAX_POWER || n > MAX_POWER) {
        throw Error(INVALID + 'exponent');
    }
    if (isneg) n = -n;
    for (;;) {
        if (n & 1) y = y.times(x);
        n >>= 1;
        if (!n) break;
        x = x.times(x);
    }
    return isneg ? one.div(y) : y;
};
P.prec = function (sd, rm) {
    if (sd !== ~~sd || sd < 1 || sd > MAX_DP) {
        throw Error(INVALID + 'precision');
    }
    return round(new this.constructor(this), sd, rm);
};
P.round = function (dp, rm) {
    if (dp === UNDEFINED) dp = 0;
    else if (dp !== ~~dp || dp < -MAX_DP || dp > MAX_DP) {
        throw Error(INVALID_DP);
    }
    return round(new this.constructor(this), dp + this.e + 1, rm);
};
P.sqrt = function () {
    var r,
        c,
        t,
        x = this,
        Big2 = x.constructor,
        s = x.s,
        e = x.e,
        half = new Big2('0.5');
    if (!x.c[0]) return new Big2(x);
    if (s < 0) {
        throw Error(NAME + 'No square root');
    }
    s = Math.sqrt(x + '');
    if (s === 0 || s === 1 / 0) {
        c = x.c.join('');
        if (!((c.length + e) & 1)) c += '0';
        s = Math.sqrt(c);
        e = (((e + 1) / 2) | 0) - (e < 0 || e & 1);
        r = new Big2((s == 1 / 0 ? '5e' : (s = s.toExponential()).slice(0, s.indexOf('e') + 1)) + e);
    } else {
        r = new Big2(s + '');
    }
    e = r.e + (Big2.DP += 4);
    do {
        t = r;
        r = half.times(t.plus(x.div(t)));
    } while (t.c.slice(0, e).join('') !== r.c.slice(0, e).join(''));
    return round(r, (Big2.DP -= 4) + r.e + 1, Big2.RM);
};
P.times = P.mul = function (y) {
    var c,
        x = this,
        Big2 = x.constructor,
        xc = x.c,
        yc = (y = new Big2(y)).c,
        a = xc.length,
        b = yc.length,
        i = x.e,
        j = y.e;
    y.s = x.s == y.s ? 1 : -1;
    if (!xc[0] || !yc[0]) {
        y.c = [(y.e = 0)];
        return y;
    }
    y.e = i + j;
    if (a < b) {
        c = xc;
        xc = yc;
        yc = c;
        j = a;
        a = b;
        b = j;
    }
    for (c = new Array((j = a + b)); j--; ) c[j] = 0;
    for (i = b; i--; ) {
        b = 0;
        for (j = a + i; j > i; ) {
            b = c[j] + yc[i] * xc[j - i - 1] + b;
            c[j--] = b % 10;
            b = (b / 10) | 0;
        }
        c[j] = b;
    }
    if (b) ++y.e;
    else c.shift();
    for (i = c.length; !c[--i]; ) c.pop();
    y.c = c;
    return y;
};
P.toExponential = function (dp, rm) {
    var x = this,
        n = x.c[0];
    if (dp !== UNDEFINED) {
        if (dp !== ~~dp || dp < 0 || dp > MAX_DP) {
            throw Error(INVALID_DP);
        }
        x = round(new x.constructor(x), ++dp, rm);
        for (; x.c.length < dp; ) x.c.push(0);
    }
    return stringify(x, true, !!n);
};
P.toFixed = function (dp, rm) {
    var x = this,
        n = x.c[0];
    if (dp !== UNDEFINED) {
        if (dp !== ~~dp || dp < 0 || dp > MAX_DP) {
            throw Error(INVALID_DP);
        }
        x = round(new x.constructor(x), dp + x.e + 1, rm);
        for (dp = dp + x.e + 1; x.c.length < dp; ) x.c.push(0);
    }
    return stringify(x, false, !!n);
};
P[Symbol.for('nodejs.util.inspect.custom')] =
    P.toJSON =
    P.toString =
        function () {
            var x = this,
                Big2 = x.constructor;
            return stringify(x, x.e <= Big2.NE || x.e >= Big2.PE, !!x.c[0]);
        };
P.toNumber = function () {
    var n = Number(stringify(this, true, true));
    if (this.constructor.strict === true && !this.eq(n.toString())) {
        throw Error(NAME + 'Imprecise conversion');
    }
    return n;
};
P.toPrecision = function (sd, rm) {
    var x = this,
        Big2 = x.constructor,
        n = x.c[0];
    if (sd !== UNDEFINED) {
        if (sd !== ~~sd || sd < 1 || sd > MAX_DP) {
            throw Error(INVALID + 'precision');
        }
        x = round(new Big2(x), sd, rm);
        for (; x.c.length < sd; ) x.c.push(0);
    }
    return stringify(x, sd <= x.e || x.e <= Big2.NE || x.e >= Big2.PE, !!n);
};
P.valueOf = function () {
    var x = this,
        Big2 = x.constructor;
    if (Big2.strict === true) {
        throw Error(NAME + 'valueOf disallowed');
    }
    return stringify(x, x.e <= Big2.NE || x.e >= Big2.PE, true);
};
var Big = _Big_();

// node_modules/@concordium/web-sdk/lib/esm/types/CcdAmount.js
var MICRO_CCD_PER_CCD = 1e6;
var JSON_DISCRIMINATOR3 = TypedJsonDiscriminator.CcdAmount;
var CcdAmount = class {
    constructor(microCcdAmount) {
        this.microCcdAmount = microCcdAmount;
        this.__type = JSON_DISCRIMINATOR3;
    }
    toJSON() {
        return this.microCcdAmount.toString();
    }
};
function instanceOf2(value) {
    return value instanceof CcdAmount;
}
function fromMicroCcd(microCcdAmount) {
    if (typeof microCcdAmount !== 'bigint') {
        microCcdAmount = newBig(microCcdAmount);
        if (!microCcdAmount.mod(Big(1)).eq(Big(0))) {
            throw Error('Can not create CcdAmount from a non-whole number!');
        }
        microCcdAmount = BigInt(microCcdAmount.toFixed());
    }
    if (microCcdAmount < 0n) {
        throw new Error('A micro CCD amount must be a non-negative integer but was: ' + microCcdAmount);
    } else if (microCcdAmount > 18446744073709551615n) {
        throw new Error(
            'A micro CCD amount must be representable as an unsigned 64 bit integer but was: ' + microCcdAmount
        );
    }
    return new CcdAmount(microCcdAmount);
}
function zero() {
    return new CcdAmount(0n);
}
function fromCcd(ccd) {
    if (typeof ccd === 'bigint') {
        ccd = ccd.toString();
    }
    const microCcd = newBig(ccd).mul(Big(MICRO_CCD_PER_CCD));
    return fromMicroCcd(microCcd);
}
function newBig(bigSource) {
    if (typeof bigSource === 'string') {
        return Big(bigSource.replace(',', '.'));
    }
    return Big(bigSource);
}
function toMicroCcd(amount) {
    return Big(amount.microCcdAmount.toString());
}
function toCcd(amount) {
    return Big(amount.microCcdAmount.toString()).div(Big(MICRO_CCD_PER_CCD));
}
function ccdToMicroCcd(ccd) {
    return toMicroCcd(fromCcd(ccd));
}
function microCcdToCcd(microCcd) {
    return toCcd(fromMicroCcd(microCcd));
}
function toSchemaValue2(amount) {
    return amount.microCcdAmount.toString();
}
function fromSchemaValue2(microCcdString) {
    return new CcdAmount(BigInt(microCcdString));
}
function fromProto2(amount) {
    return new CcdAmount(amount.value);
}
function toProto2(amount) {
    return {
        value: amount.microCcdAmount,
    };
}
function fromSerializable(value) {
    return fromMicroCcd(value);
}
function toSerializable(value) {
    return value.microCcdAmount.toString();
}
function toTypedJSON2(value) {
    return {
        ['@type']: JSON_DISCRIMINATOR3,
        value: toSerializable(value),
    };
}
var fromTypedJSON2 = makeFromTypedJson(JSON_DISCRIMINATOR3, fromSerializable);

// node_modules/@concordium/web-sdk/lib/esm/types/ReceiveName.js
var ReceiveName_exports = {};
__export(ReceiveName_exports, {
    JSON_DISCRIMINATOR: () => JSON_DISCRIMINATOR6,
    create: () => create,
    equals: () => equals3,
    fromProto: () => fromProto3,
    fromSchemaValue: () => fromSchemaValue4,
    fromString: () => fromString3,
    fromStringUnchecked: () => fromStringUnchecked3,
    fromTypedJSON: () => fromTypedJSON5,
    instanceOf: () => instanceOf5,
    toContractName: () => toContractName,
    toEntrypointName: () => toEntrypointName,
    toProto: () => toProto3,
    toSchemaValue: () => toSchemaValue4,
    toString: () => toString4,
    toTypedJSON: () => toTypedJSON5,
    toUnwrappedJSON: () => toUnwrappedJSON4,
});

// node_modules/@concordium/web-sdk/lib/esm/types/ContractName.js
var ContractName_exports = {};
__export(ContractName_exports, {
    JSON_DISCRIMINATOR: () => JSON_DISCRIMINATOR4,
    equals: () => equals2,
    fromInitName: () => fromInitName,
    fromSchemaValue: () => fromSchemaValue3,
    fromString: () => fromString,
    fromStringUnchecked: () => fromStringUnchecked,
    fromTypedJSON: () => fromTypedJSON3,
    instanceOf: () => instanceOf3,
    toSchemaValue: () => toSchemaValue3,
    toString: () => toString2,
    toTypedJSON: () => toTypedJSON3,
    toUnwrappedJSON: () => toUnwrappedJSON2,
});
var JSON_DISCRIMINATOR4 = TypedJsonDiscriminator.ContractName;
var ContractName = class {
    constructor(value) {
        this.value = value;
        this.__type = JSON_DISCRIMINATOR4;
    }
};
function toUnwrappedJSON2(value) {
    return toString2(value);
}
function instanceOf3(value) {
    return value instanceof ContractName;
}
function fromString(value) {
    if (value.length > 95) {
        throw new Error('Invalid ContractName: Can be atmost 95 characters long.');
    }
    if (value.includes('.')) {
        throw new Error("Invalid ContractName: Must not contain a '.' character.");
    }
    if (!isAsciiAlphaNumericPunctuation(value)) {
        throw new Error('Invalid ContractName: Must only contain ASCII alpha, numeric and punctuation characters.');
    }
    return new ContractName(value);
}
function fromStringUnchecked(value) {
    return new ContractName(value);
}
function fromInitName(initName) {
    return fromStringUnchecked(initName.value.substring(5));
}
function toString2(contractName) {
    return contractName.value;
}
function toSchemaValue3(contractName) {
    return { contract: contractName.value };
}
function fromSchemaValue3(contractName) {
    return fromString(contractName.contract);
}
function equals2(left, right) {
    return left.value === right.value;
}
function toTypedJSON3(value) {
    return {
        ['@type']: JSON_DISCRIMINATOR4,
        value: toString2(value),
    };
}
var fromTypedJSON3 = makeFromTypedJson(JSON_DISCRIMINATOR4, fromString);

// node_modules/@concordium/web-sdk/lib/esm/types/EntrypointName.js
var EntrypointName_exports = {};
__export(EntrypointName_exports, {
    JSON_DISCRIMINATOR: () => JSON_DISCRIMINATOR5,
    fromString: () => fromString2,
    fromStringUnchecked: () => fromStringUnchecked2,
    fromTypedJSON: () => fromTypedJSON4,
    instanceOf: () => instanceOf4,
    toString: () => toString3,
    toTypedJSON: () => toTypedJSON4,
    toUnwrappedJSON: () => toUnwrappedJSON3,
});
var JSON_DISCRIMINATOR5 = TypedJsonDiscriminator.EntrypointName;
var EntrypointName = class {
    get serializable() {
        return this.value;
    }
    constructor(value) {
        this.value = value;
        this.__type = JSON_DISCRIMINATOR5;
    }
};
function toUnwrappedJSON3(value) {
    return toString3(value);
}
function instanceOf4(value) {
    return value instanceof EntrypointName;
}
function fromString2(value) {
    if (value.length > 99) {
        throw new Error('Invalid EntrypointName: Can be atmost 99 characters long.');
    }
    if (!isAsciiAlphaNumericPunctuation(value)) {
        throw new Error('Invalid EntrypointName: Must only contain ASCII alpha, numeric and punctuation characters.');
    }
    return new EntrypointName(value);
}
function fromStringUnchecked2(value) {
    return new EntrypointName(value);
}
function toString3(entrypointName) {
    return entrypointName.value;
}
function toTypedJSON4(value) {
    return {
        ['@type']: JSON_DISCRIMINATOR5,
        value: toString3(value),
    };
}
var fromTypedJSON4 = makeFromTypedJson(JSON_DISCRIMINATOR5, fromString2);

// node_modules/@concordium/web-sdk/lib/esm/types/ReceiveName.js
var JSON_DISCRIMINATOR6 = TypedJsonDiscriminator.ReceiveName;
var ReceiveName = class {
    constructor(value) {
        this.value = value;
        this.__type = JSON_DISCRIMINATOR6;
    }
};
function toUnwrappedJSON4(value) {
    return toString4(value);
}
function instanceOf5(value) {
    return value instanceof ReceiveName;
}
function create(contractName, entrypointName) {
    return fromString3(`${toString2(contractName)}.${toString3(entrypointName)}`);
}
function fromString3(value) {
    if (value.length > 100) {
        throw new Error('Invalid ReceiveName: Can be atmost 100 characters long.');
    }
    if (!value.includes('.')) {
        throw new Error("Invalid ReceiveName: Must contain at least one '.' character.");
    }
    if (!isAsciiAlphaNumericPunctuation(value)) {
        throw new Error('Invalid ReceiveName: Must only contain ASCII alpha, numeric and punctuation characters.');
    }
    return new ReceiveName(value);
}
function fromStringUnchecked3(value) {
    return new ReceiveName(value);
}
function toString4(receiveName) {
    return receiveName.value;
}
function toContractName(receiveName) {
    const splitAt = receiveName.value.indexOf('.');
    const contractName = receiveName.value.substring(0, splitAt);
    return fromStringUnchecked(contractName);
}
function toEntrypointName(receiveName) {
    const splitAt = receiveName.value.indexOf('.');
    const entrypointName = receiveName.value.substring(splitAt + 1);
    return fromStringUnchecked2(entrypointName);
}
function toSchemaValue4(receiveName) {
    const contract = toString2(toContractName(receiveName));
    const func = toString3(toEntrypointName(receiveName));
    return { contract, func };
}
function fromSchemaValue4(receiveName) {
    return fromString3(`${receiveName.contract}.${receiveName.func}`);
}
function fromProto3(receiveName) {
    return fromStringUnchecked3(receiveName.value);
}
function toProto3(receiveName) {
    return {
        value: receiveName.value,
    };
}
function equals3(left, right) {
    return left.value === right.value;
}
function toTypedJSON5({ value }) {
    return {
        ['@type']: JSON_DISCRIMINATOR6,
        value,
    };
}
var fromTypedJSON5 = makeFromTypedJson(JSON_DISCRIMINATOR6, fromString3);

// node_modules/@concordium/web-sdk/lib/esm/types/Parameter.js
var Parameter_exports = {};
__export(Parameter_exports, {
    JSON_DISCRIMINATOR: () => JSON_DISCRIMINATOR7,
    empty: () => empty,
    fromBase64SchemaType: () => fromBase64SchemaType,
    fromBuffer: () => fromBuffer2,
    fromBufferUnchecked: () => fromBufferUnchecked,
    fromHexString: () => fromHexString,
    fromProto: () => fromProto4,
    fromSchemaType: () => fromSchemaType,
    fromTypedJSON: () => fromTypedJSON6,
    instanceOf: () => instanceOf6,
    toBuffer: () => toBuffer3,
    toHexString: () => toHexString,
    toProto: () => toProto4,
    toTypedJSON: () => toTypedJSON6,
    toUnwrappedJSON: () => toUnwrappedJSON5,
});
var import_buffer8 = __toESM(require_buffer(), 1);

// node_modules/@concordium/web-sdk/lib/esm/deserializationHelpers.js
var import_buffer5 = __toESM(require_buffer(), 1);
var Cursor = class _Cursor {
    /**
     * Constructs a `Cursor`.
     *
     * @param {Buffer} data - the data
     */
    constructor(data) {
        this.data = data;
        this.cursor = 0;
    }
    /**
     * Constructs a `Cursor` from hex encoded data.
     *
     * @param {HexString} data - the (hex encoded) data
     *
     * @returns {Cursor} a Cursor wrapping the data
     */
    static fromHex(data) {
        return new _Cursor(import_buffer5.Buffer.from(data, 'hex'));
    }
    /**
     * Constructs a `Cursor` from a buffer of bytes.
     *
     * @param {ArrayBuffer} buffer - the buffer containing bytes.
     *
     * @returns {Cursor} a Cursor wrapping the data.
     */
    static fromBuffer(buffer) {
        return new _Cursor(import_buffer5.Buffer.from(buffer));
    }
    /**
     * Read a number of bytes from the cursor.
     *
     * @param {number} [numBytes=this.remainingBytes.length] - The number of bytes to read. Defaults to the remaining bytes from the cursor position.
     *
     * @throws If the buffer contains fewer bytes than being read.
     *
     * @returns {Buffer} A buffer containing the number of bytes specified from the cursor position
     */
    read(numBytes = this.remainingBytes.length) {
        const end = this.cursor + numBytes;
        if (this.data.length < end) {
            throw new Error(`Failed to read ${numBytes} bytes from the cursor.`);
        }
        const data = import_buffer5.Buffer.from(this.data.subarray(this.cursor, end));
        this.cursor += numBytes;
        return data;
    }
    /** The remaining bytes, i.e. not including the bytes already read. */
    get remainingBytes() {
        return import_buffer5.Buffer.from(this.data.subarray(this.cursor));
    }
};
function deserializeUInt8(cursor) {
    return cursor.read(1).readUInt8(0);
}
function deserializeUInt16LE(cursor) {
    return cursor.read(2).readUInt16LE(0);
}
function deserializeUInt32LE(cursor) {
    return cursor.read(4).readUInt32LE(0);
}
function deserializeBigUInt64LE(cursor) {
    return cursor.read(8).readBigInt64LE(0).valueOf();
}
function deserializeUInt32BE(cursor) {
    return cursor.read(4).readUInt32BE(0);
}
var makeDeserializeListResponse = (deserializer) => (value) => {
    const cursor = Cursor.fromHex(value);
    const n = cursor.read(2).readUInt16LE(0);
    const values = [];
    for (let i = 0; i < n; i++) {
        const value2 = deserializer(cursor);
        values.push(value2);
    }
    return values;
};

// node_modules/@concordium/web-sdk/lib/esm/schemaTypes.js
var import_buffer6 = __toESM(require_buffer(), 1);
function toOptionJson(value) {
    if (value === void 0) {
        return { None: [] };
    }
    return { Some: [value] };
}
function parseRawModuleSchema(rawModuleSchema) {
    const cursor = Cursor.fromBuffer(rawModuleSchema.buffer);
    if (rawModuleSchema.type === 'versioned') {
        return deserializeVersionedSchemaModule(cursor);
    } else {
        return deserializeUnversionedSchemaModule(rawModuleSchema.version, cursor);
    }
}
var magicPrefixVersionedSchema = import_buffer6.Buffer.alloc(2, 255);
function deserializeVersionedSchemaModule(cursor) {
    const prefix = cursor.read(2);
    if (!prefix.equals(magicPrefixVersionedSchema)) {
        throw new Error('Deserialization failed: Unable to find prefix for versioned module.');
    }
    const version = deserializeUInt8(cursor);
    switch (version) {
        case 0:
            return { version, module: deserializeSchemaModuleV0(cursor) };
        case 1:
            return { version, module: deserializeSchemaModuleV1(cursor) };
        case 2:
            return { version, module: deserializeSchemaModuleV2(cursor) };
        case 3:
            return { version, module: deserializeSchemaModuleV3(cursor) };
        default:
            throw new Error('Deserialization failed: Unsupported version for schema module.');
    }
}
function deserializeUnversionedSchemaModule(version, cursor) {
    switch (version) {
        case 0:
            return { version, module: deserializeSchemaModuleV0(cursor) };
        case 1:
            return { version, module: deserializeSchemaModuleV1(cursor) };
        default:
            throw new Error('Deserialization failed: Unsupported version provided for unversioned schema module.');
    }
}
function deserializeMap(sizeLength, deserialKey, deserialValue, cursor) {
    const itemLen = deserializeSize(sizeLength, cursor);
    const map = /* @__PURE__ */ new Map();
    for (let i = 0; i < itemLen; i++) {
        const key = deserialKey(cursor);
        const value = deserialValue(cursor);
        map.set(key, value);
    }
    return map;
}
function deserializeSizeLength(cursor) {
    const sizeLength = deserializeUInt8(cursor);
    switch (sizeLength) {
        case 0:
            return 'U8';
        case 1:
            return 'U16';
        case 2:
            return 'U32';
        case 3:
            return 'U64';
        default:
            throw new Error('Deserialization failed: Unknown size length tag: ' + sizeLength);
    }
}
function deserializeSize(sizeLength, cursor) {
    switch (sizeLength) {
        case 'U8':
            return BigInt(deserializeUInt8(cursor));
        case 'U16':
            return BigInt(deserializeUInt16LE(cursor));
        case 'U32':
            return BigInt(deserializeUInt32LE(cursor));
        case 'U64':
            return deserializeBigUInt64LE(cursor);
    }
}
function deserializeString(sizeLength, cursor) {
    const byteLen = deserializeSize(sizeLength, cursor);
    if (byteLen > BigInt(Number.MAX_SAFE_INTEGER)) {
        throw new Error('Deserialization failed: Unsupported string length: ' + byteLen);
    }
    const bytes2 = cursor.read(Number(byteLen));
    return bytes2.toString('utf8');
}
function deserializeList(sizeLength, deserializeItem, cursor) {
    const len = deserializeSize(sizeLength, cursor);
    const out = [];
    for (let i = 0n; i < len; i++) {
        out.push(deserializeItem(cursor));
    }
    return out;
}
function deserializeOption(deserializeValue, cursor) {
    const byte = deserializeUInt8(cursor);
    if (byte === 0) {
        return void 0;
    } else if (byte === 1) {
        return deserializeValue(cursor);
    } else {
        throw new Error('Deserialization failed: Unexpected tag for optional value: ' + byte);
    }
}
function deserializeSchemaType(buffer) {
    const cursor = Cursor.fromBuffer(buffer);
    return deserialSchemaType(cursor);
}
function deserialSchemaType(cursor) {
    const tag = deserializeUInt8(cursor);
    switch (tag) {
        case 0:
            return { type: 'Unit' };
        case 1:
            return { type: 'Bool' };
        case 2:
            return { type: 'U8' };
        case 3:
            return { type: 'U16' };
        case 4:
            return { type: 'U32' };
        case 5:
            return { type: 'U64' };
        case 6:
            return { type: 'I8' };
        case 7:
            return { type: 'I16' };
        case 8:
            return { type: 'I32' };
        case 9:
            return { type: 'I64' };
        case 10:
            return { type: 'Amount' };
        case 11:
            return { type: 'AccountAddress' };
        case 12:
            return { type: 'ContractAddress' };
        case 13:
            return { type: 'Timestamp' };
        case 14:
            return { type: 'Duration' };
        case 15:
            return {
                type: 'Pair',
                first: deserialSchemaType(cursor),
                second: deserialSchemaType(cursor),
            };
        case 16:
            return {
                type: 'List',
                sizeLength: deserializeSizeLength(cursor),
                item: deserialSchemaType(cursor),
            };
        case 17:
            return {
                type: 'Set',
                sizeLength: deserializeSizeLength(cursor),
                item: deserialSchemaType(cursor),
            };
        case 18:
            return {
                type: 'Map',
                sizeLength: deserializeSizeLength(cursor),
                key: deserialSchemaType(cursor),
                value: deserialSchemaType(cursor),
            };
        case 19:
            return {
                type: 'Array',
                size: deserializeUInt32LE(cursor),
                item: deserialSchemaType(cursor),
            };
        case 20:
            return {
                type: 'Struct',
                fields: deserializeFields(cursor),
            };
        case 21:
            return {
                type: 'Enum',
                variants: deserializeList('U32', deserializeEnumVariant, cursor),
            };
        case 22:
            return {
                type: 'String',
                sizeLength: deserializeSizeLength(cursor),
            };
        case 23:
            return { type: 'U128' };
        case 24:
            return { type: 'I128' };
        case 25:
            return {
                type: 'ContractName',
                sizeLength: deserializeSizeLength(cursor),
            };
        case 26:
            return {
                type: 'ReceiveName',
                sizeLength: deserializeSizeLength(cursor),
            };
        case 27:
            return {
                type: 'ULeb128',
                maxByteSize: deserializeUInt32LE(cursor),
            };
        case 28:
            return {
                type: 'ILeb128',
                maxByteSize: deserializeUInt32LE(cursor),
            };
        case 29:
            return {
                type: 'ByteList',
                sizeLength: deserializeSizeLength(cursor),
            };
        case 30:
            return {
                type: 'ByteArray',
                size: deserializeUInt32LE(cursor),
            };
        case 31:
            return {
                type: 'TaggedEnum',
                variants: deserializeMap('U32', deserializeUInt8, deserializeEnumVariant, cursor),
            };
        default:
            throw new Error('Deserialization failed: Unexpected tag for SchemaType: ' + tag);
    }
}
function deserializeFields(cursor) {
    const tag = deserializeUInt8(cursor);
    switch (tag) {
        case 0:
            return {
                type: 'Named',
                fields: deserializeList('U32', deserializeNamedField, cursor),
            };
        case 1:
            return {
                type: 'Unnamed',
                fields: deserializeList('U32', deserialSchemaType, cursor),
            };
        case 2:
            return { type: 'None' };
        default:
            throw new Error('Deserialization failed: Unexpected tag for Fields: ' + tag);
    }
}
function deserializeNamedField(cursor) {
    return {
        name: deserializeString('U32', cursor),
        field: deserialSchemaType(cursor),
    };
}
function deserializeEnumVariant(cursor) {
    return {
        name: deserializeString('U32', cursor),
        fields: deserializeFields(cursor),
    };
}
function deserializeSchemaFunctionV1(cursor) {
    const idx = deserializeUInt8(cursor);
    const out = {};
    if ([0, 2].includes(idx)) {
        out.parameter = deserialSchemaType(cursor);
    }
    if ([1, 2].includes(idx)) {
        out.returnValue = deserialSchemaType(cursor);
    }
    return out;
}
function deserializeSchemaFunctionV2(cursor) {
    const idx = deserializeUInt8(cursor);
    if (idx > 7) {
        throw new Error('Deserialization failed: Unexpected ');
    }
    const out = {};
    if ([0, 2, 4, 6].includes(idx)) {
        out.parameter = deserialSchemaType(cursor);
    }
    if ([1, 2, 5, 6].includes(idx)) {
        out.returnValue = deserialSchemaType(cursor);
    }
    if ([3, 4, 5, 6].includes(idx)) {
        out.error = deserialSchemaType(cursor);
    }
    return out;
}
function deserializeContractV0(cursor) {
    return {
        state: deserializeOption(deserialSchemaType, cursor),
        init: deserializeOption(deserializeSchemaFunctionV1, cursor),
        receive: deserializeMap('U32', deserializeString.bind(void 0, 'U32'), deserializeSchemaFunctionV1, cursor),
    };
}
function deserializeContractV1(cursor) {
    return {
        init: deserializeOption(deserializeSchemaFunctionV1, cursor),
        receive: deserializeMap('U32', deserializeString.bind(void 0, 'U32'), deserializeSchemaFunctionV1, cursor),
    };
}
function deserializeContractV2(cursor) {
    return {
        init: deserializeOption(deserializeSchemaFunctionV2, cursor),
        receive: deserializeMap('U32', deserializeString.bind(void 0, 'U32'), deserializeSchemaFunctionV2, cursor),
    };
}
function deserializeContractV3(cursor) {
    return {
        init: deserializeOption(deserializeSchemaFunctionV2, cursor),
        receive: deserializeMap('U32', deserializeString.bind(void 0, 'U32'), deserializeSchemaFunctionV2, cursor),
        event: deserializeOption(deserialSchemaType, cursor),
    };
}
function deserializeSchemaModuleV0(cursor) {
    return {
        contracts: deserializeMap('U32', deserializeString.bind(void 0, 'U32'), deserializeContractV0, cursor),
    };
}
function deserializeSchemaModuleV1(cursor) {
    return {
        contracts: deserializeMap('U32', deserializeString.bind(void 0, 'U32'), deserializeContractV1, cursor),
    };
}
function deserializeSchemaModuleV2(cursor) {
    return {
        contracts: deserializeMap('U32', deserializeString.bind(void 0, 'U32'), deserializeContractV2, cursor),
    };
}
function deserializeSchemaModuleV3(cursor) {
    return {
        contracts: deserializeMap('U32', deserializeString.bind(void 0, 'U32'), deserializeContractV3, cursor),
    };
}
function serializeSchemaType(schemaType) {
    switch (schemaType.type) {
        case 'Unit':
            return Uint8Array.of(0);
        case 'Bool':
            return Uint8Array.of(1);
        case 'U8':
            return Uint8Array.of(2);
        case 'U16':
            return Uint8Array.of(3);
        case 'U32':
            return Uint8Array.of(4);
        case 'U64':
            return Uint8Array.of(5);
        case 'I8':
            return Uint8Array.of(6);
        case 'I16':
            return Uint8Array.of(7);
        case 'I32':
            return Uint8Array.of(8);
        case 'I64':
            return Uint8Array.of(9);
        case 'Amount':
            return Uint8Array.of(10);
        case 'AccountAddress':
            return Uint8Array.of(11);
        case 'ContractAddress':
            return Uint8Array.of(12);
        case 'Timestamp':
            return Uint8Array.of(13);
        case 'Duration':
            return Uint8Array.of(14);
        case 'Pair':
            return import_buffer6.Buffer.concat([
                Uint8Array.of(15),
                serializeSchemaType(schemaType.first),
                serializeSchemaType(schemaType.second),
            ]);
        case 'List':
            return import_buffer6.Buffer.concat([
                Uint8Array.of(16),
                serialSizeLength(schemaType.sizeLength),
                serializeSchemaType(schemaType.item),
            ]);
        case 'Set':
            return import_buffer6.Buffer.concat([
                Uint8Array.of(17),
                serialSizeLength(schemaType.sizeLength),
                serializeSchemaType(schemaType.item),
            ]);
        case 'Map':
            return import_buffer6.Buffer.concat([
                Uint8Array.of(18),
                serialSizeLength(schemaType.sizeLength),
                serializeSchemaType(schemaType.key),
                serializeSchemaType(schemaType.value),
            ]);
        case 'Array':
            return import_buffer6.Buffer.concat([
                Uint8Array.of(19),
                encodeWord32(schemaType.size, true),
                serializeSchemaType(schemaType.item),
            ]);
        case 'Struct':
            return import_buffer6.Buffer.concat([Uint8Array.of(20), serialFields(schemaType.fields)]);
        case 'Enum':
            return import_buffer6.Buffer.concat([
                Uint8Array.of(21),
                serializeList2('U32', serializeEnumVariant, schemaType.variants),
            ]);
        case 'String':
            return import_buffer6.Buffer.concat([Uint8Array.of(22), serialSizeLength(schemaType.sizeLength)]);
        case 'U128':
            return Uint8Array.of(23);
        case 'I128':
            return Uint8Array.of(24);
        case 'ContractName':
            return import_buffer6.Buffer.concat([Uint8Array.of(25), serialSizeLength(schemaType.sizeLength)]);
        case 'ReceiveName':
            return import_buffer6.Buffer.concat([Uint8Array.of(26), serialSizeLength(schemaType.sizeLength)]);
        case 'ULeb128':
            return import_buffer6.Buffer.concat([Uint8Array.of(27), encodeWord32(schemaType.maxByteSize, true)]);
        case 'ILeb128':
            return import_buffer6.Buffer.concat([Uint8Array.of(28), encodeWord32(schemaType.maxByteSize, true)]);
        case 'ByteList':
            return import_buffer6.Buffer.concat([Uint8Array.of(29), serialSizeLength(schemaType.sizeLength)]);
        case 'ByteArray':
            return import_buffer6.Buffer.concat([Uint8Array.of(30), encodeWord32(schemaType.size, true)]);
        case 'TaggedEnum':
            return import_buffer6.Buffer.concat([
                Uint8Array.of(31),
                serializeMap2('U32', encodeWord8, serializeEnumVariant, schemaType.variants),
            ]);
        default:
            throw new Error('Deserialization failed: Unexpected tag for SchemaType: ');
    }
}
function serialSizeLength(sizeLength) {
    switch (sizeLength) {
        case 'U8':
            return new Uint8Array([0]);
        case 'U16':
            return new Uint8Array([1]);
        case 'U32':
            return new Uint8Array([2]);
        case 'U64':
            return new Uint8Array([3]);
    }
}
function serialSize(sizeLength, size) {
    switch (sizeLength) {
        case 'U8':
            return encodeWord8(Number(size));
        case 'U16':
            return encodeWord16(Number(size), true);
        case 'U32':
            return encodeWord32(Number(size), true);
        case 'U64':
            return encodeWord64(BigInt(size), true);
    }
}
function serialFields(fields) {
    switch (fields.type) {
        case 'Named':
            return import_buffer6.Buffer.concat([
                Uint8Array.of(0),
                serializeList2('U32', serialNamedField, fields.fields),
            ]);
        case 'Unnamed':
            return import_buffer6.Buffer.concat([
                Uint8Array.of(1),
                serializeList2('U32', serializeSchemaType, fields.fields),
            ]);
        case 'None':
            return Uint8Array.of(2);
    }
}
function serialNamedField(named) {
    return import_buffer6.Buffer.concat([serializeString('U32', named.name), serializeSchemaType(named.field)]);
}
function serializeEnumVariant(variant) {
    return import_buffer6.Buffer.concat([serializeString('U32', variant.name), serialFields(variant.fields)]);
}
function serializeList2(sizeLength, serialItem, list) {
    return import_buffer6.Buffer.concat([serialSize(sizeLength, list.length), ...list.map(serialItem)]);
}
function serializeString(sizeLength, value) {
    return import_buffer6.Buffer.concat([
        serialSize(sizeLength, value.length),
        import_buffer6.Buffer.from(value, 'utf8'),
    ]);
}
function serializeMap2(sizeLength, serialKey, serialValue, map) {
    const buffers = [serialSize(sizeLength, map.size)];
    for (const [k, v] of map.entries()) {
        buffers.push(serialKey(k), serialValue(v));
    }
    return import_buffer6.Buffer.concat(buffers);
}

// node_modules/@concordium/web-sdk/lib/esm/schema.js
var wasm = __toESM(require_index_min(), 1);
var import_buffer7 = __toESM(require_buffer(), 1);
var import_json_bigint = __toESM(require_json_bigint(), 1);
function getInitContractParameterSchema2(moduleSchema, contractName, schemaVersion) {
    const parameterSchema = wasm.getInitContractParameterSchema(
        import_buffer7.Buffer.from(moduleSchema).toString('hex'),
        toString2(contractName),
        schemaVersion
    );
    return import_buffer7.Buffer.from(parameterSchema, 'hex');
}
function getUpdateContractParameterSchema(moduleSchema, contractName, receiveFunctionName, schemaVersion) {
    const parameterSchema = wasm.getReceiveContractParameterSchema(
        import_buffer7.Buffer.from(moduleSchema).toString('hex'),
        toString2(contractName),
        toString3(receiveFunctionName),
        schemaVersion
    );
    return import_buffer7.Buffer.from(parameterSchema, 'hex');
}
function displayTypeSchemaTemplate2(rawSchema) {
    return wasm.displayTypeSchemaTemplate(import_buffer7.Buffer.from(rawSchema).toString('hex'));
}
function serializeInitContractParameters2(
    contractName,
    parameters,
    rawSchema,
    schemaVersion,
    verboseErrorMessage = false
) {
    const serializedParameters = wasm.serializeInitContractParameters(
        import_json_bigint.default.stringify(parameters),
        import_buffer7.Buffer.from(rawSchema).toString('hex'),
        toString2(contractName),
        schemaVersion,
        verboseErrorMessage
    );
    return fromBuffer2(import_buffer7.Buffer.from(serializedParameters, 'hex'));
}
function serializeUpdateContractParameters(
    contractName,
    receiveFunctionName,
    parameters,
    rawSchema,
    schemaVersion,
    verboseErrorMessage = false
) {
    const serializedParameters = wasm.serializeReceiveContractParameters(
        import_json_bigint.default.stringify(parameters),
        import_buffer7.Buffer.from(rawSchema).toString('hex'),
        toString2(contractName),
        toString3(receiveFunctionName),
        schemaVersion,
        verboseErrorMessage
    );
    return fromBuffer2(import_buffer7.Buffer.from(serializedParameters, 'hex'));
}
function serializeTypeValue2(value, rawSchema, verboseErrorMessage = false) {
    const serializedValue = wasm.serializeTypeValue(
        import_json_bigint.default.stringify(value),
        import_buffer7.Buffer.from(rawSchema).toString('hex'),
        verboseErrorMessage
    );
    return fromBuffer2(import_buffer7.Buffer.from(serializedValue, 'hex'));
}
function deserializeContractState(contractName, schema, state, verboseErrorMessage = false) {
    const serializedState = wasm.deserializeState(
        toString2(contractName),
        import_buffer7.Buffer.from(state).toString('hex'),
        import_buffer7.Buffer.from(schema).toString('hex'),
        verboseErrorMessage
    );
    try {
        return (0, import_json_bigint.default)({
            alwaysParseAsBig: true,
            useNativeBigInt: true,
        }).parse(serializedState);
    } catch (e) {
        throw new Error('unable to deserialize state, due to: ' + serializedState);
    }
}
function deserializeReceiveReturnValue2(
    returnValueBytes,
    moduleSchema,
    contractName,
    functionName,
    schemaVersion,
    verboseErrorMessage = false
) {
    const deserializedReturnValue = wasm.deserializeReceiveReturnValue(
        import_buffer7.Buffer.from(returnValueBytes).toString('hex'),
        import_buffer7.Buffer.from(moduleSchema).toString('hex'),
        toString2(contractName),
        toString3(functionName),
        schemaVersion,
        verboseErrorMessage
    );
    try {
        return (0, import_json_bigint.default)({
            alwaysParseAsBig: true,
            useNativeBigInt: true,
        }).parse(deserializedReturnValue);
    } catch (e) {
        throw new Error('unable to deserialize the return value, due to: ' + deserializedReturnValue);
    }
}
function deserializeReceiveError2(errorBytes, moduleSchema, contractName, functionName, verboseErrorMessage = false) {
    const deserializedError = wasm.deserializeReceiveError(
        import_buffer7.Buffer.from(errorBytes).toString('hex'),
        import_buffer7.Buffer.from(moduleSchema).toString('hex'),
        toString2(contractName),
        toString3(functionName),
        verboseErrorMessage
    );
    try {
        return (0, import_json_bigint.default)({
            alwaysParseAsBig: true,
            useNativeBigInt: true,
        }).parse(deserializedError);
    } catch (e) {
        throw new Error('unable to deserialize the error value, due to: ' + deserializedError);
    }
}
function deserializeInitError2(errorBytes, moduleSchema, contractName, verboseErrorMessage = false) {
    const deserializedError = wasm.deserializeInitError(
        import_buffer7.Buffer.from(errorBytes).toString('hex'),
        import_buffer7.Buffer.from(moduleSchema).toString('hex'),
        toString2(contractName),
        verboseErrorMessage
    );
    try {
        return (0, import_json_bigint.default)({
            alwaysParseAsBig: true,
            useNativeBigInt: true,
        }).parse(deserializedError);
    } catch (e) {
        throw new Error('unable to deserialize the error value, due to: ' + deserializedError);
    }
}
function deserializeTypeValue2(value, rawSchema, verboseErrorMessage = false) {
    const deserializedValue = wasm.deserializeTypeValue(
        import_buffer7.Buffer.from(value).toString('hex'),
        import_buffer7.Buffer.from(rawSchema).toString('hex'),
        verboseErrorMessage
    );
    return (0, import_json_bigint.default)({
        alwaysParseAsBig: true,
        useNativeBigInt: true,
    }).parse(deserializedValue);
}

// node_modules/@concordium/web-sdk/lib/esm/types/Parameter.js
var JSON_DISCRIMINATOR7 = TypedJsonDiscriminator.Parameter;
var Parameter = class {
    constructor(buffer) {
        this.buffer = buffer;
        this.__type = JSON_DISCRIMINATOR7;
    }
};
function toUnwrappedJSON5(value) {
    return toHexString(value);
}
function instanceOf6(value) {
    return value instanceof Parameter;
}
function empty() {
    return fromBufferUnchecked(new ArrayBuffer(0));
}
function fromBuffer2(buffer) {
    checkParameterLength(buffer);
    return fromBufferUnchecked(buffer);
}
function fromBufferUnchecked(buffer) {
    return new Parameter(new Uint8Array(buffer));
}
function fromHexString(hex2) {
    return fromBuffer2(import_buffer8.Buffer.from(hex2, 'hex'));
}
function toHexString(parameter) {
    return import_buffer8.Buffer.from(parameter.buffer).toString('hex');
}
function toBuffer3(parameter) {
    return parameter.buffer;
}
function fromSchemaType(schemaType, value) {
    const schemaBytes = serializeSchemaType(schemaType);
    return serializeTypeValue2(value, schemaBytes);
}
function fromBase64SchemaType(schemaBase64, value) {
    const schemaBytes = import_buffer8.Buffer.from(schemaBase64, 'base64');
    return serializeTypeValue2(value, schemaBytes);
}
function fromProto4(parameter) {
    return fromBuffer2(parameter.value);
}
function toProto4(parameter) {
    return {
        value: parameter.buffer,
    };
}
function toTypedJSON6(value) {
    return {
        ['@type']: JSON_DISCRIMINATOR7,
        value: toHexString(value),
    };
}
var fromTypedJSON6 = makeFromTypedJson(JSON_DISCRIMINATOR7, fromHexString);

// node_modules/@concordium/web-sdk/lib/esm/accountTransactions.js
var SimpleTransferHandler = class {
    getBaseEnergyCost() {
        return 300n;
    }
    serialize(transfer) {
        const serializedToAddress = toBuffer2(transfer.toAddress);
        const serializedAmount = encodeWord64(transfer.amount.microCcdAmount);
        return import_buffer9.Buffer.concat([serializedToAddress, serializedAmount]);
    }
    deserialize(serializedPayload) {
        const toAddress = fromBuffer(import_buffer9.Buffer.from(serializedPayload.read(32)));
        const amount = fromMicroCcd(serializedPayload.read(8).readBigUInt64BE(0));
        return {
            toAddress,
            amount,
        };
    }
    toJSON(transfer) {
        return {
            toAddress: toBase58(transfer.toAddress),
            amount: transfer.amount.microCcdAmount,
        };
    }
    fromJSON(json) {
        return {
            toAddress: fromBase58(json.toAddress),
            amount: fromMicroCcd(json.amount),
        };
    }
};
var SimpleTransferWithMemoHandler = class extends SimpleTransferHandler {
    serialize(transfer) {
        const serializedToAddress = toBuffer2(transfer.toAddress);
        const serializedMemo = encodeDataBlob(transfer.memo);
        const serializedAmount = encodeWord64(transfer.amount.microCcdAmount);
        return import_buffer9.Buffer.concat([serializedToAddress, serializedMemo, serializedAmount]);
    }
    deserialize(serializedPayload) {
        const toAddress = fromBuffer(import_buffer9.Buffer.from(serializedPayload.read(32)));
        const memoLength = serializedPayload.read(2).readUInt16BE(0);
        const memo = new DataBlob(import_buffer9.Buffer.from(serializedPayload.read(memoLength)));
        const amount = fromMicroCcd(serializedPayload.read(8).readBigUInt64BE(0));
        return {
            toAddress,
            memo,
            amount,
        };
    }
    toJSON(transfer) {
        return {
            toAddress: toBase58(transfer.toAddress),
            memo: transfer.memo.toJSON(),
            amount: transfer.amount.microCcdAmount,
        };
    }
    fromJSON(json) {
        return {
            toAddress: fromBase58(json.toAddress),
            memo: DataBlob.fromJSON(json.memo),
            amount: fromMicroCcd(json.amount),
        };
    }
};
var DeployModuleHandler = class {
    getBaseEnergyCost(payload) {
        let length = payload.source.byteLength;
        if (payload.version === void 0) {
            length -= 8;
        }
        const cost = Math.floor(length / 10);
        return BigInt(cost);
    }
    serialize(payload) {
        if (payload.version === void 0) {
            return import_buffer9.Buffer.from(payload.source);
        } else {
            const serializedWasm = packBufferWithWord32Length(payload.source);
            const serializedVersion = encodeWord32(payload.version);
            return import_buffer9.Buffer.concat([serializedVersion, serializedWasm]);
        }
    }
    deserialize() {
        throw new Error('deserialize not supported');
    }
    toJSON(payload) {
        return {
            source: import_buffer9.Buffer.from(payload.source).toString('hex'),
            version: payload.version,
        };
    }
    fromJSON(json) {
        return {
            source: import_buffer9.Buffer.from(json.source, 'hex'),
            version: json.version,
        };
    }
};
var InitContractHandler = class {
    getBaseEnergyCost(payload) {
        return payload.maxContractExecutionEnergy.value;
    }
    serialize(payload) {
        const serializedAmount = encodeWord64(payload.amount.microCcdAmount);
        const initNameBuffer = import_buffer9.Buffer.from('init_' + payload.initName.value, 'utf8');
        const serializedInitName = packBufferWithWord16Length(initNameBuffer);
        const serializedModuleRef = payload.moduleRef.decodedModuleRef;
        const parameterBuffer = toBuffer3(payload.param);
        const serializedParameters = packBufferWithWord16Length(parameterBuffer);
        return import_buffer9.Buffer.concat([
            serializedAmount,
            serializedModuleRef,
            serializedInitName,
            serializedParameters,
        ]);
    }
    deserialize() {
        throw new Error('deserialize not supported');
    }
    toJSON(payload) {
        return {
            amount: payload.amount.microCcdAmount,
            moduleRef: ModuleReference_exports.toHexString(payload.moduleRef),
            initName: ContractName_exports.toString(payload.initName),
            param: toHexString(payload.param),
            maxContractExecutionEnergy: payload.maxContractExecutionEnergy.value,
        };
    }
    fromJSON(json) {
        return {
            amount: fromMicroCcd(json.amount),
            moduleRef: ModuleReference_exports.fromHexString(json.moduleRef),
            initName: ContractName_exports.fromString(json.initName),
            param: fromHexString(json.param),
            maxContractExecutionEnergy: Energy_exports.create(json.maxContractExecutionEnergy),
        };
    }
};
var UpdateContractHandler = class {
    getBaseEnergyCost(payload) {
        return payload.maxContractExecutionEnergy.value;
    }
    serialize(payload) {
        const serializedAmount = encodeWord64(payload.amount.microCcdAmount);
        const serializeIndex = encodeWord64(payload.address.index);
        const serializeSubindex = encodeWord64(payload.address.subindex);
        const serializedContractAddress = import_buffer9.Buffer.concat([serializeIndex, serializeSubindex]);
        const receiveNameBuffer = import_buffer9.Buffer.from(toString4(payload.receiveName), 'utf8');
        const serializedReceiveName = packBufferWithWord16Length(receiveNameBuffer);
        const parameterBuffer = toBuffer3(payload.message);
        const serializedParameters = packBufferWithWord16Length(parameterBuffer);
        return import_buffer9.Buffer.concat([
            serializedAmount,
            serializedContractAddress,
            serializedReceiveName,
            serializedParameters,
        ]);
    }
    deserialize() {
        throw new Error('deserialize not supported');
    }
    toJSON(payload) {
        return {
            amount: payload.amount.microCcdAmount,
            address: ContractAddress_exports.toSchemaValue(payload.address),
            receiveName: toString4(payload.receiveName),
            message: toHexString(payload.message),
            maxContractExecutionEnergy: payload.maxContractExecutionEnergy.value,
        };
    }
    fromJSON(json) {
        return {
            amount: fromMicroCcd(json.amount),
            address: ContractAddress_exports.fromSchemaValue(json.address),
            receiveName: fromString3(json.receiveName),
            message: fromHexString(json.message),
            maxContractExecutionEnergy: Energy_exports.create(json.maxContractExecutionEnergy),
        };
    }
};
var UpdateCredentialsHandler = class {
    getBaseEnergyCost(updateCredentials) {
        const newCredentialsCost = updateCredentials.newCredentials
            .map((credential) => {
                const numberOfKeys = BigInt(Object.keys(credential.cdi.credentialPublicKeys.keys).length);
                return 54000n + 100n * numberOfKeys;
            })
            .reduce((prev, curr) => prev + curr, BigInt(0));
        const currentCredentialsCost = 500n * updateCredentials.currentNumberOfCredentials;
        return 500n + currentCredentialsCost + newCredentialsCost;
    }
    serialize(updateCredentials) {
        const serializedAddedCredentials = serializeList(
            updateCredentials.newCredentials,
            encodeWord8,
            ({ index, cdi }) =>
                import_buffer9.Buffer.concat([encodeWord8(index), serializeCredentialDeploymentInfo(cdi)])
        );
        const serializedRemovedCredIds = serializeList(updateCredentials.removeCredentialIds, encodeWord8, (credId) =>
            import_buffer9.Buffer.from(credId, 'hex')
        );
        const serializedThreshold = encodeWord8(updateCredentials.threshold);
        return import_buffer9.Buffer.concat([
            serializedAddedCredentials,
            serializedRemovedCredIds,
            serializedThreshold,
        ]);
    }
    deserialize() {
        throw new Error('deserialize not supported');
    }
    toJSON(updateCredentials) {
        return updateCredentials;
    }
    fromJSON(json) {
        return json;
    }
};
var RegisterDataHandler = class {
    getBaseEnergyCost() {
        return 300n;
    }
    serialize(payload) {
        return encodeDataBlob(payload.data);
    }
    deserialize(serializedPayload) {
        const memoLength = serializedPayload.read(2).readUInt16BE(0);
        return {
            data: new DataBlob(import_buffer9.Buffer.from(serializedPayload.read(memoLength))),
        };
    }
    toJSON(payload) {
        return {
            data: payload.data.toJSON(),
        };
    }
    fromJSON(json) {
        return {
            // The first 2 bytes are the length of the data buffer, so we need to remove them.
            data: DataBlob.fromJSON(json.data),
        };
    }
};
var ConfigureBakerHandler = class {
    getBaseEnergyCost(payload) {
        if (payload.keys) {
            return 4050n;
        } else {
            return 300n;
        }
    }
    serialize(payload) {
        return serializeConfigureBakerPayload(payload);
    }
    deserialize() {
        throw new Error('deserialize not supported');
    }
    toJSON(payload) {
        var _a;
        return {
            ...payload,
            stake: (_a = payload.stake) == null ? void 0 : _a.microCcdAmount,
        };
    }
    fromJSON(json) {
        return {
            ...json,
            stake: json.stake ? fromMicroCcd(json.stake) : void 0,
        };
    }
};
var ConfigureDelegationHandler = class {
    getBaseEnergyCost() {
        return 300n;
    }
    serialize(payload) {
        return serializeConfigureDelegationPayload(payload);
    }
    deserialize() {
        throw new Error('deserialize not supported');
    }
    toJSON(payload) {
        var _a;
        return {
            ...payload,
            stake: (_a = payload.stake) == null ? void 0 : _a.microCcdAmount,
        };
    }
    fromJSON(json) {
        return {
            ...json,
            stake: json.stake ? fromMicroCcd(json.stake) : void 0,
        };
    }
};
function getAccountTransactionHandler(type) {
    switch (type) {
        case AccountTransactionType.Transfer:
            return new SimpleTransferHandler();
        case AccountTransactionType.TransferWithMemo:
            return new SimpleTransferWithMemoHandler();
        case AccountTransactionType.DeployModule:
            return new DeployModuleHandler();
        case AccountTransactionType.InitContract:
            return new InitContractHandler();
        case AccountTransactionType.Update:
            return new UpdateContractHandler();
        case AccountTransactionType.UpdateCredentials:
            return new UpdateCredentialsHandler();
        case AccountTransactionType.RegisterData:
            return new RegisterDataHandler();
        case AccountTransactionType.ConfigureDelegation:
            return new ConfigureDelegationHandler();
        case AccountTransactionType.ConfigureBaker:
            return new ConfigureBakerHandler();
        default:
            throw new Error('The provided type does not have a handler: ' + type);
    }
}

// node_modules/@concordium/web-sdk/lib/esm/ratioHelpers.js
function collapseRatio({ numerator, denominator }) {
    const quotient = numerator / denominator;
    if (numerator % denominator === 0n) {
        return quotient;
    }
    return 1n + quotient;
}
function multiplyRatio({ numerator, denominator }, factor) {
    return {
        numerator: numerator * BigInt(factor),
        denominator,
    };
}

// node_modules/@concordium/web-sdk/lib/esm/types/Energy.js
var Energy_exports = {};
__export(Energy_exports, {
    JSON_DISCRIMINATOR: () => JSON_DISCRIMINATOR8,
    create: () => create2,
    fromProto: () => fromProto5,
    fromSerializable: () => fromSerializable2,
    fromTypedJSON: () => fromTypedJSON7,
    instanceOf: () => instanceOf7,
    toProto: () => toProto5,
    toSerializable: () => toSerializable2,
    toTypedJSON: () => toTypedJSON7,
    toUnwrappedJSON: () => toUnwrappedJSON6,
});
var JSON_DISCRIMINATOR8 = TypedJsonDiscriminator.Energy;
var Energy = class {
    get serializable() {
        return this.value.toString();
    }
    constructor(value) {
        this.value = value;
        this.__type = JSON_DISCRIMINATOR8;
    }
};
function toUnwrappedJSON6(value) {
    return value.value;
}
function instanceOf7(value) {
    return value instanceof Energy;
}
function create2(value) {
    if (value < 0) {
        throw new Error('Invalid energy: The value cannot be a negative number.');
    }
    return new Energy(BigInt(value));
}
function fromProto5(energy) {
    return new Energy(energy.value);
}
function toProto5(energy) {
    return {
        value: energy.value,
    };
}
function fromSerializable2(value) {
    return create2(BigInt(value));
}
function toSerializable2(energy) {
    return energy.value.toString();
}
function toTypedJSON7(value) {
    return {
        ['@type']: JSON_DISCRIMINATOR8,
        value: toSerializable2(value),
    };
}
var fromTypedJSON7 = makeFromTypedJson(JSON_DISCRIMINATOR8, fromSerializable2);

// node_modules/@concordium/web-sdk/lib/esm/energyCost.js
var constantA = 100n;
var constantB = 1n;
var accountTransactionHeaderSize = BigInt(32 + 8 + 8 + 4 + 8);
function calculateEnergyCost(signatureCount, payloadSize, transactionSpecificCost) {
    return create2(
        constantA * signatureCount + constantB * (accountTransactionHeaderSize + payloadSize) + transactionSpecificCost
    );
}
function getEnergyCost(transactionType, payload, signatureCount = 1n) {
    const handler = getAccountTransactionHandler(transactionType);
    const size = handler.serialize(payload).length;
    return calculateEnergyCost(signatureCount, BigInt(size), handler.getBaseEnergyCost(payload));
}
function getExchangeRate({ euroPerEnergy, microGTUPerEuro }) {
    const denominator = BigInt(euroPerEnergy.denominator * microGTUPerEuro.denominator);
    const numerator = BigInt(euroPerEnergy.numerator * microGTUPerEuro.numerator);
    return { numerator, denominator };
}
function convertEnergyToMicroCcd(cost, chainParameters) {
    const rate = getExchangeRate(chainParameters);
    return fromMicroCcd(collapseRatio(multiplyRatio(rate, cost.value)));
}

// node_modules/@concordium/web-sdk/lib/esm/hash.js
var import_buffer10 = __toESM(require_buffer(), 1);
var import_hash = __toESM(require_hash(), 1);
function sha256(data) {
    const sha256Hash = import_hash.default.sha256();
    data.forEach((input) => sha256Hash.update(input));
    return import_buffer10.Buffer.from(sha256Hash.digest('hex'), 'hex');
}

// node_modules/@concordium/web-sdk/lib/esm/serialization.js
function serializeAccountTransactionType(type) {
    return import_buffer11.Buffer.from(Uint8Array.of(type));
}
function serializeAccountTransactionHeader(header, payloadSize, energyAmount) {
    const serializedSender = toBuffer2(header.sender);
    const serializedNonce = encodeWord64(header.nonce.value);
    const serializedEnergyAmount = encodeWord64(energyAmount.value);
    const serializedPayloadSize = encodeWord32(payloadSize);
    const serializedExpiry = encodeWord64(header.expiry.expiryEpochSeconds);
    return import_buffer11.Buffer.concat([
        serializedSender,
        serializedNonce,
        serializedEnergyAmount,
        serializedPayloadSize,
        serializedExpiry,
    ]);
}
function serializeAccountTransactionSignature(signatures) {
    if (Object.keys(signatures).length === 0) {
        throw new Error('No signatures were provided');
    }
    const putSignature = (signature) => {
        const signatureBytes = import_buffer11.Buffer.from(signature, 'hex');
        const length = import_buffer11.Buffer.alloc(2);
        length.writeUInt16BE(signatureBytes.length, 0);
        return import_buffer11.Buffer.concat([length, signatureBytes]);
    };
    const putCredentialSignatures = (credSig) =>
        serializeMap(credSig, encodeWord8, encodeWord8FromString, putSignature);
    return serializeMap(signatures, encodeWord8, encodeWord8FromString, putCredentialSignatures);
}
function serializeAccountTransaction(accountTransaction, signatures) {
    const serializedBlockItemKind = encodeWord8(BlockItemKind.AccountTransactionKind);
    const serializedAccountTransactionSignatures = serializeAccountTransactionSignature(signatures);
    const serializedType = serializeAccountTransactionType(accountTransaction.type);
    const accountTransactionHandler = getAccountTransactionHandler(accountTransaction.type);
    const serializedPayload = accountTransactionHandler.serialize(accountTransaction.payload);
    const baseEnergyCost = accountTransactionHandler.getBaseEnergyCost(accountTransaction.payload);
    const energyCost = calculateEnergyCost(
        countSignatures(signatures),
        BigInt(serializedPayload.length + 1),
        baseEnergyCost
    );
    const serializedHeader = serializeAccountTransactionHeader(
        accountTransaction.header,
        serializedPayload.length + 1,
        energyCost
    );
    return import_buffer11.Buffer.concat([
        serializedBlockItemKind,
        serializedAccountTransactionSignatures,
        serializedHeader,
        serializedType,
        serializedPayload,
    ]);
}
function serializeAccountTransactionPayload(accountTransaction) {
    const serializedType = serializeAccountTransactionType(accountTransaction.type);
    const accountTransactionHandler = getAccountTransactionHandler(accountTransaction.type);
    const serializedPayload = accountTransactionHandler.serialize(accountTransaction.payload);
    return import_buffer11.Buffer.concat([serializedType, serializedPayload]);
}
function getAccountTransactionHash(accountTransaction, signatures) {
    const serializedAccountTransaction = serializeAccountTransaction(accountTransaction, signatures);
    return sha256([serializedAccountTransaction]).toString('hex');
}
function getAccountTransactionSignDigest(accountTransaction, signatureCount = 1n) {
    const accountTransactionHandler = getAccountTransactionHandler(accountTransaction.type);
    const serializedPayload = accountTransactionHandler.serialize(accountTransaction.payload);
    const baseEnergyCost = accountTransactionHandler.getBaseEnergyCost(accountTransaction.payload);
    const energyCost = calculateEnergyCost(signatureCount, BigInt(serializedPayload.length + 1), baseEnergyCost);
    const serializedHeader = serializeAccountTransactionHeader(
        accountTransaction.header,
        serializedPayload.length + 1,
        energyCost
    );
    return sha256([serializedHeader, serializeAccountTransactionType(accountTransaction.type), serializedPayload]);
}
function serializeAccountTransactionForSubmission(accountTransaction, signatures) {
    const serializedAccountTransaction = serializeAccountTransaction(accountTransaction, signatures);
    const serializedVersion = encodeWord8(0);
    return import_buffer11.Buffer.concat([serializedVersion, serializedAccountTransaction]);
}
function serializeCredentialDeploymentValues(credential) {
    const buffers = [];
    buffers.push(
        serializeMap(credential.credentialPublicKeys.keys, encodeWord8, encodeWord8FromString, serializeVerifyKey)
    );
    buffers.push(encodeWord8(credential.credentialPublicKeys.threshold));
    buffers.push(import_buffer11.Buffer.from(credential.credId, 'hex'));
    buffers.push(encodeWord32(credential.ipIdentity));
    buffers.push(encodeWord8(credential.revocationThreshold));
    buffers.push(
        serializeMap(
            credential.arData,
            encodeWord16,
            (key) => encodeWord32(parseInt(key, 10)),
            (arData) => import_buffer11.Buffer.from(arData.encIdCredPubShare, 'hex')
        )
    );
    buffers.push(serializeYearMonth(credential.policy.validTo));
    buffers.push(serializeYearMonth(credential.policy.createdAt));
    const revealedAttributes = Object.entries(credential.policy.revealedAttributes);
    buffers.push(encodeWord16(revealedAttributes.length));
    const revealedAttributeTags = revealedAttributes.map(([tagName, value]) => [AttributesKeys[tagName], value]);
    revealedAttributeTags
        .sort((a, b) => a[0] - b[0])
        .forEach(([tag, value]) => {
            const serializedAttributeValue = import_buffer11.Buffer.from(value, 'utf-8');
            const serializedTag = encodeWord8(tag);
            const serializedAttributeValueLength = encodeWord8(serializedAttributeValue.length);
            buffers.push(import_buffer11.Buffer.concat([serializedTag, serializedAttributeValueLength]));
            buffers.push(serializedAttributeValue);
        });
    return import_buffer11.Buffer.concat(buffers);
}
function serializeIdOwnershipProofs(proofs) {
    const proofIdCredPub = encodeWord32(Object.entries(proofs.proofIdCredPub).length);
    const idCredPubProofs = import_buffer11.Buffer.concat(
        Object.entries(proofs.proofIdCredPub)
            .sort(([indexA], [indexB]) => parseInt(indexA, 10) - parseInt(indexB, 10))
            .map(([index, value]) => {
                const serializedIndex = encodeWord32(parseInt(index, 10));
                const serializedValue = import_buffer11.Buffer.from(value, 'hex');
                return import_buffer11.Buffer.concat([serializedIndex, serializedValue]);
            })
    );
    return import_buffer11.Buffer.concat([
        import_buffer11.Buffer.from(proofs.sig, 'hex'),
        import_buffer11.Buffer.from(proofs.commitments, 'hex'),
        import_buffer11.Buffer.from(proofs.challenge, 'hex'),
        proofIdCredPub,
        idCredPubProofs,
        import_buffer11.Buffer.from(proofs.proofIpSig, 'hex'),
        import_buffer11.Buffer.from(proofs.proofRegId, 'hex'),
        import_buffer11.Buffer.from(proofs.credCounterLessThanMaxAccounts, 'hex'),
    ]);
}
function serializeCredentialDeploymentInfo(credential) {
    const serializedCredentialDeploymentValues = serializeCredentialDeploymentValues(credential);
    const serializedProofs = import_buffer11.Buffer.from(credential.proofs, 'hex');
    const serializedProofsLength = encodeWord32(serializedProofs.length);
    return import_buffer11.Buffer.concat([
        serializedCredentialDeploymentValues,
        serializedProofsLength,
        serializedProofs,
    ]);
}
function getCredentialForExistingAccountSignDigest(unsignedCredentialDeploymentInfo, address) {
    const serializedCredentialValues = serializeCredentialDeploymentValues(unsignedCredentialDeploymentInfo);
    const serializedIdOwnershipProofs = serializeIdOwnershipProofs(unsignedCredentialDeploymentInfo.proofs);
    const existingAccountByte = encodeWord8(1);
    return sha256([serializedCredentialValues, serializedIdOwnershipProofs, existingAccountByte, toBuffer2(address)]);
}
function getCredentialDeploymentSignDigest(credentialDeployment) {
    const serializedCredentialValues = serializeCredentialDeploymentValues(credentialDeployment.unsignedCdi);
    const serializedIdOwnershipProofs = serializeIdOwnershipProofs(credentialDeployment.unsignedCdi.proofs);
    const newAccountByte = encodeWord8(0);
    return sha256([
        serializedCredentialValues,
        serializedIdOwnershipProofs,
        newAccountByte,
        encodeWord64(credentialDeployment.expiry.expiryEpochSeconds),
    ]);
}

// node_modules/@concordium/web-sdk/lib/esm/types/ModuleReference.js
var ModuleReference_exports = {};
__export(ModuleReference_exports, {
    JSON_DISCRIMINATOR: () => JSON_DISCRIMINATOR9,
    equals: () => equals4,
    fromBuffer: () => fromBuffer3,
    fromHexString: () => fromHexString2,
    fromProto: () => fromProto6,
    fromTypedJSON: () => fromTypedJSON8,
    instanceOf: () => instanceOf8,
    toHexString: () => toHexString2,
    toProto: () => toProto6,
    toTypedJSON: () => toTypedJSON8,
    toUnwrappedJSON: () => toUnwrappedJSON7,
});
var import_buffer12 = __toESM(require_buffer(), 1);
var MODULE_REF_BYTE_LENGTH = 32;
var JSON_DISCRIMINATOR9 = TypedJsonDiscriminator.ModuleReference;
var ModuleReference = class {
    constructor(moduleRef, decodedModuleRef) {
        this.moduleRef = moduleRef;
        this.decodedModuleRef = decodedModuleRef;
        this.__type = JSON_DISCRIMINATOR9;
    }
    toJSON() {
        return packBufferWithWord32Length(this.decodedModuleRef).toString('hex');
    }
};
function toUnwrappedJSON7(value) {
    return value.toJSON();
}
function instanceOf8(value) {
    return value instanceof ModuleReference;
}
function fromBuffer3(buffer) {
    const hex2 = import_buffer12.Buffer.from(buffer).toString('hex');
    if (buffer.byteLength !== MODULE_REF_BYTE_LENGTH) {
        throw new Error(
            'The provided moduleRef ' + hex2 + ' is invalid as module reference as it does not contain 32 bytes'
        );
    }
    return new ModuleReference(hex2, new Uint8Array(buffer));
}
function fromHexString2(moduleRef) {
    if (moduleRef.length !== MODULE_REF_BYTE_LENGTH * 2) {
        throw new Error('The provided moduleRef ' + moduleRef + ' is invalid as its length was not 64');
    }
    return new ModuleReference(moduleRef, new Uint8Array(import_buffer12.Buffer.from(moduleRef, 'hex')));
}
function toHexString2(moduleReference) {
    return moduleReference.moduleRef;
}
function fromProto6(moduleReference) {
    return fromBuffer3(moduleReference.value);
}
function toProto6(moduleReference) {
    return {
        value: moduleReference.decodedModuleRef,
    };
}
function equals4(left, right) {
    return left.moduleRef === right.moduleRef;
}
function toTypedJSON8(value) {
    return {
        ['@type']: JSON_DISCRIMINATOR9,
        value: toHexString2(value),
    };
}
var fromTypedJSON8 = makeFromTypedJson(JSON_DISCRIMINATOR9, fromHexString2);

// node_modules/@concordium/web-sdk/lib/esm/types/VersionedModuleSource.js
var import_buffer13 = __toESM(require_buffer(), 1);
function versionedModuleSourceFromBuffer(buffer) {
    const cursor = Cursor.fromBuffer(buffer);
    const version = deserializeUInt32BE(cursor);
    const sourceLength = deserializeUInt32BE(cursor);
    const source = cursor.read(sourceLength);
    if (version !== 0 && version !== 1) {
        throw new Error(`Unsupported module version ${version}, The only supported versions are 0 and 1.`);
    }
    return {
        version,
        source,
    };
}
function versionedModuleSourceToBuffer(moduleSource) {
    const versionBytes = encodeWord32(moduleSource.version);
    const lengthBytes = encodeWord32(moduleSource.source.byteLength);
    return import_buffer13.Buffer.concat([versionBytes, lengthBytes, moduleSource.source]);
}
function calculateModuleReference(moduleSource) {
    const prefix = import_buffer13.Buffer.alloc(8);
    prefix.writeUInt32BE(moduleSource.version, 0);
    prefix.writeUInt32BE(moduleSource.source.length, 4);
    const hash3 = sha256([prefix, moduleSource.source]);
    return fromBuffer3(hash3);
}
async function parseModuleInterface(moduleSource) {
    const wasmModule = await WebAssembly.compile(moduleSource.source);
    const map = /* @__PURE__ */ new Map();
    const wasmExports = WebAssembly.Module.exports(wasmModule);
    for (const exp of wasmExports) {
        if (exp.kind !== 'function') {
            continue;
        }
        if (isInitName(exp.name)) {
            const contractName = getContractNameFromInit(exp.name);
            getOrInsert(map, contractName, {
                contractName,
                entrypointNames: /* @__PURE__ */ new Set(),
            });
        } else if (isReceiveName(exp.name)) {
            const parts = getNamesFromReceive(exp.name);
            const entry = getOrInsert(map, parts.contractName, {
                contractName: parts.contractName,
                entrypointNames: /* @__PURE__ */ new Set(),
            });
            entry.entrypointNames.add(parts.entrypointName);
        }
    }
    return map;
}
async function getEmbeddedModuleSchema(moduleSource) {
    const wasmModule = await WebAssembly.compile(moduleSource.source);
    const versionedSchema = schemaBytesFromWasmModule(wasmModule, 'concordium-schema');
    if (versionedSchema !== null) {
        return { type: 'versioned', buffer: versionedSchema };
    }
    const unversionedSchemaV0 = schemaBytesFromWasmModule(wasmModule, 'concordium-schema-v1');
    if (unversionedSchemaV0 !== null) {
        return { type: 'unversioned', version: 0, buffer: unversionedSchemaV0 };
    }
    const unversionedSchemaV1 = schemaBytesFromWasmModule(wasmModule, 'concordium-schema-v2');
    if (unversionedSchemaV1 !== null) {
        return { type: 'unversioned', version: 1, buffer: unversionedSchemaV1 };
    }
    return null;
}
function getOrInsert(map, key, value) {
    const current = map.get(key);
    if (current !== void 0) {
        return current;
    }
    map.set(key, value);
    return value;
}

// node_modules/@concordium/web-sdk/lib/esm/types/VerifiablePresentation.js
var import_json_bigint2 = __toESM(require_json_bigint(), 1);
function replaceDateWithTimeStampAttribute(k, value) {
    const rawValue = this[k];
    if (rawValue instanceof Date) {
        return { type: 'date-time', timestamp: rawValue.toISOString() };
    }
    return value;
}
function reviveDateFromTimeStampAttribute(_key, value) {
    if (value.type === 'date-time' && typeof value.timestamp === 'string' && Object.keys(value).length === 2) {
        return new Date(Date.parse(value.timestamp));
    }
    return value;
}
var VerifiablePresentation = class _VerifiablePresentation {
    constructor(presentationContext, proof, type, verifiableCredential) {
        this.presentationContext = presentationContext;
        this.proof = proof;
        this.type = type;
        this.verifiableCredential = verifiableCredential;
    }
    toString() {
        return (0, import_json_bigint2.default)({
            alwaysParseAsBig: true,
            useNativeBigInt: true,
        }).stringify(this);
    }
    static fromString(json) {
        const parsed = (0, import_json_bigint2.default)({
            alwaysParseAsBig: true,
            useNativeBigInt: true,
        }).parse(json);
        return new _VerifiablePresentation(
            parsed.presentationContext,
            parsed.proof,
            parsed.type,
            parsed.verifiableCredential
        );
    }
};

// node_modules/@concordium/web-sdk/lib/esm/types/SequenceNumber.js
var SequenceNumber_exports = {};
__export(SequenceNumber_exports, {
    JSON_DISCRIMINATOR: () => JSON_DISCRIMINATOR10,
    create: () => create3,
    fromProto: () => fromProto7,
    fromSerializable: () => fromSerializable3,
    fromTypedJSON: () => fromTypedJSON9,
    instanceOf: () => instanceOf9,
    toProto: () => toProto7,
    toSerializable: () => toSerializable3,
    toTypedJSON: () => toTypedJSON9,
    toUnwrappedJSON: () => toUnwrappedJSON8,
});
var JSON_DISCRIMINATOR10 = TypedJsonDiscriminator.SequenceNumber;
var SequenceNumber = class {
    constructor(value) {
        this.value = value;
        this.__type = JSON_DISCRIMINATOR10;
    }
};
function toUnwrappedJSON8(value) {
    return value.value;
}
function instanceOf9(value) {
    return value instanceof SequenceNumber;
}
function create3(sequenceNumber) {
    if (sequenceNumber < 1) {
        throw new Error('Invalid account sequence number: Must be 1 or higher.');
    }
    return new SequenceNumber(BigInt(sequenceNumber));
}
function fromProto7(sequenceNumber) {
    return create3(sequenceNumber.value);
}
function toProto7(sequenceNumber) {
    return {
        value: sequenceNumber.value,
    };
}
function fromSerializable3(value) {
    return create3(BigInt(value));
}
function toSerializable3(value) {
    return value.value.toString();
}
function toTypedJSON9(value) {
    return {
        ['@type']: JSON_DISCRIMINATOR10,
        value: toSerializable3(value),
    };
}
var fromTypedJSON9 = makeFromTypedJson(JSON_DISCRIMINATOR10, fromSerializable3);

// node_modules/@concordium/web-sdk/lib/esm/types/TransactionExpiry.js
var TransactionExpiry_exports = {};
__export(TransactionExpiry_exports, {
    JSON_DISCRIMINATOR: () => JSON_DISCRIMINATOR11,
    fromDate: () => fromDate,
    fromEpochSeconds: () => fromEpochSeconds,
    fromProto: () => fromProto8,
    fromSerializable: () => fromSerializable4,
    fromTypedJSON: () => fromTypedJSON10,
    futureMinutes: () => futureMinutes,
    instanceOf: () => instanceOf10,
    toDate: () => toDate,
    toProto: () => toProto8,
    toSerializable: () => toSerializable4,
    toTypedJSON: () => toTypedJSON10,
});
var JSON_DISCRIMINATOR11 = TypedJsonDiscriminator.TransactionExpiry;
var TransactionExpiry = class {
    constructor(expiryEpochSeconds) {
        this.expiryEpochSeconds = expiryEpochSeconds;
        this.__type = JSON_DISCRIMINATOR11;
    }
    toJSON() {
        return Number(this.expiryEpochSeconds);
    }
};
function instanceOf10(value) {
    return value instanceof TransactionExpiry;
}
function fromEpochSeconds(seconds) {
    if (seconds < 0n) {
        throw new Error('Invalid transaction expiry: Expiry cannot be before unix epoch.');
    }
    return new TransactionExpiry(BigInt(seconds));
}
function fromDate(expiry) {
    return fromEpochSeconds(secondsSinceEpoch(expiry));
}
function toDate(expiry) {
    return new Date(Number(expiry.expiryEpochSeconds) * 1e3);
}
function futureMinutes(minutes) {
    const expiryMillis = Date.now() + minutes * 60 * 1e3;
    return fromDate(new Date(expiryMillis));
}
function fromProto8(expiry) {
    return new TransactionExpiry(expiry.value);
}
function toProto8(expiry) {
    return {
        value: expiry.expiryEpochSeconds,
    };
}
function fromSerializable4(value) {
    return fromEpochSeconds(BigInt(value));
}
function toSerializable4(value) {
    return value.expiryEpochSeconds.toString();
}
function toTypedJSON10(value) {
    return {
        ['@type']: JSON_DISCRIMINATOR11,
        value: toSerializable4(value),
    };
}
var fromTypedJSON10 = makeFromTypedJson(JSON_DISCRIMINATOR11, fromSerializable4);

// node_modules/@concordium/web-sdk/lib/esm/deserialization.js
function deserializeUint8(source) {
    return source.read(1).readUInt8(0);
}
function deserializeMap2(serialized, decodeSize, decodeKey, decodeValue) {
    const size = decodeSize(serialized);
    const result = {};
    for (let i = 0; i < size; i += 1) {
        const key = decodeKey(serialized);
        const value = decodeValue(serialized);
        result[key] = value;
    }
    return result;
}
function deserializeAccountTransactionSignature(signatures) {
    const decodeSignature = (serialized) => {
        const length = serialized.read(2).readUInt16BE(0);
        return serialized.read(length).toString('hex');
    };
    const decodeCredentialSignatures = (serialized) =>
        deserializeMap2(serialized, deserializeUint8, deserializeUint8, decodeSignature);
    return deserializeMap2(signatures, deserializeUint8, deserializeUint8, decodeCredentialSignatures);
}
function deserializeTransactionHeader(serializedHeader) {
    const sender = fromBuffer(serializedHeader.read(32));
    const nonce = create3(serializedHeader.read(8).readBigUInt64BE(0));
    serializedHeader.read(8).readBigUInt64BE(0);
    serializedHeader.read(4).readUInt32BE(0);
    const expiry = fromEpochSeconds(serializedHeader.read(8).readBigUInt64BE(0));
    return {
        sender,
        nonce,
        expiry,
    };
}
function deserializeAccountTransaction(serializedTransaction) {
    const signatures = deserializeAccountTransactionSignature(serializedTransaction);
    const header = deserializeTransactionHeader(serializedTransaction);
    const transactionType = deserializeUint8(serializedTransaction);
    if (!isAccountTransactionType(transactionType)) {
        throw new Error('TransactionType is not a valid value: ' + transactionType);
    }
    const accountTransactionHandler = getAccountTransactionHandler(transactionType);
    const payload = accountTransactionHandler.deserialize(serializedTransaction);
    return {
        accountTransaction: {
            type: transactionType,
            payload,
            header,
        },
        signatures,
    };
}

// node_modules/@noble/ed25519/index.js
var P2 = 2n ** 255n - 19n;
var N = 2n ** 252n + 27742317777372353535851937790883648493n;
var Gx = 0x216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51an;
var Gy = 0x6666666666666666666666666666666666666666666666666666666666666658n;
var CURVE = {
    a: -1n,
    d: 37095705934669439343138083508754565189542113879843219016388785533085940283555n,
    p: P2,
    n: N,
    h: 8,
    Gx,
    Gy,
    // field prime, curve (group) order, cofactor
};
var err = (m = '') => {
    throw new Error(m);
};
var str = (s) => typeof s === 'string';
var au8 = (a, l) =>
    // is Uint8Array (of specific length)
    !(a instanceof Uint8Array) || (typeof l === 'number' && l > 0 && a.length !== l) ? err('Uint8Array expected') : a;
var u8n = (data) => new Uint8Array(data);
var toU8 = (a, len) => au8(str(a) ? h2b(a) : u8n(a), len);
var mod = (a, b = P2) => {
    let r = a % b;
    return r >= 0n ? r : b + r;
};
var isPoint = (p) => (p instanceof Point ? p : err('Point expected'));
var Gpows = void 0;
var Point = class _Point {
    constructor(ex, ey, ez, et) {
        this.ex = ex;
        this.ey = ey;
        this.ez = ez;
        this.et = et;
    }
    static fromAffine(p) {
        return new _Point(p.x, p.y, 1n, mod(p.x * p.y));
    }
    static fromHex(hex2, strict = true) {
        const { d } = CURVE;
        hex2 = toU8(hex2, 32);
        const normed = hex2.slice();
        normed[31] = hex2[31] & ~128;
        const y = b2n_LE(normed);
        if (y === 0n) {
        } else {
            if (strict && !(0n < y && y < P2)) err('bad y coord 1');
            if (!strict && !(0n < y && y < 2n ** 256n)) err('bad y coord 2');
        }
        const y2 = mod(y * y);
        const u = mod(y2 - 1n);
        const v = mod(d * y2 + 1n);
        let { isValid, value: x } = uvRatio(u, v);
        if (!isValid) err('bad y coordinate 3');
        const isXOdd = (x & 1n) === 1n;
        const isHeadOdd = (hex2[31] & 128) !== 0;
        if (isHeadOdd !== isXOdd) x = mod(-x);
        return new _Point(x, y, 1n, mod(x * y));
    }
    get x() {
        return this.toAffine().x;
    }
    // .x, .y will call expensive toAffine.
    get y() {
        return this.toAffine().y;
    }
    // Should be used with care.
    equals(other) {
        const { ex: X1, ey: Y1, ez: Z1 } = this;
        const { ex: X2, ey: Y2, ez: Z2 } = isPoint(other);
        const X1Z2 = mod(X1 * Z2),
            X2Z1 = mod(X2 * Z1);
        const Y1Z2 = mod(Y1 * Z2),
            Y2Z1 = mod(Y2 * Z1);
        return X1Z2 === X2Z1 && Y1Z2 === Y2Z1;
    }
    is0() {
        return this.equals(I);
    }
    negate() {
        return new _Point(mod(-this.ex), this.ey, this.ez, mod(-this.et));
    }
    double() {
        const { ex: X1, ey: Y1, ez: Z1 } = this;
        const { a } = CURVE;
        const A = mod(X1 * X1);
        const B = mod(Y1 * Y1);
        const C = mod(2n * mod(Z1 * Z1));
        const D = mod(a * A);
        const x1y1 = X1 + Y1;
        const E = mod(mod(x1y1 * x1y1) - A - B);
        const G2 = D + B;
        const F = G2 - C;
        const H = D - B;
        const X3 = mod(E * F);
        const Y3 = mod(G2 * H);
        const T3 = mod(E * H);
        const Z3 = mod(F * G2);
        return new _Point(X3, Y3, Z3, T3);
    }
    add(other) {
        const { ex: X1, ey: Y1, ez: Z1, et: T1 } = this;
        const { ex: X2, ey: Y2, ez: Z2, et: T2 } = isPoint(other);
        const { a, d } = CURVE;
        const A = mod(X1 * X2);
        const B = mod(Y1 * Y2);
        const C = mod(T1 * d * T2);
        const D = mod(Z1 * Z2);
        const E = mod((X1 + Y1) * (X2 + Y2) - A - B);
        const F = mod(D - C);
        const G2 = mod(D + C);
        const H = mod(B - a * A);
        const X3 = mod(E * F);
        const Y3 = mod(G2 * H);
        const T3 = mod(E * H);
        const Z3 = mod(F * G2);
        return new _Point(X3, Y3, Z3, T3);
    }
    mul(n, safe = true) {
        if (n === 0n) return safe === true ? err('cannot multiply by 0') : I;
        if (!(typeof n === 'bigint' && 0n < n && n < N)) err('invalid scalar, must be < L');
        if ((!safe && this.is0()) || n === 1n) return this;
        if (this.equals(G)) return wNAF(n).p;
        let p = I,
            f = G;
        for (let d = this; n > 0n; d = d.double(), n >>= 1n) {
            if (n & 1n) p = p.add(d);
            else if (safe) f = f.add(d);
        }
        return p;
    }
    multiply(scalar) {
        return this.mul(scalar);
    }
    // Aliases for compatibilty
    clearCofactor() {
        return this.mul(BigInt(CURVE.h), false);
    }
    // multiply by cofactor
    isSmallOrder() {
        return this.clearCofactor().is0();
    }
    // check if P is small order
    isTorsionFree() {
        let p = this.mul(N / 2n, false).double();
        if (N % 2n) p = p.add(this);
        return p.is0();
    }
    toAffine() {
        const { ex: x, ey: y, ez: z } = this;
        if (this.is0()) return { x: 0n, y: 0n };
        const iz = invert(z);
        if (mod(z * iz) !== 1n) err('invalid inverse');
        return { x: mod(x * iz), y: mod(y * iz) };
    }
    toRawBytes() {
        const { x, y } = this.toAffine();
        const b = n2b_32LE(y);
        b[31] |= x & 1n ? 128 : 0;
        return b;
    }
    toHex() {
        return b2h(this.toRawBytes());
    }
    // encode to hex string
};
Point.BASE = new Point(Gx, Gy, 1n, mod(Gx * Gy));
Point.ZERO = new Point(0n, 1n, 1n, 0n);
var { BASE: G, ZERO: I } = Point;
var padh = (num, pad) => num.toString(16).padStart(pad, '0');
var b2h = (b) =>
    Array.from(b)
        .map((e) => padh(e, 2))
        .join('');
var h2b = (hex2) => {
    const l = hex2.length;
    if (!str(hex2) || l % 2) err('hex invalid 1');
    const arr = u8n(l / 2);
    for (let i = 0; i < arr.length; i++) {
        const j = i * 2;
        const h = hex2.slice(j, j + 2);
        const b = Number.parseInt(h, 16);
        if (Number.isNaN(b) || b < 0) err('hex invalid 2');
        arr[i] = b;
    }
    return arr;
};
var n2b_32LE = (num) => h2b(padh(num, 32 * 2)).reverse();
var b2n_LE = (b) => BigInt('0x' + b2h(u8n(au8(b)).reverse()));
var concatB = (...arrs) => {
    const r = u8n(arrs.reduce((sum, a) => sum + au8(a).length, 0));
    let pad = 0;
    arrs.forEach((a) => {
        r.set(a, pad);
        pad += a.length;
    });
    return r;
};
var invert = (num, md = P2) => {
    if (num === 0n || md <= 0n) err('no inverse n=' + num + ' mod=' + md);
    let a = mod(num, md),
        b = md,
        x = 0n,
        y = 1n,
        u = 1n,
        v = 0n;
    while (a !== 0n) {
        const q = b / a,
            r = b % a;
        const m = x - u * q,
            n = y - v * q;
        (b = a), (a = r), (x = u), (y = v), (u = m), (v = n);
    }
    return b === 1n ? mod(x, md) : err('no inverse');
};
var pow2 = (x, power) => {
    let r = x;
    while (power-- > 0n) {
        r *= r;
        r %= P2;
    }
    return r;
};
var pow_2_252_3 = (x) => {
    const x2 = (x * x) % P2;
    const b2 = (x2 * x) % P2;
    const b4 = (pow2(b2, 2n) * b2) % P2;
    const b5 = (pow2(b4, 1n) * x) % P2;
    const b10 = (pow2(b5, 5n) * b5) % P2;
    const b20 = (pow2(b10, 10n) * b10) % P2;
    const b40 = (pow2(b20, 20n) * b20) % P2;
    const b80 = (pow2(b40, 40n) * b40) % P2;
    const b160 = (pow2(b80, 80n) * b80) % P2;
    const b240 = (pow2(b160, 80n) * b80) % P2;
    const b250 = (pow2(b240, 10n) * b10) % P2;
    const pow_p_5_8 = (pow2(b250, 2n) * x) % P2;
    return { pow_p_5_8, b2 };
};
var RM1 = 19681161376707505956807079304988542015446066515923890162744021073123829784752n;
var uvRatio = (u, v) => {
    const v3 = mod(v * v * v);
    const v7 = mod(v3 * v3 * v);
    const pow = pow_2_252_3(u * v7).pow_p_5_8;
    let x = mod(u * v3 * pow);
    const vx2 = mod(v * x * x);
    const root1 = x;
    const root2 = mod(x * RM1);
    const useRoot1 = vx2 === u;
    const useRoot2 = vx2 === mod(-u);
    const noRoot = vx2 === mod(-u * RM1);
    if (useRoot1) x = root1;
    if (useRoot2 || noRoot) x = root2;
    if ((mod(x) & 1n) === 1n) x = mod(-x);
    return { isValid: useRoot1 || useRoot2, value: x };
};
var modL_LE = (hash3) => mod(b2n_LE(hash3), N);
var _shaS;
var sha512a = (...m) => etc.sha512Async(...m);
var sha512s = (...m) =>
    // Sync SHA512, not set by default
    typeof _shaS === 'function' ? _shaS(...m) : err('etc.sha512Sync not set');
var hash2extK = (hashed) => {
    const head = hashed.slice(0, 32);
    head[0] &= 248;
    head[31] &= 127;
    head[31] |= 64;
    const prefix = hashed.slice(32, 64);
    const scalar = modL_LE(head);
    const point = G.mul(scalar);
    const pointBytes = point.toRawBytes();
    return { head, prefix, scalar, point, pointBytes };
};
var getExtendedPublicKeyAsync = (priv) => sha512a(toU8(priv, 32)).then(hash2extK);
var getPublicKeyAsync = (priv) => getExtendedPublicKeyAsync(priv).then((p) => p.pointBytes);
function hashFinish(asynchronous, res) {
    if (asynchronous) return sha512a(res.hashable).then(res.finish);
    return res.finish(sha512s(res.hashable));
}
var _sign = (e, rBytes, msg) => {
    const { pointBytes: P3, scalar: s } = e;
    const r = modL_LE(rBytes);
    const R = G.mul(r).toRawBytes();
    const hashable = concatB(R, P3, msg);
    const finish = (hashed) => {
        const S = mod(r + modL_LE(hashed) * s, N);
        return au8(concatB(R, n2b_32LE(S)), 64);
    };
    return { hashable, finish };
};
var signAsync = async (msg, privKey) => {
    const m = toU8(msg);
    const e = await getExtendedPublicKeyAsync(privKey);
    const rBytes = await sha512a(e.prefix, m);
    return hashFinish(true, _sign(e, rBytes, m));
};
var _verify = (sig, msg, pub) => {
    msg = toU8(msg);
    sig = toU8(sig, 64);
    const A = Point.fromHex(pub, false);
    const R = Point.fromHex(sig.slice(0, 32), false);
    const s = b2n_LE(sig.slice(32, 64));
    const SB = G.mul(s, false);
    const hashable = concatB(R.toRawBytes(), A.toRawBytes(), msg);
    const finish = (hashed) => {
        const k = modL_LE(hashed);
        const RkA = R.add(A.mul(k, false));
        return RkA.add(SB.negate()).clearCofactor().is0();
    };
    return { hashable, finish };
};
var verifyAsync = async (s, m, p) => hashFinish(true, _verify(s, m, p));
var cr = () =>
    // We support: 1) browsers 2) node.js 19+
    typeof globalThis === 'object' && 'crypto' in globalThis ? globalThis.crypto : void 0;
var etc = {
    bytesToHex: b2h,
    hexToBytes: h2b,
    concatBytes: concatB,
    mod,
    invert,
    randomBytes: (len) => {
        const crypto2 = cr();
        if (!crypto2) err('crypto.getRandomValues must be defined');
        return crypto2.getRandomValues(u8n(len));
    },
    sha512Async: async (...messages) => {
        const crypto2 = cr();
        if (!crypto2) err('crypto.subtle or etc.sha512Async must be defined');
        const m = concatB(...messages);
        return u8n(await crypto2.subtle.digest('SHA-512', m.buffer));
    },
    sha512Sync: void 0,
    // Actual logic below
};
Object.defineProperties(etc, {
    sha512Sync: {
        configurable: false,
        get() {
            return _shaS;
        },
        set(f) {
            if (!_shaS) _shaS = f;
        },
    },
});
var W = 8;
var precompute = () => {
    const points = [];
    const windows = 256 / W + 1;
    let p = G,
        b = p;
    for (let w = 0; w < windows; w++) {
        b = p;
        points.push(b);
        for (let i = 1; i < 2 ** (W - 1); i++) {
            b = b.add(p);
            points.push(b);
        }
        p = b.double();
    }
    return points;
};
var wNAF = (n) => {
    const comp = Gpows || (Gpows = precompute());
    const neg = (cnd, p2) => {
        let n2 = p2.negate();
        return cnd ? n2 : p2;
    };
    let p = I,
        f = G;
    const windows = 1 + 256 / W;
    const wsize = 2 ** (W - 1);
    const mask = BigInt(2 ** W - 1);
    const maxNum = 2 ** W;
    const shiftBy = BigInt(W);
    for (let w = 0; w < windows; w++) {
        const off = w * wsize;
        let wbits = Number(n & mask);
        n >>= shiftBy;
        if (wbits > wsize) {
            wbits -= maxNum;
            n += 1n;
        }
        const off1 = off,
            off2 = off + Math.abs(wbits) - 1;
        const cnd1 = w % 2 !== 0,
            cnd2 = wbits < 0;
        if (wbits === 0) {
            f = f.add(neg(cnd1, comp[off1]));
        } else {
            p = p.add(neg(cnd2, comp[off2]));
        }
    }
    return { p, f };
};

// node_modules/@concordium/web-sdk/lib/esm/signHelpers.js
var import_buffer14 = __toESM(require_buffer(), 1);
function parseWallet(walletString) {
    const wallet = JSON.parse(walletString);
    if (typeof wallet.type !== 'string') {
        throw Error('Expected field "type" to be of type "string" but was of type "' + typeof wallet.type + '"');
    }
    if (typeof wallet.v !== 'number') {
        throw Error('Expected field "v" to be of type "number" but was of type "' + typeof wallet.v + '"');
    }
    if (typeof wallet.environment !== 'string') {
        throw Error(
            'Expected field "environment" to be of type "string" but was of type "' + typeof wallet.environment + '"'
        );
    }
    if (typeof wallet.value.address !== 'string') {
        throw Error(
            'Expected field "value.address" to be of type "string" but was of type "' +
                typeof wallet.value.address +
                '"'
        );
    }
    if (wallet.value.accountKeys === void 0) {
        throw Error('Expected field "value.accountKeys" to be defined, but was not');
    }
    if (wallet.value.credentials === void 0) {
        throw Error('Expected field "value.credentials" to be defined, but was not');
    }
    return wallet;
}
var getSignature = async (digest, privateKey) =>
    import_buffer14.Buffer.from(await signAsync(new Uint8Array(digest), privateKey));
function buildBasicAccountSigner(privateKey) {
    return {
        getSignatureCount() {
            return 1n;
        },
        async sign(digest) {
            const sig = await getSignature(digest, privateKey);
            return {
                0: {
                    0: sig.toString('hex'),
                },
            };
        },
    };
}
var isWalletExport = (value) => {
    var _a;
    return ((_a = value.value) == null ? void 0 : _a.accountKeys) !== void 0;
};
var isSimpleAccountKeys = (value) => {
    var _a;
    return ((_a = value.value) == null ? void 0 : _a.accountKeys) === void 0 && value.accountKeys === void 0;
};
var getKeys = (value) => {
    if (isSimpleAccountKeys(value)) {
        return value;
    }
    const { keys } = isWalletExport(value) ? value.value.accountKeys : value.accountKeys;
    return mapRecord(keys, (credKeys) => mapRecord(credKeys.keys, (keyPair) => keyPair.signKey));
};
var getCredentialSignature = async (digest, keys) => {
    const sig = {};
    for (const key in keys) {
        const signature = await getSignature(digest, keys[key]);
        sig[key] = signature.toString('hex');
    }
    return sig;
};
function buildAccountSigner(value) {
    if (typeof value === 'string') {
        return buildBasicAccountSigner(value);
    }
    const keys = getKeys(value);
    const numKeys = Object.values(keys).reduce((acc, credKeys) => acc + BigInt(Object.keys(credKeys).length), 0n);
    return {
        getSignatureCount() {
            return numKeys;
        },
        async sign(digest) {
            const sig = {};
            for (const key in keys) {
                sig[key] = await getCredentialSignature(digest, keys[key]);
            }
            return sig;
        },
    };
}
function signTransaction(transaction, signer) {
    const digest = getAccountTransactionSignDigest(transaction, signer.getSignatureCount());
    return signer.sign(digest);
}
function getMessageDigest(account, message) {
    const prepend = import_buffer14.Buffer.alloc(8, 0);
    const rawMessage = typeof message === 'string' ? import_buffer14.Buffer.from(message, 'utf8') : message;
    return sha256([toBuffer2(account), prepend, rawMessage]);
}
function signMessage(account, message, signer) {
    return signer.sign(getMessageDigest(account, message));
}
async function verifyMessageSignature(message, signature, accountInfo2) {
    if (Object.keys(signature).length < accountInfo2.accountThreshold) {
        return false;
    }
    const digest = getMessageDigest(accountInfo2.accountAddress, message);
    for (const credentialIndex of Object.keys(signature)) {
        const credential = accountInfo2.accountCredentials[Number(credentialIndex)];
        if (!credential) {
            throw new Error('Signature contains signature for non-existing credential');
        }
        const credentialSignature = signature[Number(credentialIndex)];
        const credentialKeys = credential.value.contents.credentialPublicKeys;
        if (Object.keys(credentialSignature).length < credentialKeys.threshold) {
            return false;
        }
        for (const keyIndex of Object.keys(credentialSignature)) {
            if (!credentialKeys.keys[Number(keyIndex)]) {
                throw new Error('Signature contains signature for non-existing keyIndex');
            }
            if (
                !(await verifyAsync(
                    credentialSignature[Number(keyIndex)],
                    digest,
                    credentialKeys.keys[Number(keyIndex)].verifyKey
                ))
            ) {
                return false;
            }
        }
    }
    return true;
}

// node_modules/@concordium/web-sdk/lib/esm/versionedTypeHelpers.js
var isAuthorizationsV1 = (as) => as.version === 1;
var isChainParametersV0 = (cp) => cp.version === 0;
var isChainParametersV1 = (cp) => cp.version === 1;
var isChainParametersV2 = (cp) => cp.version === 2;
var isBlockInfoV0 = (bi) => bi.version === 0;
var isBlockInfoV1 = (bi) => bi.version === 1;
var isConsensusStatusV0 = (cs) => cs.version === 0;
var isConsensusStatusV1 = (cs) => cs.version === 1;
var isElectionInfoV0 = (ei) => ei.version === 0;
var isElectionInfoV1 = (ei) => ei.version === 1;
var isInstanceInfoV1 = (info) => info.version === 1;
var isInstanceInfoV0 = (info) => info.version === void 0 || info.version === 0;
function isRewardStatusV1(rs) {
    return rs.version === 1;
}

// node_modules/@concordium/web-sdk/lib/esm/accountHelpers.js
var isDelegatorAccount = (ai) => ai.type === AccountInfoType.Delegator;
var isBakerAccount = (ai) => ai.type === AccountInfoType.Baker;
var isReduceStakePendingChange = (spc) => spc.change === StakePendingChangeType.ReduceStake;
var isRemovalPendingChange = (spc) => spc.change === StakePendingChangeType.RemoveStake;

// node_modules/@concordium/web-sdk/lib/esm/commonProofTypes.js
var MIN_DATE = '18000101';
var MAX_DATE = '99990101';
var EU_MEMBERS = [
    'AT',
    'BE',
    'BG',
    'CY',
    'CZ',
    'DK',
    'EE',
    'FI',
    'FR',
    'DE',
    'GR',
    'HU',
    'IE',
    'IT',
    'LV',
    'LT',
    'LU',
    'MT',
    'NL',
    'PL',
    'PT',
    'RO',
    'SK',
    'SI',
    'ES',
    'SE',
    'HR',
];
var StatementTypes;
(function (StatementTypes2) {
    StatementTypes2['RevealAttribute'] = 'RevealAttribute';
    StatementTypes2['AttributeInSet'] = 'AttributeInSet';
    StatementTypes2['AttributeNotInSet'] = 'AttributeNotInSet';
    StatementTypes2['AttributeInRange'] = 'AttributeInRange';
})(StatementTypes || (StatementTypes = {}));

// node_modules/@concordium/web-sdk/lib/esm/uleb128.js
var import_buffer15 = __toESM(require_buffer(), 1);
var uleb128Decode = (buffer) => {
    const [bigint, index] = uleb128DecodeWithIndex(buffer);
    if (index !== buffer.length) {
        throw Error('The provided buffer did not contain just a single ULEB128 encoded number');
    }
    return bigint;
};
function uleb128DecodeWithIndex(bytes2, index = 0) {
    if (bytes2.length <= index) {
        throw Error(
            `The ULEB128 encoding was not valid: The passed bytes from index ${index} must at least contain a single byte`
        );
    }
    let acc = 0n;
    let nextIndex = index;
    for (let i = index; i < bytes2.length; i++) {
        nextIndex += 1;
        const byte = bytes2[i];
        const c = BigInt(byte & 127) << BigInt(7 * (i - index));
        acc += c;
        if ((byte & 128) === 0) {
            return [acc, nextIndex];
        }
    }
    throw Error('The ULEB128 encoding was not valid: Could not find end of number');
}
var uleb128Encode = (num) => {
    const res = [];
    let cursor = 0n;
    while (true) {
        const next = cursor + 7n;
        const value = (num >> cursor) & BigInt(127);
        if (num >> next === 0n) {
            res.push(Number(value));
            break;
        }
        res.push(Number(value) | 128);
        cursor = next;
    }
    return import_buffer15.Buffer.from(res);
};

// node_modules/@concordium/web-sdk/lib/esm/GenericContract.js
var import_buffer17 = __toESM(require_buffer(), 1);
var import_json_bigint3 = __toESM(require_json_bigint(), 1);

// node_modules/@concordium/web-sdk/lib/esm/types/ContractAddress.js
var ContractAddress_exports = {};
__export(ContractAddress_exports, {
    JSON_DISCRIMINATOR: () => JSON_DISCRIMINATOR12,
    create: () => create4,
    equals: () => equals5,
    fromProto: () => fromProto9,
    fromSchemaValue: () => fromSchemaValue5,
    fromSerializable: () => fromSerializable5,
    fromTypedJSON: () => fromTypedJSON11,
    instanceOf: () => instanceOf11,
    toProto: () => toProto9,
    toSchemaValue: () => toSchemaValue5,
    toSerializable: () => toSerializable5,
    toString: () => toString5,
    toTypedJSON: () => toTypedJSON11,
    toUnwrappedJSON: () => toUnwrappedJSON9,
});
var JSON_DISCRIMINATOR12 = TypedJsonDiscriminator.ContractAddress;
var ContractAddress = class {
    constructor(index, subindex) {
        this.index = index;
        this.subindex = subindex;
        this.__type = JSON_DISCRIMINATOR12;
    }
};
function toUnwrappedJSON9({ index, subindex }) {
    return { index, subindex };
}
function instanceOf11(value) {
    return value instanceof ContractAddress;
}
function create4(index, subindex = 0n) {
    if (index < 0) {
        throw new Error('Invalid contract address: The index cannot be a negative number.');
    }
    if (subindex < 0) {
        throw new Error('Invalid contract address: The subindex cannot be a negative number.');
    }
    return new ContractAddress(BigInt(index), BigInt(subindex));
}
function toSchemaValue5(contractAddress) {
    return { index: contractAddress.index, subindex: contractAddress.subindex };
}
function fromSchemaValue5(contractAddress) {
    return create4(contractAddress.index, contractAddress.subindex);
}
function fromProto9(contractAddress) {
    return create4(contractAddress.index, contractAddress.subindex);
}
function toProto9(contractAddress) {
    return {
        index: contractAddress.index,
        subindex: contractAddress.subindex,
    };
}
function equals5(left, right) {
    return left.index === right.index && left.subindex === right.subindex;
}
function fromSerializable5(value) {
    return new ContractAddress(BigInt(value.index), BigInt(value.subindex));
}
function toSerializable5(contractAddress) {
    return {
        index: contractAddress.index.toString(),
        subindex: contractAddress.subindex.toString(),
    };
}
function toString5(contractAddress) {
    return `<${contractAddress.index}, ${contractAddress.subindex}>`;
}
function toTypedJSON11(value) {
    return {
        ['@type']: JSON_DISCRIMINATOR12,
        value: toSerializable5(value),
    };
}
var fromTypedJSON11 = makeFromTypedJson(JSON_DISCRIMINATOR12, fromSerializable5);

// node_modules/@concordium/web-sdk/lib/esm/types/ReturnValue.js
var ReturnValue_exports = {};
__export(ReturnValue_exports, {
    JSON_DISCRIMINATOR: () => JSON_DISCRIMINATOR13,
    empty: () => empty2,
    fromBuffer: () => fromBuffer4,
    fromHexString: () => fromHexString3,
    fromTypedJSON: () => fromTypedJSON12,
    instanceOf: () => instanceOf12,
    parseWithSchemaType: () => parseWithSchemaType,
    parseWithSchemaTypeBase64: () => parseWithSchemaTypeBase64,
    toBuffer: () => toBuffer4,
    toHexString: () => toHexString3,
    toTypedJSON: () => toTypedJSON12,
    toUnwrappedJSON: () => toUnwrappedJSON10,
});
var import_buffer16 = __toESM(require_buffer(), 1);
var JSON_DISCRIMINATOR13 = TypedJsonDiscriminator.ReturnValue;
var ReturnValue = class {
    constructor(buffer) {
        this.buffer = buffer;
        this.__type = JSON_DISCRIMINATOR13;
    }
};
function toUnwrappedJSON10(value) {
    return toHexString3(value);
}
function instanceOf12(value) {
    return value instanceof ReturnValue;
}
function empty2() {
    return fromBuffer4(new ArrayBuffer(0));
}
function fromBuffer4(buffer) {
    return new ReturnValue(new Uint8Array(buffer));
}
function fromHexString3(hex2) {
    return new ReturnValue(new Uint8Array(import_buffer16.Buffer.from(hex2, 'hex')));
}
function toHexString3(returnValue) {
    return import_buffer16.Buffer.from(returnValue.buffer).toString('hex');
}
function toBuffer4(parameter) {
    return parameter.buffer;
}
function parseWithSchemaType(returnValue, schemaType) {
    const schemaBytes = serializeSchemaType(schemaType);
    return deserializeTypeValue2(returnValue.buffer, schemaBytes);
}
function parseWithSchemaTypeBase64(returnValue, schemaBase64) {
    const schemaBytes = import_buffer16.Buffer.from(schemaBase64, 'base64');
    return deserializeTypeValue2(returnValue.buffer, schemaBytes);
}
function toTypedJSON12(value) {
    return {
        ['@type']: JSON_DISCRIMINATOR13,
        value: toHexString3(value),
    };
}
var fromTypedJSON12 = makeFromTypedJson(JSON_DISCRIMINATOR13, fromHexString3);

// node_modules/@concordium/web-sdk/lib/esm/GenericContract.js
function getContractUpdateDefaultExpiryDate() {
    return futureMinutes(5);
}
var ContractDryRun = class {
    constructor(grpcClient, contractAddress, contractName) {
        this.grpcClient = grpcClient;
        this.contractAddress = contractAddress;
        this.contractName = contractName;
    }
    /**
     * Performs a dry-run of a contract entrypoint invocation.
     * Useful for getting an indication of the result of an invocation of the entrypoint (e.g. getting a cost estimate).
     *
     * @template T - The type of the input given
     *
     * @param {EntrypointName.Type} entrypoint - The name of the receive function to invoke.
     * @param {ContractInvokeMetadata | ContractAddress | AccountAddress.Type} metaOrInvoker - Metadata for contract invocation of the address of the invoker.
     * @param {Function} serializer - A function for serializing the input to bytes.
     * @param {T} input - Input for for contract function.
     * @param {BlockHash.Type} [blockHash] - The hash of the block to perform the invocation of. Defaults to the latest finalized block on chain.
     *
     * @returns {InvokeContractResult} the contract invocation result, which includes whether or not the invocation succeeded along with the energy spent.
     */
    invokeMethod(entrypoint, metaOrInvoker, serializer, input, blockHash) {
        const parameter = fromBuffer2(serializer(input));
        const meta =
            instanceOf(metaOrInvoker) || instanceOf11(metaOrInvoker) ? { invoker: metaOrInvoker } : metaOrInvoker;
        return this.grpcClient.invokeContract(
            {
                ...meta,
                contract: this.contractAddress,
                parameter,
                method: create(this.contractName, entrypoint),
            },
            blockHash
        );
    }
};
var ContractBase = class {
    constructor(grpcClient, contractAddress, contractName, schema) {
        this.grpcClient = grpcClient;
        this.contractAddress = contractAddress;
        this.contractName = contractName;
        this.schema = schema;
        this.dryRunInstance = new ContractDryRun(grpcClient, contractAddress, contractName);
    }
    /**
     * Helper function for getting the {@link InstanceInfo} of a contract
     *
     * @param {ConcordiumGRPCClient} grpcClient - The GRPC client for accessing a node.
     * @param {ContractAddress.Type} contractAddress - The address of the contract.
     *
     * @throws if the {@link InstanceInfo} of the contract could not be found.
     *
     * @returns {InstanceInfo} the instance info.
     */
    static async getInstanceInfo(grpcClient, contractAddress) {
        try {
            return await grpcClient.getInstanceInfo(contractAddress);
        } catch (e) {
            throw new Error(
                `Could not get contract instance info for contract at address ${toString5(contractAddress)}: ${e.message ?? e}`
            );
        }
    }
    /**
     * Helper function for getting the name of a contract
     *
     * @param {ConcordiumGRPCClient} grpcClient - The GRPC client for accessing a node.
     * @param {ContractAddress.Type} contractAddress - The address of the contract.
     *
     * @throws if the {@link InstanceInfo} of the contract could not be found.
     *
     * @returns {ContractName.Type} the name of the contract.
     */
    static async getContractName(grpcClient, contractAddress) {
        const instanceInfo2 = await this.getInstanceInfo(grpcClient, contractAddress);
        return fromInitName(instanceInfo2.name);
    }
    /**
       * Get information on this smart contract instance.
       *
       * @param {BlockHash.Type} [blockHash] Hash of the block to check information at. When not provided the last finalized block is used.
  
       * @throws if the {@link InstanceInfo} of the contract could not be found.
  
       * @returns {InstanceInfo} The instance info.
       */
    async getInstanceInfo(blockHash) {
        return this.grpcClient.getInstanceInfo(this.contractAddress, blockHash);
    }
    /**
     * Check if the smart contract instance exists on the blockchain and whether it uses a matching contract name.
     * Optionally a module reference can be provided to check if the contract instance uses this module.
     *
     * @param {ContractCheckOnChainOptions} [options] Options for checking information on chain.
     *
     * @throws {RpcError} If failing to communicate with the concordium node or if the instance does not exist on chain or fails the checks.
     */
    async checkOnChain(options = {}) {
        const info = await this.getInstanceInfo(options.blockHash);
        const contractNameOnChain = fromInitName(info.name);
        if (!equals2(contractNameOnChain, this.contractName)) {
            throw new Error(
                `Instance ${toString5(this.contractAddress)} has contract name '${contractNameOnChain.value}' on chain. The client expected: '${this.contractName.value}'.`
            );
        }
        if (options.moduleReference !== void 0 && info.sourceModule.moduleRef !== options.moduleReference.moduleRef) {
            throw new Error(
                `Instance ${toString5(this.contractAddress)} uses module with reference '${info.sourceModule.moduleRef}' expected '${options.moduleReference.moduleRef}'`
            );
        }
    }
    /**
     * A dry-run instance, providing access to methods for performing dry-run invocations of update instructions.
     */
    get dryRun() {
        return this.dryRunInstance;
    }
    createUpdateTransaction(entrypoint, serializeInput, { amount = zero(), energy }, input, inputJsonFormatter) {
        var _a;
        const parameter = fromBuffer2(serializeInput(input));
        const payload = {
            amount,
            address: this.contractAddress,
            receiveName: create(this.contractName, entrypoint),
            maxContractExecutionEnergy: energy,
            message: parameter,
        };
        const transaction = {
            type: AccountTransactionType.Update,
            payload,
        };
        if (inputJsonFormatter === void 0) {
            return transaction;
        }
        const jsonParameter = inputJsonFormatter(input);
        let schema;
        if (typeof this.schema === 'string') {
            schema = {
                value: this.schema,
                type: 'module',
            };
        } else if (((_a = this.schema) == null ? void 0 : _a[toString3(entrypoint)]) !== void 0) {
            schema = {
                value: this.schema[toString3(entrypoint)],
                type: 'parameter',
            };
        }
        return {
            ...transaction,
            parameter: {
                hex: toHexString(parameter),
                json: jsonParameter,
            },
            schema,
        };
    }
    /**
     * Submits a {@link ContractUpdateTransaction} contract update transaction.
     *
     * @param {ContractUpdateTransaction} transactionBase - The details of the transaction to send.
     * @param {ContractTransactionMetadata} metadata - Metadata to be used for the transaction (with defaults).
     * @param {AccountSigner} signer - An object to use for signing the transaction.
     *
     * @throws If the query could not be invoked successfully.
     *
     * @returns {TransactionHash.Type} The transaction hash of the update transaction
     */
    async sendUpdateTransaction(
        transactionBase,
        { senderAddress, expiry = getContractUpdateDefaultExpiryDate() },
        signer
    ) {
        const { nonce } = await this.grpcClient.getNextAccountNonce(senderAddress);
        const header = {
            expiry,
            nonce,
            sender: senderAddress,
        };
        const transaction = {
            ...transactionBase,
            header,
        };
        const signature = await signTransaction(transaction, signer);
        return this.grpcClient.sendAccountTransaction(transaction, signature);
    }
    /**
     * Creates and sends a contract update transaction with parameter `input` to `entrypoint`.
     *
     * @template T - The type of the input
     *
     * @param {EntrypointName.Type} entrypoint - The name of the receive function to invoke.
     * @param {Function} serializeInput - A function to serialize the `input` to bytes.
     * @param {CIS2.TransactionMetadata} metadata - Metadata to be used for the transaction (with defaults).
     * @param {T} input - Input for for contract function.
     * @param {AccountSigner} signer - An object to use for signing the transaction.
     *
     * @throws If the query could not be invoked successfully.
     *
     * @returns {TransactionHash.Type} The transaction hash of the update transaction
     */
    async createAndSendUpdateTransaction(entrypoint, serializeInput, metadata, input, signer) {
        const transactionBase = this.createUpdateTransaction(entrypoint, serializeInput, metadata, input);
        return this.sendUpdateTransaction(transactionBase, metadata, signer);
    }
    /**
     * Invokes `entrypoint` view function on contract.
     *
     * @template T - The type of the input
     * @template R - The type the invocation response should be deserialized into.
     *
     * @param {EntrypointName.Type} entrypoint - The name of the view function to invoke.
     * @param {Function} serializeInput - A function to serialize the `input` to bytes.
     * @param {Function} deserializeResponse - A function to deserialize the value returned from the view invocation.
     * @param {T | T[]} input - Input for for contract function.
     * @param {BlockHash.Type} [blockHash] - The hash of the block to perform the invocation of. Defaults to the latest finalized block on chain.
     *
     * @throws If the query could not be invoked successfully.
     *
     * @returns {R} The transaction hash of the update transaction
     */
    async invokeView(entrypoint, serializeInput, deserializeResponse, input, blockHash) {
        const parameter = fromBuffer2(serializeInput(input));
        const response = await this.grpcClient.invokeContract(
            {
                contract: this.contractAddress,
                parameter,
                method: create(this.contractName, entrypoint),
            },
            blockHash
        );
        if (response === void 0 || response.tag === 'failure' || response.returnValue === void 0) {
            throw new Error(
                `Failed to invoke view ${entrypoint} for contract at ${toString5(this.contractAddress)}${response.tag === 'failure' && ` with error ${(0, import_json_bigint3.stringify)(response.reason)}`}`
            );
        }
        return deserializeResponse(toHexString3(response.returnValue));
    }
};
var Contract = class _Contract extends ContractBase {
    /**
     * Creates a new `Contract` instance by querying the node for the necessary information through the supplied `grpcClient`.
     *
     * @param {ConcordiumGRPCClient} grpcClient - The client used for contract invocations and updates.
     * @param {ContractAddress} contractAddress - Address of the contract instance.
     * @param {Schema} [schema] - The schema of the contract, either defined as parameter schemas per entrypoint `E` or as a single module schema.
     * If no schema is defined, an attempt to get an embedded schema from the contract is made.
     *
     * @throws If `InstanceInfo` could not be received for the contract,
     *
     * or if the contract name could not be parsed from the information received from the node.
     */
    static async create(grpcClient, contractAddress, schema) {
        const instanceInfo2 = await super.getInstanceInfo(grpcClient, contractAddress);
        const contractName = fromInitName(instanceInfo2.name);
        let mSchema;
        if (!schema) {
            try {
                const raw = await grpcClient.getEmbeddedSchema(instanceInfo2.sourceModule);
                const encoded = import_buffer17.Buffer.from(raw).toString('base64');
                if (encoded) {
                    mSchema = encoded;
                }
            } catch {}
        }
        return new _Contract(grpcClient, contractAddress, contractName, schema ?? mSchema);
    }
};
var CISContract = class extends ContractBase {
    constructor(grpcClient, contractAddress, contractName) {
        super(grpcClient, contractAddress, contractName);
        this.grpcClient = grpcClient;
        this.contractAddress = contractAddress;
        this.contractName = contractName;
        this.dryRunInstance = this.makeDryRunInstance(grpcClient, contractAddress, contractName);
    }
    /**
     * A dry-run instance, providing access to methods for performing dry-run invocations of update instructions.
     */
    get dryRun() {
        return this.dryRunInstance;
    }
    createUpdateTransaction(entrypoint, serializeInput, metadata, input, inputJsonFormatter) {
        if (inputJsonFormatter === void 0) {
            return super.createUpdateTransaction(entrypoint, serializeInput, metadata, input);
        }
        const transaction = super.createUpdateTransaction(
            entrypoint,
            serializeInput,
            metadata,
            input,
            inputJsonFormatter
        );
        if (transaction.schema === void 0) {
            throw new Error(`Could not find schema for entrypoint ${entrypoint}`);
        }
        return transaction;
    }
};

// node_modules/@concordium/web-sdk/lib/esm/types/ModuleClient.js
var ModuleClient_exports = {};
__export(ModuleClient_exports, {
    checkOnChain: () => checkOnChain,
    create: () => create5,
    createAndSendInitTransaction: () => createAndSendInitTransaction,
    createUnchecked: () => createUnchecked,
    getModuleSource: () => getModuleSource,
    instanceOf: () => instanceOf13,
});
var ModuleClient = class {
    constructor(grpcClient, moduleReference) {
        this.grpcClient = grpcClient;
        this.moduleReference = moduleReference;
        this.__nominal = true;
    }
};
function instanceOf13(value) {
    return value instanceof ModuleClient;
}
function createUnchecked(grpcClient, moduleReference) {
    return new ModuleClient(grpcClient, moduleReference);
}
async function create5(grpcClient, moduleReference) {
    const mod2 = new ModuleClient(grpcClient, moduleReference);
    await checkOnChain(mod2);
    return mod2;
}
async function checkOnChain(moduleClient, blockHash) {
    await getModuleSource(moduleClient, blockHash);
}
function getModuleSource(moduleClient, blockHash) {
    return moduleClient.grpcClient.getModuleSource(moduleClient.moduleReference, blockHash);
}
async function createAndSendInitTransaction(moduleClient, contractName, metadata, parameter, signer) {
    const payload = {
        moduleRef: moduleClient.moduleReference,
        amount: metadata.amount ?? zero(),
        initName: contractName,
        maxContractExecutionEnergy: metadata.energy,
        param: parameter,
    };
    const { nonce } = await moduleClient.grpcClient.getNextAccountNonce(metadata.senderAddress);
    const header = {
        expiry: metadata.expiry ?? futureMinutes(5),
        nonce,
        sender: metadata.senderAddress,
    };
    const transaction = {
        type: AccountTransactionType.InitContract,
        header,
        payload,
    };
    const signature = await signTransaction(transaction, signer);
    return moduleClient.grpcClient.sendAccountTransaction(transaction, signature);
}

// node_modules/@concordium/web-sdk/lib/esm/types/TransactionHash.js
var TransactionHash_exports = {};
__export(TransactionHash_exports, {
    JSON_DISCRIMINATOR: () => JSON_DISCRIMINATOR14,
    equals: () => equals6,
    fromBuffer: () => fromBuffer5,
    fromHexString: () => fromHexString4,
    fromProto: () => fromProto10,
    fromTypedJSON: () => fromTypedJSON13,
    instanceOf: () => instanceOf14,
    toBuffer: () => toBuffer5,
    toHexString: () => toHexString4,
    toProto: () => toProto10,
    toTypedJSON: () => toTypedJSON13,
    toUnwrappedJSON: () => toUnwrappedJSON11,
});
var import_buffer18 = __toESM(require_buffer(), 1);
var JSON_DISCRIMINATOR14 = TypedJsonDiscriminator.TransactionHash;
var TRANSACTION_HASH_BYTE_LENGTH = 32;
var TransactionHash = class {
    constructor(buffer) {
        this.buffer = buffer;
        this.__type = JSON_DISCRIMINATOR14;
    }
};
function toUnwrappedJSON11(value) {
    return toHexString4(value);
}
function instanceOf14(value) {
    return value instanceof TransactionHash;
}
function fromBuffer5(buffer) {
    if (buffer.byteLength !== TRANSACTION_HASH_BYTE_LENGTH) {
        throw new Error(
            `Invalid transaction hash provided: Expected a buffer containing 32 bytes, instead got '${import_buffer18.Buffer.from(buffer).toString('hex')}'.`
        );
    }
    return new TransactionHash(new Uint8Array(buffer));
}
function fromHexString4(hex2) {
    return fromBuffer5(import_buffer18.Buffer.from(hex2, 'hex'));
}
function toHexString4(hash3) {
    return import_buffer18.Buffer.from(hash3.buffer).toString('hex');
}
function toBuffer5(hash3) {
    return hash3.buffer;
}
function fromProto10(transactionHash) {
    return fromBuffer5(transactionHash.value);
}
function toProto10(transactionHash) {
    return {
        value: transactionHash.buffer,
    };
}
function equals6(left, right) {
    for (let i = 0; i < TRANSACTION_HASH_BYTE_LENGTH; i++) {
        if (left.buffer.at(i) !== right.buffer.at(i)) {
            return false;
        }
    }
    return true;
}
function toTypedJSON13(value) {
    return {
        ['@type']: JSON_DISCRIMINATOR14,
        value: toHexString4(value),
    };
}
var fromTypedJSON13 = makeFromTypedJson(JSON_DISCRIMINATOR14, fromHexString4);

// node_modules/@concordium/web-sdk/lib/esm/types/BlockHash.js
var BlockHash_exports = {};
__export(BlockHash_exports, {
    JSON_DISCRIMINATOR: () => JSON_DISCRIMINATOR15,
    equals: () => equals7,
    fromBuffer: () => fromBuffer6,
    fromHexString: () => fromHexString5,
    fromProto: () => fromProto11,
    fromTypedJSON: () => fromTypedJSON14,
    instanceOf: () => instanceOf15,
    toBlockHashInput: () => toBlockHashInput,
    toBuffer: () => toBuffer6,
    toHexString: () => toHexString5,
    toProto: () => toProto11,
    toTypedJSON: () => toTypedJSON14,
    toUnwrappedJSON: () => toUnwrappedJSON12,
});
var import_buffer19 = __toESM(require_buffer(), 1);
var BLOCK_HASH_BYTE_LENGTH = 32;
var JSON_DISCRIMINATOR15 = TypedJsonDiscriminator.BlockHash;
var BlockHash = class {
    constructor(buffer) {
        this.buffer = buffer;
        this.typedJsonType = JSON_DISCRIMINATOR15;
        this.__type = JSON_DISCRIMINATOR15;
    }
};
function toUnwrappedJSON12(value) {
    return toHexString5(value);
}
function instanceOf15(value) {
    return value instanceof BlockHash;
}
function fromBuffer6(buffer) {
    if (buffer.byteLength !== BLOCK_HASH_BYTE_LENGTH) {
        throw new Error(
            `Invalid transaction hash provided: Expected a buffer containing 32 bytes, instead got '${import_buffer19.Buffer.from(buffer).toString('hex')}'.`
        );
    }
    return new BlockHash(new Uint8Array(buffer));
}
function fromHexString5(hex2) {
    return fromBuffer6(import_buffer19.Buffer.from(hex2, 'hex'));
}
function toHexString5(hash3) {
    return import_buffer19.Buffer.from(hash3.buffer).toString('hex');
}
function toBuffer6(hash3) {
    return hash3.buffer;
}
function fromProto11(hash3) {
    return fromBuffer6(hash3.value);
}
function toProto11(hash3) {
    return {
        value: hash3.buffer,
    };
}
function toBlockHashInput(blockHash) {
    return {
        blockHashInput: { oneofKind: 'given', given: toProto11(blockHash) },
    };
}
function equals7(left, right) {
    for (let i = 0; i < BLOCK_HASH_BYTE_LENGTH; i++) {
        if (left.buffer.at(i) !== right.buffer.at(i)) {
            return false;
        }
    }
    return true;
}
function toTypedJSON14(value) {
    return {
        ['@type']: JSON_DISCRIMINATOR15,
        value: toHexString5(value),
    };
}
var fromTypedJSON14 = makeFromTypedJson(JSON_DISCRIMINATOR15, fromHexString5);

// node_modules/@concordium/web-sdk/lib/esm/types/InitName.js
var InitName_exports = {};
__export(InitName_exports, {
    JSON_DISCRIMINATOR: () => JSON_DISCRIMINATOR16,
    fromContractName: () => fromContractName,
    fromProto: () => fromProto12,
    fromString: () => fromString4,
    fromStringUnchecked: () => fromStringUnchecked4,
    fromTypedJSON: () => fromTypedJSON15,
    instanceOf: () => instanceOf16,
    toProto: () => toProto12,
    toString: () => toString6,
    toTypedJSON: () => toTypedJSON15,
    toUnwrappedJSON: () => toUnwrappedJSON13,
});
var JSON_DISCRIMINATOR16 = TypedJsonDiscriminator.InitName;
var InitName = class {
    get serializable() {
        return this.value;
    }
    constructor(value) {
        this.value = value;
        this.__type = JSON_DISCRIMINATOR16;
    }
};
function toUnwrappedJSON13(value) {
    return toString6(value);
}
function instanceOf16(value) {
    return value instanceof InitName;
}
function fromString4(value) {
    if (value.length > 100) {
        throw new Error('Invalid InitName: Can be atmost 100 characters long.');
    }
    if (!value.startsWith('init_')) {
        throw new Error("Invalid InitName: Must be prefixed with 'init_'.");
    }
    if (value.includes('.')) {
        throw new Error("Invalid InitName: Must not contain a '.' character.");
    }
    if (!isAsciiAlphaNumericPunctuation(value)) {
        throw new Error('Invalid InitName: Must only contain ASCII alpha, numeric and punctuation characters.');
    }
    return new InitName(value);
}
function fromStringUnchecked4(value) {
    return new InitName(value);
}
function fromContractName(contractName) {
    return fromStringUnchecked4('init_' + contractName.value);
}
function toString6(initName) {
    return initName.value;
}
function fromProto12(initName) {
    return fromStringUnchecked4(initName.value);
}
function toProto12(initName) {
    return {
        value: initName.value,
    };
}
function toTypedJSON15(value) {
    return {
        ['@type']: JSON_DISCRIMINATOR16,
        value: toString6(value),
    };
}
var fromTypedJSON15 = makeFromTypedJson(JSON_DISCRIMINATOR16, fromString4);

// node_modules/@concordium/web-sdk/lib/esm/types/CredentialRegistrationId.js
var CredentialRegistrationId_exports = {};
__export(CredentialRegistrationId_exports, {
    JSON_DISCRIMINATOR: () => JSON_DISCRIMINATOR17,
    fromHexString: () => fromHexString6,
    fromTypedJSON: () => fromTypedJSON16,
    instanceOf: () => instanceOf17,
    toBuffer: () => toBuffer7,
    toHexString: () => toHexString6,
    toTypedJSON: () => toTypedJSON16,
});
var import_buffer20 = __toESM(require_buffer(), 1);
var JSON_DISCRIMINATOR17 = TypedJsonDiscriminator.CredentialRegistrationId;
var CredentialRegistrationId = class {
    constructor(credId) {
        this.credId = credId;
        this.__type = JSON_DISCRIMINATOR17;
    }
    toJSON() {
        return this.credId;
    }
};
function instanceOf17(value) {
    return value instanceof CredentialRegistrationId;
}
function fromHexString6(credId) {
    if (credId.length !== 96) {
        throw new Error('The provided credId ' + credId + ' is invalid as its length was not 96');
    }
    if (!isHex(credId)) {
        throw new Error('The provided credId ' + credId + ' does not represent a hexidecimal value');
    }
    if ((parseInt(credId.substring(0, 2), 16) & 128) === 0) {
        throw new Error('The provided credId ' + credId + 'does not represent a compressed BLS12-381 point');
    }
    return new CredentialRegistrationId(credId);
}
function toHexString6(cred) {
    return cred.credId;
}
function toBuffer7(cred) {
    return import_buffer20.Buffer.from(cred.credId, 'hex');
}
function toTypedJSON16(value) {
    return {
        ['@type']: JSON_DISCRIMINATOR17,
        value: toHexString6(value),
    };
}
var fromTypedJSON16 = makeFromTypedJson(JSON_DISCRIMINATOR17, fromHexString6);

// node_modules/@concordium/web-sdk/lib/esm/types/Timestamp.js
var Timestamp_exports = {};
__export(Timestamp_exports, {
    JSON_DISCRIMINATOR: () => JSON_DISCRIMINATOR18,
    fromDate: () => fromDate2,
    fromMillis: () => fromMillis,
    fromProto: () => fromProto13,
    fromSchemaValue: () => fromSchemaValue6,
    fromSerializable: () => fromSerializable6,
    fromTypedJSON: () => fromTypedJSON17,
    instanceOf: () => instanceOf18,
    toDate: () => toDate2,
    toProto: () => toProto13,
    toSchemaValue: () => toSchemaValue6,
    toSerializable: () => toSerializable6,
    toTypedJSON: () => toTypedJSON17,
    toUnwrappedJSON: () => toUnwrappedJSON14,
});
var JSON_DISCRIMINATOR18 = TypedJsonDiscriminator.Timestamp;
var Timestamp = class {
    constructor(value) {
        this.value = value;
        this.__type = JSON_DISCRIMINATOR18;
    }
};
function toUnwrappedJSON14(value) {
    return value.value;
}
function instanceOf18(value) {
    return value instanceof Timestamp;
}
function fromMillis(value) {
    if (value < 0) {
        throw new Error('Invalid timestamp: The value cannot be a negative number.');
    }
    return new Timestamp(BigInt(value));
}
function fromDate2(date) {
    return fromMillis(date.getTime());
}
function toSchemaValue6(timestamp) {
    return toDate2(timestamp).toISOString();
}
function fromSchemaValue6(timestamp) {
    return fromMillis(Date.parse(timestamp));
}
function toDate2(timestamp) {
    const number2 = Number(timestamp.value);
    if (isNaN(number2)) {
        throw new Error('Timestamp cannot be represented as a date.');
    }
    return new Date(number2);
}
function fromProto13(timestamp) {
    return fromMillis(timestamp.value);
}
function toProto13(timestamp) {
    return {
        value: timestamp.value,
    };
}
function fromSerializable6(value) {
    return fromMillis(BigInt(value));
}
function toSerializable6(value) {
    return value.value.toString();
}
function toTypedJSON17(value) {
    return {
        ['@type']: JSON_DISCRIMINATOR18,
        value: toSerializable6(value),
    };
}
var fromTypedJSON17 = makeFromTypedJson(JSON_DISCRIMINATOR18, fromSerializable6);

// node_modules/@concordium/web-sdk/lib/esm/types/Duration.js
var Duration_exports = {};
__export(Duration_exports, {
    JSON_DISCRIMINATOR: () => JSON_DISCRIMINATOR19,
    fromMillis: () => fromMillis2,
    fromProto: () => fromProto14,
    fromSchemaValue: () => fromSchemaValue7,
    fromSerializable: () => fromSerializable7,
    fromString: () => fromString5,
    fromTypedJSON: () => fromTypedJSON18,
    instanceOf: () => instanceOf19,
    toMillis: () => toMillis,
    toProto: () => toProto14,
    toSchemaValue: () => toSchemaValue7,
    toSerializable: () => toSerializable7,
    toTypedJSON: () => toTypedJSON18,
    toUnwrappedJSON: () => toUnwrappedJSON15,
});
var JSON_DISCRIMINATOR19 = TypedJsonDiscriminator.Duration;
var Duration = class {
    constructor(value) {
        this.value = value;
        this.__type = JSON_DISCRIMINATOR19;
    }
};
function toUnwrappedJSON15(value) {
    return value.value;
}
function instanceOf19(value) {
    return value instanceof Duration;
}
function fromMillis2(value) {
    if (value < 0) {
        throw new Error('Invalid duration: The value cannot be a negative number.');
    }
    return new Duration(BigInt(value));
}
var stringMeasureRegexp = /^(\d+)(ms|s|m|h|d)$/;
function fromString5(durationString) {
    let durationInMillis = 0;
    for (const measure of durationString.split(' ')) {
        const result = measure.match(stringMeasureRegexp);
        if (result === null) {
            throw new Error('Invalid duration format');
        }
        const [, valueString, unit] = result;
        const value = parseInt(valueString, 10);
        switch (unit) {
            case 'ms':
                durationInMillis += value;
                break;
            case 's':
                durationInMillis += value * 1e3;
                break;
            case 'm':
                durationInMillis += value * 1e3 * 60;
                break;
            case 'h':
                durationInMillis += value * 1e3 * 60 * 60;
                break;
            case 'd':
                durationInMillis += value * 1e3 * 60 * 60 * 24;
                break;
            default:
                throw new Error(`Invalid duration format: Unknown unit '${unit}'.`);
        }
    }
    return fromMillis2(durationInMillis);
}
function toMillis(duration) {
    return duration.value;
}
function toSchemaValue7(duration) {
    return `${duration.value} ms`;
}
function fromSchemaValue7(duration) {
    return fromString5(duration);
}
function fromProto14(duration) {
    return fromMillis2(duration.value);
}
function toProto14(duration) {
    return {
        value: duration.value,
    };
}
function fromSerializable7(value) {
    return fromMillis2(BigInt(value));
}
function toSerializable7(duration) {
    return duration.value.toString();
}
function toTypedJSON18(value) {
    return {
        ['@type']: JSON_DISCRIMINATOR19,
        value: toSerializable7(value),
    };
}
var fromTypedJSON18 = makeFromTypedJson(JSON_DISCRIMINATOR19, fromSerializable7);

// node_modules/@concordium/web-sdk/lib/esm/types/ContractEvent.js
var ContractEvent_exports = {};
__export(ContractEvent_exports, {
    fromBuffer: () => fromBuffer7,
    fromHexString: () => fromHexString7,
    fromProto: () => fromProto15,
    parseWithSchemaType: () => parseWithSchemaType2,
    parseWithSchemaTypeBase64: () => parseWithSchemaTypeBase642,
    toBuffer: () => toBuffer8,
    toHexString: () => toHexString7,
    toProto: () => toProto15,
    toUnwrappedJSON: () => toUnwrappedJSON16,
});
var import_buffer21 = __toESM(require_buffer(), 1);
var ContractEvent = class {
    constructor(buffer) {
        this.buffer = buffer;
        this.__nominal = true;
    }
};
function toUnwrappedJSON16(value) {
    return toHexString7(value);
}
function fromBuffer7(buffer) {
    return new ContractEvent(new Uint8Array(buffer));
}
function fromHexString7(hex2) {
    return fromBuffer7(import_buffer21.Buffer.from(hex2, 'hex'));
}
function toHexString7(event) {
    return import_buffer21.Buffer.from(event.buffer).toString('hex');
}
function toBuffer8(event) {
    return event.buffer;
}
function fromProto15(event) {
    return fromBuffer7(event.value);
}
function toProto15(event) {
    return {
        value: event.buffer,
    };
}
function parseWithSchemaType2(event, schemaType) {
    const schemaBytes = serializeSchemaType(schemaType);
    return deserializeTypeValue2(toBuffer8(event), schemaBytes);
}
function parseWithSchemaTypeBase642(event, schemaBase64) {
    const schemaBytes = import_buffer21.Buffer.from(schemaBase64, 'base64');
    return deserializeTypeValue2(toBuffer8(event), schemaBytes);
}

// node_modules/@concordium/web-sdk/lib/esm/types/json.js
var import_json_bigint4 = __toESM(require_json_bigint(), 1);
function reviveConcordiumTypes(value) {
    if (isTypedJsonCandidate(value)) {
        switch (value['@type']) {
            case JSON_DISCRIMINATOR7:
                return fromTypedJSON6(value);
            case JSON_DISCRIMINATOR13:
                return fromTypedJSON12(value);
            case JSON_DISCRIMINATOR10:
                return fromTypedJSON9(value);
            case JSON_DISCRIMINATOR8:
                return fromTypedJSON7(value);
            case JSON_DISCRIMINATOR14:
                return fromTypedJSON13(value);
            case JSON_DISCRIMINATOR15:
                return fromTypedJSON14(value);
            case JSON_DISCRIMINATOR4:
                return fromTypedJSON3(value);
            case JSON_DISCRIMINATOR16:
                return fromTypedJSON15(value);
            case JSON_DISCRIMINATOR6:
                return fromTypedJSON5(value);
            case JSON_DISCRIMINATOR17:
                return fromTypedJSON16(value);
            case JSON_DISCRIMINATOR:
                return fromTypedJSON(value);
            case JSON_DISCRIMINATOR12:
                return fromTypedJSON11(value);
            case JSON_DISCRIMINATOR5:
                return fromTypedJSON4(value);
            case JSON_DISCRIMINATOR18:
                return fromTypedJSON17(value);
            case JSON_DISCRIMINATOR19:
                return fromTypedJSON18(value);
            case JSON_DISCRIMINATOR3:
                return fromTypedJSON2(value);
            case JSON_DISCRIMINATOR11:
                return fromTypedJSON10(value);
            case JSON_DISCRIMINATOR9:
                return fromTypedJSON8(value);
            case JSON_DISCRIMINATOR2:
                return DataBlob.fromTypedJSON(value);
        }
    }
    return value;
}
function jsonParse(input, reviver) {
    return JSON.parse(input, (k, v) =>
        reviver === void 0 ? reviveConcordiumTypes(v) : reviver(k, reviveConcordiumTypes(v))
    );
}
function transformConcordiumType(value) {
    switch (true) {
        case instanceOf(value):
            return toTypedJSON(value);
        case instanceOf15(value):
            return toTypedJSON14(value);
        case instanceOf2(value):
            return toTypedJSON2(value);
        case instanceOf11(value):
            return toTypedJSON11(value);
        case instanceOf3(value):
            return toTypedJSON3(value);
        case instanceOf17(value):
            return toTypedJSON16(value);
        case value instanceof DataBlob:
            return value.toTypedJSON();
        case instanceOf19(value):
            return toTypedJSON18(value);
        case instanceOf7(value):
            return toTypedJSON7(value);
        case instanceOf4(value):
            return toTypedJSON4(value);
        case instanceOf16(value):
            return toTypedJSON15(value);
        case instanceOf8(value):
            return toTypedJSON8(value);
        case instanceOf6(value):
            return toTypedJSON6(value);
        case instanceOf5(value):
            return toTypedJSON5(value);
        case instanceOf12(value):
            return toTypedJSON12(value);
        case instanceOf9(value):
            return toTypedJSON9(value);
        case instanceOf18(value):
            return toTypedJSON17(value);
        case instanceOf10(value):
            return toTypedJSON10(value);
        case instanceOf14(value):
            return toTypedJSON13(value);
    }
    return void 0;
}
function unwrapConcordiumType(value) {
    switch (true) {
        case instanceOf(value):
            return toUnwrappedJSON(value);
        case instanceOf15(value):
            return toUnwrappedJSON12(value);
        case instanceOf2(value):
            return value.toJSON();
        case instanceOf11(value):
            return toUnwrappedJSON9(value);
        case instanceOf3(value):
            return toUnwrappedJSON2(value);
        case instanceOf17(value):
            return value.toJSON();
        case value instanceof DataBlob:
            return value.toJSON();
        case instanceOf19(value):
            return toUnwrappedJSON15(value);
        case instanceOf7(value):
            return toUnwrappedJSON6(value);
        case instanceOf4(value):
            return toUnwrappedJSON3(value);
        case instanceOf16(value):
            return toUnwrappedJSON13(value);
        case instanceOf8(value):
            return toUnwrappedJSON7(value);
        case instanceOf6(value):
            return toUnwrappedJSON5(value);
        case instanceOf5(value):
            return toUnwrappedJSON4(value);
        case instanceOf12(value):
            return toUnwrappedJSON10(value);
        case instanceOf9(value):
            return toUnwrappedJSON8(value);
        case instanceOf18(value):
            return toUnwrappedJSON14(value);
        case instanceOf10(value):
            return value.toJSON();
        case instanceOf14(value):
            return toUnwrappedJSON11(value);
    }
    return void 0;
}
function ccdTypesReplacer(key, value) {
    const rawValue = this[key];
    return transformConcordiumType(rawValue) ?? value;
}
function ccdUnwrapReplacer(key, value) {
    const rawValue = this[key];
    return unwrapConcordiumType(rawValue) ?? value;
}
function jsonStringify(input, replacer, space) {
    function replacerFunction(key, value) {
        const transformedValue = ccdTypesReplacer.call(this, key, value);
        return (replacer == null ? void 0 : replacer.call(this, key, transformedValue)) ?? transformedValue;
    }
    return JSON.stringify(input, replacerFunction, space);
}
function jsonUnwrapStringify(input, bigintFormat = 2, replacer, space) {
    function replaceBigintValue(value) {
        switch (bigintFormat) {
            case 1:
                if (typeof value === 'bigint') {
                    return value.toString();
                }
            default:
                return value;
        }
    }
    function replacerFunction(key, value) {
        let replaced2 = ccdUnwrapReplacer.call(this, key, value);
        replaced2 = (replacer == null ? void 0 : replacer.call(this, key, replaced2)) ?? replaced2;
        return replaceBigintValue(replaced2);
    }
    let replaced = input;
    if (typeof input !== 'object') {
        replaced = (replacer == null ? void 0 : replacer.call(replaced, '', replaced)) ?? replaced;
        replaced = replaceBigintValue(replaced);
    }
    const stringify6 = bigintFormat === 0 ? import_json_bigint4.default.stringify : JSON.stringify;
    return stringify6(replaced, replacerFunction, space);
}

// node_modules/@concordium/web-sdk/lib/esm/wasm/serialization.js
var wasm2 = __toESM(require_index_min2(), 1);
var import_json_bigint5 = __toESM(require_json_bigint(), 1);
var import_buffer22 = __toESM(require_buffer(), 1);
function getCredentialDeploymentTransactionHash(credentialDeployment, signatures) {
    const credentialDeploymentInfo = JSON.parse(
        wasm2.getDeploymentDetails(
            signatures,
            import_json_bigint5.default.stringify(credentialDeployment.unsignedCdi),
            credentialDeployment.expiry.expiryEpochSeconds
        )
    );
    return credentialDeploymentInfo.transactionHash;
}
function serializeCredentialDeploymentTransactionForSubmission(credentialDeployment, signatures) {
    const credentialDeploymentInfo = JSON.parse(
        wasm2.getDeploymentDetails(
            signatures,
            import_json_bigint5.default.stringify(credentialDeployment.unsignedCdi),
            credentialDeployment.expiry.expiryEpochSeconds
        )
    );
    return import_buffer22.Buffer.from(credentialDeploymentInfo.serializedTransaction, 'hex');
}
function serializeCredentialDeploymentPayload2(signatures, credentialDeploymentTransaction) {
    const payloadByteArray = wasm2.serializeCredentialDeploymentPayload(
        signatures,
        import_json_bigint5.default.stringify(credentialDeploymentTransaction.unsignedCdi)
    );
    return import_buffer22.Buffer.from(payloadByteArray);
}

// node_modules/@concordium/web-sdk/lib/esm/wasm/deserialization.js
var wasm3 = __toESM(require_index_min2(), 1);
function deserializeCredentialDeployment2(serializedDeployment) {
    const raw = wasm3.deserializeCredentialDeployment(serializedDeployment.read().toString('hex'));
    try {
        const parsed = JSON.parse(raw);
        return {
            credential: parsed.credential,
            expiry: parsed.messageExpiry,
        };
    } catch {
        throw new Error(raw);
    }
}
function deserializeTransaction(serializedTransaction) {
    const cursor = Cursor.fromBuffer(serializedTransaction);
    const version = deserializeUint8(cursor);
    if (version !== 0) {
        throw new Error(
            'Supplied version ' + version + ' is not valid. Only transactions with version 0 format are supported'
        );
    }
    const blockItemKind = deserializeUint8(cursor);
    switch (blockItemKind) {
        case BlockItemKind.AccountTransactionKind:
            return {
                kind: BlockItemKind.AccountTransactionKind,
                transaction: deserializeAccountTransaction(cursor),
            };
        case BlockItemKind.CredentialDeploymentKind:
            return {
                kind: BlockItemKind.CredentialDeploymentKind,
                transaction: deserializeCredentialDeployment2(cursor),
            };
        case BlockItemKind.UpdateInstructionKind:
            throw new Error('deserialization of UpdateInstructions is not supported');
        default:
            throw new Error('Invalid blockItemKind');
    }
}

// node_modules/@concordium/web-sdk/lib/esm/wasm/accountHelpers.js
var wasm4 = __toESM(require_index_min2(), 1);
function generateBakerKeys2(account) {
    const rawKeys = wasm4.generateBakerKeys(toBase58(account));
    try {
        return JSON.parse(rawKeys);
    } catch (e) {
        throw new Error(rawKeys);
    }
}

// node_modules/@concordium/web-sdk/lib/esm/wasm/HdWallet.js
var wasm5 = __toESM(require_index_min2(), 1);

// node_modules/@noble/hashes/esm/_assert.js
function number(n) {
    if (!Number.isSafeInteger(n) || n < 0) throw new Error(`Wrong positive integer: ${n}`);
}
function isBytes(a) {
    return a instanceof Uint8Array || (a != null && typeof a === 'object' && a.constructor.name === 'Uint8Array');
}
function bytes(b, ...lengths) {
    if (!isBytes(b)) throw new Error('Expected Uint8Array');
    if (lengths.length > 0 && !lengths.includes(b.length))
        throw new Error(`Expected Uint8Array of length ${lengths}, not of length=${b.length}`);
}
function hash2(hash3) {
    if (typeof hash3 !== 'function' || typeof hash3.create !== 'function')
        throw new Error('Hash should be wrapped by utils.wrapConstructor');
    number(hash3.outputLen);
    number(hash3.blockLen);
}
function exists(instance, checkFinished = true) {
    if (instance.destroyed) throw new Error('Hash instance has been destroyed');
    if (checkFinished && instance.finished) throw new Error('Hash#digest() has already been called');
}
function output(out, instance) {
    bytes(out);
    const min = instance.outputLen;
    if (out.length < min) {
        throw new Error(`digestInto() expects output buffer of length at least ${min}`);
    }
}

// node_modules/@noble/hashes/esm/crypto.js
var crypto = typeof globalThis === 'object' && 'crypto' in globalThis ? globalThis.crypto : void 0;

// node_modules/@noble/hashes/esm/utils.js
function isBytes2(a) {
    return a instanceof Uint8Array || (a != null && typeof a === 'object' && a.constructor.name === 'Uint8Array');
}
var createView = (arr) => new DataView(arr.buffer, arr.byteOffset, arr.byteLength);
var rotr = (word, shift) => (word << (32 - shift)) | (word >>> shift);
var isLE = new Uint8Array(new Uint32Array([287454020]).buffer)[0] === 68;
if (!isLE) throw new Error('Non little-endian hardware is not supported');
var hexes = Array.from({ length: 256 }, (_, i) => i.toString(16).padStart(2, '0'));
function utf8ToBytes(str2) {
    if (typeof str2 !== 'string') throw new Error(`utf8ToBytes expected string, got ${typeof str2}`);
    return new Uint8Array(new TextEncoder().encode(str2));
}
function toBytes(data) {
    if (typeof data === 'string') data = utf8ToBytes(data);
    if (!isBytes2(data)) throw new Error(`expected Uint8Array, got ${typeof data}`);
    return data;
}
var Hash = class {
    // Safe version that clones internal state
    clone() {
        return this._cloneInto();
    }
};
var toStr = {}.toString;
function checkOpts(defaults, opts) {
    if (opts !== void 0 && toStr.call(opts) !== '[object Object]')
        throw new Error('Options should be object or undefined');
    const merged = Object.assign(defaults, opts);
    return merged;
}
function wrapConstructor(hashCons) {
    const hashC = (msg) => hashCons().update(toBytes(msg)).digest();
    const tmp = hashCons();
    hashC.outputLen = tmp.outputLen;
    hashC.blockLen = tmp.blockLen;
    hashC.create = () => hashCons();
    return hashC;
}

// node_modules/@noble/hashes/esm/hmac.js
var HMAC = class extends Hash {
    constructor(hash3, _key) {
        super();
        this.finished = false;
        this.destroyed = false;
        hash2(hash3);
        const key = toBytes(_key);
        this.iHash = hash3.create();
        if (typeof this.iHash.update !== 'function')
            throw new Error('Expected instance of class which extends utils.Hash');
        this.blockLen = this.iHash.blockLen;
        this.outputLen = this.iHash.outputLen;
        const blockLen = this.blockLen;
        const pad = new Uint8Array(blockLen);
        pad.set(key.length > blockLen ? hash3.create().update(key).digest() : key);
        for (let i = 0; i < pad.length; i++) pad[i] ^= 54;
        this.iHash.update(pad);
        this.oHash = hash3.create();
        for (let i = 0; i < pad.length; i++) pad[i] ^= 54 ^ 92;
        this.oHash.update(pad);
        pad.fill(0);
    }
    update(buf) {
        exists(this);
        this.iHash.update(buf);
        return this;
    }
    digestInto(out) {
        exists(this);
        bytes(out, this.outputLen);
        this.finished = true;
        this.iHash.digestInto(out);
        this.oHash.update(out);
        this.oHash.digestInto(out);
        this.destroy();
    }
    digest() {
        const out = new Uint8Array(this.oHash.outputLen);
        this.digestInto(out);
        return out;
    }
    _cloneInto(to) {
        to || (to = Object.create(Object.getPrototypeOf(this), {}));
        const { oHash, iHash, finished, destroyed, blockLen, outputLen } = this;
        to = to;
        to.finished = finished;
        to.destroyed = destroyed;
        to.blockLen = blockLen;
        to.outputLen = outputLen;
        to.oHash = oHash._cloneInto(to.oHash);
        to.iHash = iHash._cloneInto(to.iHash);
        return to;
    }
    destroy() {
        this.destroyed = true;
        this.oHash.destroy();
        this.iHash.destroy();
    }
};
var hmac = (hash3, key, message) => new HMAC(hash3, key).update(message).digest();
hmac.create = (hash3, key) => new HMAC(hash3, key);

// node_modules/@noble/hashes/esm/pbkdf2.js
function pbkdf2Init(hash3, _password, _salt, _opts) {
    hash2(hash3);
    const opts = checkOpts({ dkLen: 32, asyncTick: 10 }, _opts);
    const { c, dkLen, asyncTick } = opts;
    number(c);
    number(dkLen);
    number(asyncTick);
    if (c < 1) throw new Error('PBKDF2: iterations (c) should be >= 1');
    const password = toBytes(_password);
    const salt2 = toBytes(_salt);
    const DK = new Uint8Array(dkLen);
    const PRF = hmac.create(hash3, password);
    const PRFSalt = PRF._cloneInto().update(salt2);
    return { c, dkLen, asyncTick, DK, PRF, PRFSalt };
}
function pbkdf2Output(PRF, PRFSalt, DK, prfW, u) {
    PRF.destroy();
    PRFSalt.destroy();
    if (prfW) prfW.destroy();
    u.fill(0);
    return DK;
}
function pbkdf2(hash3, password, salt2, opts) {
    const { c, dkLen, DK, PRF, PRFSalt } = pbkdf2Init(hash3, password, salt2, opts);
    let prfW;
    const arr = new Uint8Array(4);
    const view = createView(arr);
    const u = new Uint8Array(PRF.outputLen);
    for (let ti = 1, pos = 0; pos < dkLen; ti++, pos += PRF.outputLen) {
        const Ti = DK.subarray(pos, pos + PRF.outputLen);
        view.setInt32(0, ti, false);
        (prfW = PRFSalt._cloneInto(prfW)).update(arr).digestInto(u);
        Ti.set(u.subarray(0, Ti.length));
        for (let ui = 1; ui < c; ui++) {
            PRF._cloneInto(prfW).update(u).digestInto(u);
            for (let i = 0; i < Ti.length; i++) Ti[i] ^= u[i];
        }
    }
    return pbkdf2Output(PRF, PRFSalt, DK, prfW, u);
}

// node_modules/@noble/hashes/esm/_sha2.js
function setBigUint64(view, byteOffset, value, isLE2) {
    if (typeof view.setBigUint64 === 'function') return view.setBigUint64(byteOffset, value, isLE2);
    const _32n2 = BigInt(32);
    const _u32_max = BigInt(4294967295);
    const wh = Number((value >> _32n2) & _u32_max);
    const wl = Number(value & _u32_max);
    const h = isLE2 ? 4 : 0;
    const l = isLE2 ? 0 : 4;
    view.setUint32(byteOffset + h, wh, isLE2);
    view.setUint32(byteOffset + l, wl, isLE2);
}
var SHA2 = class extends Hash {
    constructor(blockLen, outputLen, padOffset, isLE2) {
        super();
        this.blockLen = blockLen;
        this.outputLen = outputLen;
        this.padOffset = padOffset;
        this.isLE = isLE2;
        this.finished = false;
        this.length = 0;
        this.pos = 0;
        this.destroyed = false;
        this.buffer = new Uint8Array(blockLen);
        this.view = createView(this.buffer);
    }
    update(data) {
        exists(this);
        const { view, buffer, blockLen } = this;
        data = toBytes(data);
        const len = data.length;
        for (let pos = 0; pos < len; ) {
            const take = Math.min(blockLen - this.pos, len - pos);
            if (take === blockLen) {
                const dataView = createView(data);
                for (; blockLen <= len - pos; pos += blockLen) this.process(dataView, pos);
                continue;
            }
            buffer.set(data.subarray(pos, pos + take), this.pos);
            this.pos += take;
            pos += take;
            if (this.pos === blockLen) {
                this.process(view, 0);
                this.pos = 0;
            }
        }
        this.length += data.length;
        this.roundClean();
        return this;
    }
    digestInto(out) {
        exists(this);
        output(out, this);
        this.finished = true;
        const { buffer, view, blockLen, isLE: isLE2 } = this;
        let { pos } = this;
        buffer[pos++] = 128;
        this.buffer.subarray(pos).fill(0);
        if (this.padOffset > blockLen - pos) {
            this.process(view, 0);
            pos = 0;
        }
        for (let i = pos; i < blockLen; i++) buffer[i] = 0;
        setBigUint64(view, blockLen - 8, BigInt(this.length * 8), isLE2);
        this.process(view, 0);
        const oview = createView(out);
        const len = this.outputLen;
        if (len % 4) throw new Error('_sha2: outputLen should be aligned to 32bit');
        const outLen = len / 4;
        const state = this.get();
        if (outLen > state.length) throw new Error('_sha2: outputLen bigger than state');
        for (let i = 0; i < outLen; i++) oview.setUint32(4 * i, state[i], isLE2);
    }
    digest() {
        const { buffer, outputLen } = this;
        this.digestInto(buffer);
        const res = buffer.slice(0, outputLen);
        this.destroy();
        return res;
    }
    _cloneInto(to) {
        to || (to = new this.constructor());
        to.set(...this.get());
        const { blockLen, buffer, length, finished, destroyed, pos } = this;
        to.length = length;
        to.pos = pos;
        to.finished = finished;
        to.destroyed = destroyed;
        if (length % blockLen) to.buffer.set(buffer);
        return to;
    }
};

// node_modules/@noble/hashes/esm/sha256.js
var Chi = (a, b, c) => (a & b) ^ (~a & c);
var Maj = (a, b, c) => (a & b) ^ (a & c) ^ (b & c);
var SHA256_K = new Uint32Array([
    1116352408, 1899447441, 3049323471, 3921009573, 961987163, 1508970993, 2453635748, 2870763221, 3624381080,
    310598401, 607225278, 1426881987, 1925078388, 2162078206, 2614888103, 3248222580, 3835390401, 4022224774, 264347078,
    604807628, 770255983, 1249150122, 1555081692, 1996064986, 2554220882, 2821834349, 2952996808, 3210313671,
    3336571891, 3584528711, 113926993, 338241895, 666307205, 773529912, 1294757372, 1396182291, 1695183700, 1986661051,
    2177026350, 2456956037, 2730485921, 2820302411, 3259730800, 3345764771, 3516065817, 3600352804, 4094571909,
    275423344, 430227734, 506948616, 659060556, 883997877, 958139571, 1322822218, 1537002063, 1747873779, 1955562222,
    2024104815, 2227730452, 2361852424, 2428436474, 2756734187, 3204031479, 3329325298,
]);
var IV = new Uint32Array([
    1779033703, 3144134277, 1013904242, 2773480762, 1359893119, 2600822924, 528734635, 1541459225,
]);
var SHA256_W = new Uint32Array(64);
var SHA256 = class extends SHA2 {
    constructor() {
        super(64, 32, 8, false);
        this.A = IV[0] | 0;
        this.B = IV[1] | 0;
        this.C = IV[2] | 0;
        this.D = IV[3] | 0;
        this.E = IV[4] | 0;
        this.F = IV[5] | 0;
        this.G = IV[6] | 0;
        this.H = IV[7] | 0;
    }
    get() {
        const { A, B, C, D, E, F, G: G2, H } = this;
        return [A, B, C, D, E, F, G2, H];
    }
    // prettier-ignore
    set(A, B, C, D, E, F, G2, H) {
    this.A = A | 0;
    this.B = B | 0;
    this.C = C | 0;
    this.D = D | 0;
    this.E = E | 0;
    this.F = F | 0;
    this.G = G2 | 0;
    this.H = H | 0;
  }
    process(view, offset) {
        for (let i = 0; i < 16; i++, offset += 4) SHA256_W[i] = view.getUint32(offset, false);
        for (let i = 16; i < 64; i++) {
            const W15 = SHA256_W[i - 15];
            const W2 = SHA256_W[i - 2];
            const s0 = rotr(W15, 7) ^ rotr(W15, 18) ^ (W15 >>> 3);
            const s1 = rotr(W2, 17) ^ rotr(W2, 19) ^ (W2 >>> 10);
            SHA256_W[i] = (s1 + SHA256_W[i - 7] + s0 + SHA256_W[i - 16]) | 0;
        }
        let { A, B, C, D, E, F, G: G2, H } = this;
        for (let i = 0; i < 64; i++) {
            const sigma1 = rotr(E, 6) ^ rotr(E, 11) ^ rotr(E, 25);
            const T1 = (H + sigma1 + Chi(E, F, G2) + SHA256_K[i] + SHA256_W[i]) | 0;
            const sigma0 = rotr(A, 2) ^ rotr(A, 13) ^ rotr(A, 22);
            const T2 = (sigma0 + Maj(A, B, C)) | 0;
            H = G2;
            G2 = F;
            F = E;
            E = (D + T1) | 0;
            D = C;
            C = B;
            B = A;
            A = (T1 + T2) | 0;
        }
        A = (A + this.A) | 0;
        B = (B + this.B) | 0;
        C = (C + this.C) | 0;
        D = (D + this.D) | 0;
        E = (E + this.E) | 0;
        F = (F + this.F) | 0;
        G2 = (G2 + this.G) | 0;
        H = (H + this.H) | 0;
        this.set(A, B, C, D, E, F, G2, H);
    }
    roundClean() {
        SHA256_W.fill(0);
    }
    destroy() {
        this.set(0, 0, 0, 0, 0, 0, 0, 0);
        this.buffer.fill(0);
    }
};
var SHA224 = class extends SHA256 {
    constructor() {
        super();
        this.A = 3238371032 | 0;
        this.B = 914150663 | 0;
        this.C = 812702999 | 0;
        this.D = 4144912697 | 0;
        this.E = 4290775857 | 0;
        this.F = 1750603025 | 0;
        this.G = 1694076839 | 0;
        this.H = 3204075428 | 0;
        this.outputLen = 28;
    }
};
var sha2562 = wrapConstructor(() => new SHA256());
var sha224 = wrapConstructor(() => new SHA224());

// node_modules/@noble/hashes/esm/_u64.js
var U32_MASK64 = BigInt(2 ** 32 - 1);
var _32n = BigInt(32);
function fromBig(n, le = false) {
    if (le) return { h: Number(n & U32_MASK64), l: Number((n >> _32n) & U32_MASK64) };
    return { h: Number((n >> _32n) & U32_MASK64) | 0, l: Number(n & U32_MASK64) | 0 };
}
function split(lst, le = false) {
    let Ah = new Uint32Array(lst.length);
    let Al = new Uint32Array(lst.length);
    for (let i = 0; i < lst.length; i++) {
        const { h, l } = fromBig(lst[i], le);
        [Ah[i], Al[i]] = [h, l];
    }
    return [Ah, Al];
}
var toBig = (h, l) => (BigInt(h >>> 0) << _32n) | BigInt(l >>> 0);
var shrSH = (h, _l, s) => h >>> s;
var shrSL = (h, l, s) => (h << (32 - s)) | (l >>> s);
var rotrSH = (h, l, s) => (h >>> s) | (l << (32 - s));
var rotrSL = (h, l, s) => (h << (32 - s)) | (l >>> s);
var rotrBH = (h, l, s) => (h << (64 - s)) | (l >>> (s - 32));
var rotrBL = (h, l, s) => (h >>> (s - 32)) | (l << (64 - s));
var rotr32H = (_h, l) => l;
var rotr32L = (h, _l) => h;
var rotlSH = (h, l, s) => (h << s) | (l >>> (32 - s));
var rotlSL = (h, l, s) => (l << s) | (h >>> (32 - s));
var rotlBH = (h, l, s) => (l << (s - 32)) | (h >>> (64 - s));
var rotlBL = (h, l, s) => (h << (s - 32)) | (l >>> (64 - s));
function add(Ah, Al, Bh, Bl) {
    const l = (Al >>> 0) + (Bl >>> 0);
    return { h: (Ah + Bh + ((l / 2 ** 32) | 0)) | 0, l: l | 0 };
}
var add3L = (Al, Bl, Cl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0);
var add3H = (low, Ah, Bh, Ch) => (Ah + Bh + Ch + ((low / 2 ** 32) | 0)) | 0;
var add4L = (Al, Bl, Cl, Dl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0);
var add4H = (low, Ah, Bh, Ch, Dh) => (Ah + Bh + Ch + Dh + ((low / 2 ** 32) | 0)) | 0;
var add5L = (Al, Bl, Cl, Dl, El) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0) + (El >>> 0);
var add5H = (low, Ah, Bh, Ch, Dh, Eh) => (Ah + Bh + Ch + Dh + Eh + ((low / 2 ** 32) | 0)) | 0;
var u64 = {
    fromBig,
    split,
    toBig,
    shrSH,
    shrSL,
    rotrSH,
    rotrSL,
    rotrBH,
    rotrBL,
    rotr32H,
    rotr32L,
    rotlSH,
    rotlSL,
    rotlBH,
    rotlBL,
    add,
    add3L,
    add3H,
    add4L,
    add4H,
    add5H,
    add5L,
};
var u64_default = u64;

// node_modules/@noble/hashes/esm/sha512.js
var [SHA512_Kh, SHA512_Kl] = (() =>
    u64_default.split(
        [
            '0x428a2f98d728ae22',
            '0x7137449123ef65cd',
            '0xb5c0fbcfec4d3b2f',
            '0xe9b5dba58189dbbc',
            '0x3956c25bf348b538',
            '0x59f111f1b605d019',
            '0x923f82a4af194f9b',
            '0xab1c5ed5da6d8118',
            '0xd807aa98a3030242',
            '0x12835b0145706fbe',
            '0x243185be4ee4b28c',
            '0x550c7dc3d5ffb4e2',
            '0x72be5d74f27b896f',
            '0x80deb1fe3b1696b1',
            '0x9bdc06a725c71235',
            '0xc19bf174cf692694',
            '0xe49b69c19ef14ad2',
            '0xefbe4786384f25e3',
            '0x0fc19dc68b8cd5b5',
            '0x240ca1cc77ac9c65',
            '0x2de92c6f592b0275',
            '0x4a7484aa6ea6e483',
            '0x5cb0a9dcbd41fbd4',
            '0x76f988da831153b5',
            '0x983e5152ee66dfab',
            '0xa831c66d2db43210',
            '0xb00327c898fb213f',
            '0xbf597fc7beef0ee4',
            '0xc6e00bf33da88fc2',
            '0xd5a79147930aa725',
            '0x06ca6351e003826f',
            '0x142929670a0e6e70',
            '0x27b70a8546d22ffc',
            '0x2e1b21385c26c926',
            '0x4d2c6dfc5ac42aed',
            '0x53380d139d95b3df',
            '0x650a73548baf63de',
            '0x766a0abb3c77b2a8',
            '0x81c2c92e47edaee6',
            '0x92722c851482353b',
            '0xa2bfe8a14cf10364',
            '0xa81a664bbc423001',
            '0xc24b8b70d0f89791',
            '0xc76c51a30654be30',
            '0xd192e819d6ef5218',
            '0xd69906245565a910',
            '0xf40e35855771202a',
            '0x106aa07032bbd1b8',
            '0x19a4c116b8d2d0c8',
            '0x1e376c085141ab53',
            '0x2748774cdf8eeb99',
            '0x34b0bcb5e19b48a8',
            '0x391c0cb3c5c95a63',
            '0x4ed8aa4ae3418acb',
            '0x5b9cca4f7763e373',
            '0x682e6ff3d6b2b8a3',
            '0x748f82ee5defb2fc',
            '0x78a5636f43172f60',
            '0x84c87814a1f0ab72',
            '0x8cc702081a6439ec',
            '0x90befffa23631e28',
            '0xa4506cebde82bde9',
            '0xbef9a3f7b2c67915',
            '0xc67178f2e372532b',
            '0xca273eceea26619c',
            '0xd186b8c721c0c207',
            '0xeada7dd6cde0eb1e',
            '0xf57d4f7fee6ed178',
            '0x06f067aa72176fba',
            '0x0a637dc5a2c898a6',
            '0x113f9804bef90dae',
            '0x1b710b35131c471b',
            '0x28db77f523047d84',
            '0x32caab7b40c72493',
            '0x3c9ebe0a15c9bebc',
            '0x431d67c49c100d4c',
            '0x4cc5d4becb3e42b6',
            '0x597f299cfc657e2a',
            '0x5fcb6fab3ad6faec',
            '0x6c44198c4a475817',
        ].map((n) => BigInt(n))
    ))();
var SHA512_W_H = new Uint32Array(80);
var SHA512_W_L = new Uint32Array(80);
var SHA512 = class extends SHA2 {
    constructor() {
        super(128, 64, 16, false);
        this.Ah = 1779033703 | 0;
        this.Al = 4089235720 | 0;
        this.Bh = 3144134277 | 0;
        this.Bl = 2227873595 | 0;
        this.Ch = 1013904242 | 0;
        this.Cl = 4271175723 | 0;
        this.Dh = 2773480762 | 0;
        this.Dl = 1595750129 | 0;
        this.Eh = 1359893119 | 0;
        this.El = 2917565137 | 0;
        this.Fh = 2600822924 | 0;
        this.Fl = 725511199 | 0;
        this.Gh = 528734635 | 0;
        this.Gl = 4215389547 | 0;
        this.Hh = 1541459225 | 0;
        this.Hl = 327033209 | 0;
    }
    // prettier-ignore
    get() {
    const { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;
    return [Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl];
  }
    // prettier-ignore
    set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl) {
    this.Ah = Ah | 0;
    this.Al = Al | 0;
    this.Bh = Bh | 0;
    this.Bl = Bl | 0;
    this.Ch = Ch | 0;
    this.Cl = Cl | 0;
    this.Dh = Dh | 0;
    this.Dl = Dl | 0;
    this.Eh = Eh | 0;
    this.El = El | 0;
    this.Fh = Fh | 0;
    this.Fl = Fl | 0;
    this.Gh = Gh | 0;
    this.Gl = Gl | 0;
    this.Hh = Hh | 0;
    this.Hl = Hl | 0;
  }
    process(view, offset) {
        for (let i = 0; i < 16; i++, offset += 4) {
            SHA512_W_H[i] = view.getUint32(offset);
            SHA512_W_L[i] = view.getUint32((offset += 4));
        }
        for (let i = 16; i < 80; i++) {
            const W15h = SHA512_W_H[i - 15] | 0;
            const W15l = SHA512_W_L[i - 15] | 0;
            const s0h =
                u64_default.rotrSH(W15h, W15l, 1) ^
                u64_default.rotrSH(W15h, W15l, 8) ^
                u64_default.shrSH(W15h, W15l, 7);
            const s0l =
                u64_default.rotrSL(W15h, W15l, 1) ^
                u64_default.rotrSL(W15h, W15l, 8) ^
                u64_default.shrSL(W15h, W15l, 7);
            const W2h = SHA512_W_H[i - 2] | 0;
            const W2l = SHA512_W_L[i - 2] | 0;
            const s1h =
                u64_default.rotrSH(W2h, W2l, 19) ^ u64_default.rotrBH(W2h, W2l, 61) ^ u64_default.shrSH(W2h, W2l, 6);
            const s1l =
                u64_default.rotrSL(W2h, W2l, 19) ^ u64_default.rotrBL(W2h, W2l, 61) ^ u64_default.shrSL(W2h, W2l, 6);
            const SUMl = u64_default.add4L(s0l, s1l, SHA512_W_L[i - 7], SHA512_W_L[i - 16]);
            const SUMh = u64_default.add4H(SUMl, s0h, s1h, SHA512_W_H[i - 7], SHA512_W_H[i - 16]);
            SHA512_W_H[i] = SUMh | 0;
            SHA512_W_L[i] = SUMl | 0;
        }
        let { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;
        for (let i = 0; i < 80; i++) {
            const sigma1h =
                u64_default.rotrSH(Eh, El, 14) ^ u64_default.rotrSH(Eh, El, 18) ^ u64_default.rotrBH(Eh, El, 41);
            const sigma1l =
                u64_default.rotrSL(Eh, El, 14) ^ u64_default.rotrSL(Eh, El, 18) ^ u64_default.rotrBL(Eh, El, 41);
            const CHIh = (Eh & Fh) ^ (~Eh & Gh);
            const CHIl = (El & Fl) ^ (~El & Gl);
            const T1ll = u64_default.add5L(Hl, sigma1l, CHIl, SHA512_Kl[i], SHA512_W_L[i]);
            const T1h = u64_default.add5H(T1ll, Hh, sigma1h, CHIh, SHA512_Kh[i], SHA512_W_H[i]);
            const T1l = T1ll | 0;
            const sigma0h =
                u64_default.rotrSH(Ah, Al, 28) ^ u64_default.rotrBH(Ah, Al, 34) ^ u64_default.rotrBH(Ah, Al, 39);
            const sigma0l =
                u64_default.rotrSL(Ah, Al, 28) ^ u64_default.rotrBL(Ah, Al, 34) ^ u64_default.rotrBL(Ah, Al, 39);
            const MAJh = (Ah & Bh) ^ (Ah & Ch) ^ (Bh & Ch);
            const MAJl = (Al & Bl) ^ (Al & Cl) ^ (Bl & Cl);
            Hh = Gh | 0;
            Hl = Gl | 0;
            Gh = Fh | 0;
            Gl = Fl | 0;
            Fh = Eh | 0;
            Fl = El | 0;
            ({ h: Eh, l: El } = u64_default.add(Dh | 0, Dl | 0, T1h | 0, T1l | 0));
            Dh = Ch | 0;
            Dl = Cl | 0;
            Ch = Bh | 0;
            Cl = Bl | 0;
            Bh = Ah | 0;
            Bl = Al | 0;
            const All = u64_default.add3L(T1l, sigma0l, MAJl);
            Ah = u64_default.add3H(All, T1h, sigma0h, MAJh);
            Al = All | 0;
        }
        ({ h: Ah, l: Al } = u64_default.add(this.Ah | 0, this.Al | 0, Ah | 0, Al | 0));
        ({ h: Bh, l: Bl } = u64_default.add(this.Bh | 0, this.Bl | 0, Bh | 0, Bl | 0));
        ({ h: Ch, l: Cl } = u64_default.add(this.Ch | 0, this.Cl | 0, Ch | 0, Cl | 0));
        ({ h: Dh, l: Dl } = u64_default.add(this.Dh | 0, this.Dl | 0, Dh | 0, Dl | 0));
        ({ h: Eh, l: El } = u64_default.add(this.Eh | 0, this.El | 0, Eh | 0, El | 0));
        ({ h: Fh, l: Fl } = u64_default.add(this.Fh | 0, this.Fl | 0, Fh | 0, Fl | 0));
        ({ h: Gh, l: Gl } = u64_default.add(this.Gh | 0, this.Gl | 0, Gh | 0, Gl | 0));
        ({ h: Hh, l: Hl } = u64_default.add(this.Hh | 0, this.Hl | 0, Hh | 0, Hl | 0));
        this.set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl);
    }
    roundClean() {
        SHA512_W_H.fill(0);
        SHA512_W_L.fill(0);
    }
    destroy() {
        this.buffer.fill(0);
        this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
    }
};
var SHA512_224 = class extends SHA512 {
    constructor() {
        super();
        this.Ah = 2352822216 | 0;
        this.Al = 424955298 | 0;
        this.Bh = 1944164710 | 0;
        this.Bl = 2312950998 | 0;
        this.Ch = 502970286 | 0;
        this.Cl = 855612546 | 0;
        this.Dh = 1738396948 | 0;
        this.Dl = 1479516111 | 0;
        this.Eh = 258812777 | 0;
        this.El = 2077511080 | 0;
        this.Fh = 2011393907 | 0;
        this.Fl = 79989058 | 0;
        this.Gh = 1067287976 | 0;
        this.Gl = 1780299464 | 0;
        this.Hh = 286451373 | 0;
        this.Hl = 2446758561 | 0;
        this.outputLen = 28;
    }
};
var SHA512_256 = class extends SHA512 {
    constructor() {
        super();
        this.Ah = 573645204 | 0;
        this.Al = 4230739756 | 0;
        this.Bh = 2673172387 | 0;
        this.Bl = 3360449730 | 0;
        this.Ch = 596883563 | 0;
        this.Cl = 1867755857 | 0;
        this.Dh = 2520282905 | 0;
        this.Dl = 1497426621 | 0;
        this.Eh = 2519219938 | 0;
        this.El = 2827943907 | 0;
        this.Fh = 3193839141 | 0;
        this.Fl = 1401305490 | 0;
        this.Gh = 721525244 | 0;
        this.Gl = 746961066 | 0;
        this.Hh = 246885852 | 0;
        this.Hl = 2177182882 | 0;
        this.outputLen = 32;
    }
};
var SHA384 = class extends SHA512 {
    constructor() {
        super();
        this.Ah = 3418070365 | 0;
        this.Al = 3238371032 | 0;
        this.Bh = 1654270250 | 0;
        this.Bl = 914150663 | 0;
        this.Ch = 2438529370 | 0;
        this.Cl = 812702999 | 0;
        this.Dh = 355462360 | 0;
        this.Dl = 4144912697 | 0;
        this.Eh = 1731405415 | 0;
        this.El = 4290775857 | 0;
        this.Fh = 2394180231 | 0;
        this.Fl = 1750603025 | 0;
        this.Gh = 3675008525 | 0;
        this.Gl = 1694076839 | 0;
        this.Hh = 1203062813 | 0;
        this.Hl = 3204075428 | 0;
        this.outputLen = 48;
    }
};
var sha512 = wrapConstructor(() => new SHA512());
var sha512_224 = wrapConstructor(() => new SHA512_224());
var sha512_256 = wrapConstructor(() => new SHA512_256());
var sha384 = wrapConstructor(() => new SHA384());

// node_modules/@scure/base/lib/esm/index.js
function assertNumber(n) {
    if (!Number.isSafeInteger(n)) throw new Error(`Wrong integer: ${n}`);
}
function isBytes3(a) {
    return a instanceof Uint8Array || (a != null && typeof a === 'object' && a.constructor.name === 'Uint8Array');
}
function chain(...args) {
    const id = (a) => a;
    const wrap = (a, b) => (c) => a(b(c));
    const encode = args.map((x) => x.encode).reduceRight(wrap, id);
    const decode = args.map((x) => x.decode).reduce(wrap, id);
    return { encode, decode };
}
function alphabet(alphabet2) {
    return {
        encode: (digits) => {
            if (!Array.isArray(digits) || (digits.length && typeof digits[0] !== 'number'))
                throw new Error('alphabet.encode input should be an array of numbers');
            return digits.map((i) => {
                assertNumber(i);
                if (i < 0 || i >= alphabet2.length)
                    throw new Error(`Digit index outside alphabet: ${i} (alphabet: ${alphabet2.length})`);
                return alphabet2[i];
            });
        },
        decode: (input) => {
            if (!Array.isArray(input) || (input.length && typeof input[0] !== 'string'))
                throw new Error('alphabet.decode input should be array of strings');
            return input.map((letter) => {
                if (typeof letter !== 'string') throw new Error(`alphabet.decode: not string element=${letter}`);
                const index = alphabet2.indexOf(letter);
                if (index === -1) throw new Error(`Unknown letter: "${letter}". Allowed: ${alphabet2}`);
                return index;
            });
        },
    };
}
function join(separator = '') {
    if (typeof separator !== 'string') throw new Error('join separator should be string');
    return {
        encode: (from) => {
            if (!Array.isArray(from) || (from.length && typeof from[0] !== 'string'))
                throw new Error('join.encode input should be array of strings');
            for (let i of from) if (typeof i !== 'string') throw new Error(`join.encode: non-string input=${i}`);
            return from.join(separator);
        },
        decode: (to) => {
            if (typeof to !== 'string') throw new Error('join.decode input should be string');
            return to.split(separator);
        },
    };
}
function padding(bits, chr = '=') {
    assertNumber(bits);
    if (typeof chr !== 'string') throw new Error('padding chr should be string');
    return {
        encode(data) {
            if (!Array.isArray(data) || (data.length && typeof data[0] !== 'string'))
                throw new Error('padding.encode input should be array of strings');
            for (let i of data) if (typeof i !== 'string') throw new Error(`padding.encode: non-string input=${i}`);
            while ((data.length * bits) % 8) data.push(chr);
            return data;
        },
        decode(input) {
            if (!Array.isArray(input) || (input.length && typeof input[0] !== 'string'))
                throw new Error('padding.encode input should be array of strings');
            for (let i of input) if (typeof i !== 'string') throw new Error(`padding.decode: non-string input=${i}`);
            let end = input.length;
            if ((end * bits) % 8) throw new Error('Invalid padding: string should have whole number of bytes');
            for (; end > 0 && input[end - 1] === chr; end--) {
                if (!(((end - 1) * bits) % 8)) throw new Error('Invalid padding: string has too much padding');
            }
            return input.slice(0, end);
        },
    };
}
function normalize(fn) {
    if (typeof fn !== 'function') throw new Error('normalize fn should be function');
    return { encode: (from) => from, decode: (to) => fn(to) };
}
function convertRadix(data, from, to) {
    if (from < 2) throw new Error(`convertRadix: wrong from=${from}, base cannot be less than 2`);
    if (to < 2) throw new Error(`convertRadix: wrong to=${to}, base cannot be less than 2`);
    if (!Array.isArray(data)) throw new Error('convertRadix: data should be array');
    if (!data.length) return [];
    let pos = 0;
    const res = [];
    const digits = Array.from(data);
    digits.forEach((d) => {
        assertNumber(d);
        if (d < 0 || d >= from) throw new Error(`Wrong integer: ${d}`);
    });
    while (true) {
        let carry = 0;
        let done = true;
        for (let i = pos; i < digits.length; i++) {
            const digit = digits[i];
            const digitBase = from * carry + digit;
            if (
                !Number.isSafeInteger(digitBase) ||
                (from * carry) / from !== carry ||
                digitBase - digit !== from * carry
            ) {
                throw new Error('convertRadix: carry overflow');
            }
            carry = digitBase % to;
            const rounded = Math.floor(digitBase / to);
            digits[i] = rounded;
            if (!Number.isSafeInteger(rounded) || rounded * to + carry !== digitBase)
                throw new Error('convertRadix: carry overflow');
            if (!done) continue;
            else if (!rounded) pos = i;
            else done = false;
        }
        res.push(carry);
        if (done) break;
    }
    for (let i = 0; i < data.length - 1 && data[i] === 0; i++) res.push(0);
    return res.reverse();
}
var gcd = (a, b) => (!b ? a : gcd(b, a % b));
var radix2carry = (from, to) => from + (to - gcd(from, to));
function convertRadix2(data, from, to, padding2) {
    if (!Array.isArray(data)) throw new Error('convertRadix2: data should be array');
    if (from <= 0 || from > 32) throw new Error(`convertRadix2: wrong from=${from}`);
    if (to <= 0 || to > 32) throw new Error(`convertRadix2: wrong to=${to}`);
    if (radix2carry(from, to) > 32) {
        throw new Error(`convertRadix2: carry overflow from=${from} to=${to} carryBits=${radix2carry(from, to)}`);
    }
    let carry = 0;
    let pos = 0;
    const mask = 2 ** to - 1;
    const res = [];
    for (const n of data) {
        assertNumber(n);
        if (n >= 2 ** from) throw new Error(`convertRadix2: invalid data word=${n} from=${from}`);
        carry = (carry << from) | n;
        if (pos + from > 32) throw new Error(`convertRadix2: carry overflow pos=${pos} from=${from}`);
        pos += from;
        for (; pos >= to; pos -= to) res.push(((carry >> (pos - to)) & mask) >>> 0);
        carry &= 2 ** pos - 1;
    }
    carry = (carry << (to - pos)) & mask;
    if (!padding2 && pos >= from) throw new Error('Excess padding');
    if (!padding2 && carry) throw new Error(`Non-zero padding: ${carry}`);
    if (padding2 && pos > 0) res.push(carry >>> 0);
    return res;
}
function radix(num) {
    assertNumber(num);
    return {
        encode: (bytes2) => {
            if (!isBytes3(bytes2)) throw new Error('radix.encode input should be Uint8Array');
            return convertRadix(Array.from(bytes2), 2 ** 8, num);
        },
        decode: (digits) => {
            if (!Array.isArray(digits) || (digits.length && typeof digits[0] !== 'number'))
                throw new Error('radix.decode input should be array of numbers');
            return Uint8Array.from(convertRadix(digits, num, 2 ** 8));
        },
    };
}
function radix2(bits, revPadding = false) {
    assertNumber(bits);
    if (bits <= 0 || bits > 32) throw new Error('radix2: bits should be in (0..32]');
    if (radix2carry(8, bits) > 32 || radix2carry(bits, 8) > 32) throw new Error('radix2: carry overflow');
    return {
        encode: (bytes2) => {
            if (!isBytes3(bytes2)) throw new Error('radix2.encode input should be Uint8Array');
            return convertRadix2(Array.from(bytes2), 8, bits, !revPadding);
        },
        decode: (digits) => {
            if (!Array.isArray(digits) || (digits.length && typeof digits[0] !== 'number'))
                throw new Error('radix2.decode input should be array of numbers');
            return Uint8Array.from(convertRadix2(digits, bits, 8, revPadding));
        },
    };
}
function unsafeWrapper(fn) {
    if (typeof fn !== 'function') throw new Error('unsafeWrapper fn should be function');
    return function (...args) {
        try {
            return fn.apply(null, args);
        } catch (e) {}
    };
}
function checksum(len, fn) {
    assertNumber(len);
    if (typeof fn !== 'function') throw new Error('checksum fn should be function');
    return {
        encode(data) {
            if (!isBytes3(data)) throw new Error('checksum.encode: input should be Uint8Array');
            const checksum2 = fn(data).slice(0, len);
            const res = new Uint8Array(data.length + len);
            res.set(data);
            res.set(checksum2, data.length);
            return res;
        },
        decode(data) {
            if (!isBytes3(data)) throw new Error('checksum.decode: input should be Uint8Array');
            const payload = data.slice(0, -len);
            const newChecksum = fn(payload).slice(0, len);
            const oldChecksum = data.slice(-len);
            for (let i = 0; i < len; i++) if (newChecksum[i] !== oldChecksum[i]) throw new Error('Invalid checksum');
            return payload;
        },
    };
}
var utils = {
    alphabet,
    chain,
    checksum,
    convertRadix,
    convertRadix2,
    radix,
    radix2,
    join,
    padding,
};
var base16 = chain(radix2(4), alphabet('0123456789ABCDEF'), join(''));
var base32 = chain(radix2(5), alphabet('ABCDEFGHIJKLMNOPQRSTUVWXYZ234567'), padding(5), join(''));
var base32hex = chain(radix2(5), alphabet('0123456789ABCDEFGHIJKLMNOPQRSTUV'), padding(5), join(''));
var base32crockford = chain(
    radix2(5),
    alphabet('0123456789ABCDEFGHJKMNPQRSTVWXYZ'),
    join(''),
    normalize((s) => s.toUpperCase().replace(/O/g, '0').replace(/[IL]/g, '1'))
);
var base64 = chain(
    radix2(6),
    alphabet('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'),
    padding(6),
    join('')
);
var base64url = chain(
    radix2(6),
    alphabet('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_'),
    padding(6),
    join('')
);
var base64urlnopad = chain(
    radix2(6),
    alphabet('ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_'),
    join('')
);
var genBase58 = (abc) => chain(radix(58), alphabet(abc), join(''));
var base58 = genBase58('123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz');
var base58flickr = genBase58('123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ');
var base58xrp = genBase58('rpshnaf39wBUDNEGHJKLM4PQRST7VWXYZ2bcdeCg65jkm8oFqi1tuvAxyz');
var BECH_ALPHABET = chain(alphabet('qpzry9x8gf2tvdw0s3jn54khce6mua7l'), join(''));
var POLYMOD_GENERATORS = [996825010, 642813549, 513874426, 1027748829, 705979059];
function bech32Polymod(pre) {
    const b = pre >> 25;
    let chk = (pre & 33554431) << 5;
    for (let i = 0; i < POLYMOD_GENERATORS.length; i++) {
        if (((b >> i) & 1) === 1) chk ^= POLYMOD_GENERATORS[i];
    }
    return chk;
}
function bechChecksum(prefix, words, encodingConst = 1) {
    const len = prefix.length;
    let chk = 1;
    for (let i = 0; i < len; i++) {
        const c = prefix.charCodeAt(i);
        if (c < 33 || c > 126) throw new Error(`Invalid prefix (${prefix})`);
        chk = bech32Polymod(chk) ^ (c >> 5);
    }
    chk = bech32Polymod(chk);
    for (let i = 0; i < len; i++) chk = bech32Polymod(chk) ^ (prefix.charCodeAt(i) & 31);
    for (let v of words) chk = bech32Polymod(chk) ^ v;
    for (let i = 0; i < 6; i++) chk = bech32Polymod(chk);
    chk ^= encodingConst;
    return BECH_ALPHABET.encode(convertRadix2([chk % 2 ** 30], 30, 5, false));
}
function genBech32(encoding) {
    const ENCODING_CONST = encoding === 'bech32' ? 1 : 734539939;
    const _words = radix2(5);
    const fromWords = _words.decode;
    const toWords = _words.encode;
    const fromWordsUnsafe = unsafeWrapper(fromWords);
    function encode(prefix, words, limit = 90) {
        if (typeof prefix !== 'string') throw new Error(`bech32.encode prefix should be string, not ${typeof prefix}`);
        if (!Array.isArray(words) || (words.length && typeof words[0] !== 'number'))
            throw new Error(`bech32.encode words should be array of numbers, not ${typeof words}`);
        const actualLength = prefix.length + 7 + words.length;
        if (limit !== false && actualLength > limit)
            throw new TypeError(`Length ${actualLength} exceeds limit ${limit}`);
        const lowered = prefix.toLowerCase();
        const sum = bechChecksum(lowered, words, ENCODING_CONST);
        return `${lowered}1${BECH_ALPHABET.encode(words)}${sum}`;
    }
    function decode(str2, limit = 90) {
        if (typeof str2 !== 'string') throw new Error(`bech32.decode input should be string, not ${typeof str2}`);
        if (str2.length < 8 || (limit !== false && str2.length > limit))
            throw new TypeError(`Wrong string length: ${str2.length} (${str2}). Expected (8..${limit})`);
        const lowered = str2.toLowerCase();
        if (str2 !== lowered && str2 !== str2.toUpperCase()) throw new Error(`String must be lowercase or uppercase`);
        str2 = lowered;
        const sepIndex = str2.lastIndexOf('1');
        if (sepIndex === 0 || sepIndex === -1)
            throw new Error(`Letter "1" must be present between prefix and data only`);
        const prefix = str2.slice(0, sepIndex);
        const _words2 = str2.slice(sepIndex + 1);
        if (_words2.length < 6) throw new Error('Data must be at least 6 characters long');
        const words = BECH_ALPHABET.decode(_words2).slice(0, -6);
        const sum = bechChecksum(prefix, words, ENCODING_CONST);
        if (!_words2.endsWith(sum)) throw new Error(`Invalid checksum in ${str2}: expected "${sum}"`);
        return { prefix, words };
    }
    const decodeUnsafe = unsafeWrapper(decode);
    function decodeToBytes(str2) {
        const { prefix, words } = decode(str2, false);
        return { prefix, words, bytes: fromWords(words) };
    }
    return { encode, decode, decodeToBytes, decodeUnsafe, fromWords, fromWordsUnsafe, toWords };
}
var bech32 = genBech32('bech32');
var bech32m = genBech32('bech32m');
var hex = chain(
    radix2(4),
    alphabet('0123456789abcdef'),
    join(''),
    normalize((s) => {
        if (typeof s !== 'string' || s.length % 2)
            throw new TypeError(`hex.decode: expected string, got ${typeof s} with length ${s.length}`);
        return s.toLowerCase();
    })
);

// node_modules/@scure/bip39/esm/index.js
function nfkd(str2) {
    if (typeof str2 !== 'string') throw new TypeError(`Invalid mnemonic type: ${typeof str2}`);
    return str2.normalize('NFKD');
}
function normalize2(str2) {
    const norm = nfkd(str2);
    const words = norm.split(' ');
    if (![12, 15, 18, 21, 24].includes(words.length)) throw new Error('Invalid mnemonic');
    return { nfkd: norm, words };
}
function assertEntropy(entropy) {
    bytes(entropy, 16, 20, 24, 28, 32);
}
var calcChecksum = (entropy) => {
    const bitsLeft = 8 - entropy.length / 4;
    return new Uint8Array([(sha2562(entropy)[0] >> bitsLeft) << bitsLeft]);
};
function getCoder(wordlist2) {
    if (!Array.isArray(wordlist2) || wordlist2.length !== 2048 || typeof wordlist2[0] !== 'string')
        throw new Error('Wordlist: expected array of 2048 strings');
    wordlist2.forEach((i) => {
        if (typeof i !== 'string') throw new Error(`Wordlist: non-string element: ${i}`);
    });
    return utils.chain(utils.checksum(1, calcChecksum), utils.radix2(11, true), utils.alphabet(wordlist2));
}
function mnemonicToEntropy(mnemonic, wordlist2) {
    const { words } = normalize2(mnemonic);
    const entropy = getCoder(wordlist2).decode(words);
    assertEntropy(entropy);
    return entropy;
}
function validateMnemonic(mnemonic, wordlist2) {
    try {
        mnemonicToEntropy(mnemonic, wordlist2);
    } catch (e) {
        return false;
    }
    return true;
}
var salt = (passphrase) => nfkd(`mnemonic${passphrase}`);
function mnemonicToSeedSync(mnemonic, passphrase = '') {
    return pbkdf2(sha512, normalize2(mnemonic).nfkd, salt(passphrase), { c: 2048, dkLen: 64 });
}

// node_modules/@scure/bip39/esm/wordlists/english.js
var wordlist = `abandon
ability
able
about
above
absent
absorb
abstract
absurd
abuse
access
accident
account
accuse
achieve
acid
acoustic
acquire
across
act
action
actor
actress
actual
adapt
add
addict
address
adjust
admit
adult
advance
advice
aerobic
affair
afford
afraid
again
age
agent
agree
ahead
aim
air
airport
aisle
alarm
album
alcohol
alert
alien
all
alley
allow
almost
alone
alpha
already
also
alter
always
amateur
amazing
among
amount
amused
analyst
anchor
ancient
anger
angle
angry
animal
ankle
announce
annual
another
answer
antenna
antique
anxiety
any
apart
apology
appear
apple
approve
april
arch
arctic
area
arena
argue
arm
armed
armor
army
around
arrange
arrest
arrive
arrow
art
artefact
artist
artwork
ask
aspect
assault
asset
assist
assume
asthma
athlete
atom
attack
attend
attitude
attract
auction
audit
august
aunt
author
auto
autumn
average
avocado
avoid
awake
aware
away
awesome
awful
awkward
axis
baby
bachelor
bacon
badge
bag
balance
balcony
ball
bamboo
banana
banner
bar
barely
bargain
barrel
base
basic
basket
battle
beach
bean
beauty
because
become
beef
before
begin
behave
behind
believe
below
belt
bench
benefit
best
betray
better
between
beyond
bicycle
bid
bike
bind
biology
bird
birth
bitter
black
blade
blame
blanket
blast
bleak
bless
blind
blood
blossom
blouse
blue
blur
blush
board
boat
body
boil
bomb
bone
bonus
book
boost
border
boring
borrow
boss
bottom
bounce
box
boy
bracket
brain
brand
brass
brave
bread
breeze
brick
bridge
brief
bright
bring
brisk
broccoli
broken
bronze
broom
brother
brown
brush
bubble
buddy
budget
buffalo
build
bulb
bulk
bullet
bundle
bunker
burden
burger
burst
bus
business
busy
butter
buyer
buzz
cabbage
cabin
cable
cactus
cage
cake
call
calm
camera
camp
can
canal
cancel
candy
cannon
canoe
canvas
canyon
capable
capital
captain
car
carbon
card
cargo
carpet
carry
cart
case
cash
casino
castle
casual
cat
catalog
catch
category
cattle
caught
cause
caution
cave
ceiling
celery
cement
census
century
cereal
certain
chair
chalk
champion
change
chaos
chapter
charge
chase
chat
cheap
check
cheese
chef
cherry
chest
chicken
chief
child
chimney
choice
choose
chronic
chuckle
chunk
churn
cigar
cinnamon
circle
citizen
city
civil
claim
clap
clarify
claw
clay
clean
clerk
clever
click
client
cliff
climb
clinic
clip
clock
clog
close
cloth
cloud
clown
club
clump
cluster
clutch
coach
coast
coconut
code
coffee
coil
coin
collect
color
column
combine
come
comfort
comic
common
company
concert
conduct
confirm
congress
connect
consider
control
convince
cook
cool
copper
copy
coral
core
corn
correct
cost
cotton
couch
country
couple
course
cousin
cover
coyote
crack
cradle
craft
cram
crane
crash
crater
crawl
crazy
cream
credit
creek
crew
cricket
crime
crisp
critic
crop
cross
crouch
crowd
crucial
cruel
cruise
crumble
crunch
crush
cry
crystal
cube
culture
cup
cupboard
curious
current
curtain
curve
cushion
custom
cute
cycle
dad
damage
damp
dance
danger
daring
dash
daughter
dawn
day
deal
debate
debris
decade
december
decide
decline
decorate
decrease
deer
defense
define
defy
degree
delay
deliver
demand
demise
denial
dentist
deny
depart
depend
deposit
depth
deputy
derive
describe
desert
design
desk
despair
destroy
detail
detect
develop
device
devote
diagram
dial
diamond
diary
dice
diesel
diet
differ
digital
dignity
dilemma
dinner
dinosaur
direct
dirt
disagree
discover
disease
dish
dismiss
disorder
display
distance
divert
divide
divorce
dizzy
doctor
document
dog
doll
dolphin
domain
donate
donkey
donor
door
dose
double
dove
draft
dragon
drama
drastic
draw
dream
dress
drift
drill
drink
drip
drive
drop
drum
dry
duck
dumb
dune
during
dust
dutch
duty
dwarf
dynamic
eager
eagle
early
earn
earth
easily
east
easy
echo
ecology
economy
edge
edit
educate
effort
egg
eight
either
elbow
elder
electric
elegant
element
elephant
elevator
elite
else
embark
embody
embrace
emerge
emotion
employ
empower
empty
enable
enact
end
endless
endorse
enemy
energy
enforce
engage
engine
enhance
enjoy
enlist
enough
enrich
enroll
ensure
enter
entire
entry
envelope
episode
equal
equip
era
erase
erode
erosion
error
erupt
escape
essay
essence
estate
eternal
ethics
evidence
evil
evoke
evolve
exact
example
excess
exchange
excite
exclude
excuse
execute
exercise
exhaust
exhibit
exile
exist
exit
exotic
expand
expect
expire
explain
expose
express
extend
extra
eye
eyebrow
fabric
face
faculty
fade
faint
faith
fall
false
fame
family
famous
fan
fancy
fantasy
farm
fashion
fat
fatal
father
fatigue
fault
favorite
feature
february
federal
fee
feed
feel
female
fence
festival
fetch
fever
few
fiber
fiction
field
figure
file
film
filter
final
find
fine
finger
finish
fire
firm
first
fiscal
fish
fit
fitness
fix
flag
flame
flash
flat
flavor
flee
flight
flip
float
flock
floor
flower
fluid
flush
fly
foam
focus
fog
foil
fold
follow
food
foot
force
forest
forget
fork
fortune
forum
forward
fossil
foster
found
fox
fragile
frame
frequent
fresh
friend
fringe
frog
front
frost
frown
frozen
fruit
fuel
fun
funny
furnace
fury
future
gadget
gain
galaxy
gallery
game
gap
garage
garbage
garden
garlic
garment
gas
gasp
gate
gather
gauge
gaze
general
genius
genre
gentle
genuine
gesture
ghost
giant
gift
giggle
ginger
giraffe
girl
give
glad
glance
glare
glass
glide
glimpse
globe
gloom
glory
glove
glow
glue
goat
goddess
gold
good
goose
gorilla
gospel
gossip
govern
gown
grab
grace
grain
grant
grape
grass
gravity
great
green
grid
grief
grit
grocery
group
grow
grunt
guard
guess
guide
guilt
guitar
gun
gym
habit
hair
half
hammer
hamster
hand
happy
harbor
hard
harsh
harvest
hat
have
hawk
hazard
head
health
heart
heavy
hedgehog
height
hello
helmet
help
hen
hero
hidden
high
hill
hint
hip
hire
history
hobby
hockey
hold
hole
holiday
hollow
home
honey
hood
hope
horn
horror
horse
hospital
host
hotel
hour
hover
hub
huge
human
humble
humor
hundred
hungry
hunt
hurdle
hurry
hurt
husband
hybrid
ice
icon
idea
identify
idle
ignore
ill
illegal
illness
image
imitate
immense
immune
impact
impose
improve
impulse
inch
include
income
increase
index
indicate
indoor
industry
infant
inflict
inform
inhale
inherit
initial
inject
injury
inmate
inner
innocent
input
inquiry
insane
insect
inside
inspire
install
intact
interest
into
invest
invite
involve
iron
island
isolate
issue
item
ivory
jacket
jaguar
jar
jazz
jealous
jeans
jelly
jewel
job
join
joke
journey
joy
judge
juice
jump
jungle
junior
junk
just
kangaroo
keen
keep
ketchup
key
kick
kid
kidney
kind
kingdom
kiss
kit
kitchen
kite
kitten
kiwi
knee
knife
knock
know
lab
label
labor
ladder
lady
lake
lamp
language
laptop
large
later
latin
laugh
laundry
lava
law
lawn
lawsuit
layer
lazy
leader
leaf
learn
leave
lecture
left
leg
legal
legend
leisure
lemon
lend
length
lens
leopard
lesson
letter
level
liar
liberty
library
license
life
lift
light
like
limb
limit
link
lion
liquid
list
little
live
lizard
load
loan
lobster
local
lock
logic
lonely
long
loop
lottery
loud
lounge
love
loyal
lucky
luggage
lumber
lunar
lunch
luxury
lyrics
machine
mad
magic
magnet
maid
mail
main
major
make
mammal
man
manage
mandate
mango
mansion
manual
maple
marble
march
margin
marine
market
marriage
mask
mass
master
match
material
math
matrix
matter
maximum
maze
meadow
mean
measure
meat
mechanic
medal
media
melody
melt
member
memory
mention
menu
mercy
merge
merit
merry
mesh
message
metal
method
middle
midnight
milk
million
mimic
mind
minimum
minor
minute
miracle
mirror
misery
miss
mistake
mix
mixed
mixture
mobile
model
modify
mom
moment
monitor
monkey
monster
month
moon
moral
more
morning
mosquito
mother
motion
motor
mountain
mouse
move
movie
much
muffin
mule
multiply
muscle
museum
mushroom
music
must
mutual
myself
mystery
myth
naive
name
napkin
narrow
nasty
nation
nature
near
neck
need
negative
neglect
neither
nephew
nerve
nest
net
network
neutral
never
news
next
nice
night
noble
noise
nominee
noodle
normal
north
nose
notable
note
nothing
notice
novel
now
nuclear
number
nurse
nut
oak
obey
object
oblige
obscure
observe
obtain
obvious
occur
ocean
october
odor
off
offer
office
often
oil
okay
old
olive
olympic
omit
once
one
onion
online
only
open
opera
opinion
oppose
option
orange
orbit
orchard
order
ordinary
organ
orient
original
orphan
ostrich
other
outdoor
outer
output
outside
oval
oven
over
own
owner
oxygen
oyster
ozone
pact
paddle
page
pair
palace
palm
panda
panel
panic
panther
paper
parade
parent
park
parrot
party
pass
patch
path
patient
patrol
pattern
pause
pave
payment
peace
peanut
pear
peasant
pelican
pen
penalty
pencil
people
pepper
perfect
permit
person
pet
phone
photo
phrase
physical
piano
picnic
picture
piece
pig
pigeon
pill
pilot
pink
pioneer
pipe
pistol
pitch
pizza
place
planet
plastic
plate
play
please
pledge
pluck
plug
plunge
poem
poet
point
polar
pole
police
pond
pony
pool
popular
portion
position
possible
post
potato
pottery
poverty
powder
power
practice
praise
predict
prefer
prepare
present
pretty
prevent
price
pride
primary
print
priority
prison
private
prize
problem
process
produce
profit
program
project
promote
proof
property
prosper
protect
proud
provide
public
pudding
pull
pulp
pulse
pumpkin
punch
pupil
puppy
purchase
purity
purpose
purse
push
put
puzzle
pyramid
quality
quantum
quarter
question
quick
quit
quiz
quote
rabbit
raccoon
race
rack
radar
radio
rail
rain
raise
rally
ramp
ranch
random
range
rapid
rare
rate
rather
raven
raw
razor
ready
real
reason
rebel
rebuild
recall
receive
recipe
record
recycle
reduce
reflect
reform
refuse
region
regret
regular
reject
relax
release
relief
rely
remain
remember
remind
remove
render
renew
rent
reopen
repair
repeat
replace
report
require
rescue
resemble
resist
resource
response
result
retire
retreat
return
reunion
reveal
review
reward
rhythm
rib
ribbon
rice
rich
ride
ridge
rifle
right
rigid
ring
riot
ripple
risk
ritual
rival
river
road
roast
robot
robust
rocket
romance
roof
rookie
room
rose
rotate
rough
round
route
royal
rubber
rude
rug
rule
run
runway
rural
sad
saddle
sadness
safe
sail
salad
salmon
salon
salt
salute
same
sample
sand
satisfy
satoshi
sauce
sausage
save
say
scale
scan
scare
scatter
scene
scheme
school
science
scissors
scorpion
scout
scrap
screen
script
scrub
sea
search
season
seat
second
secret
section
security
seed
seek
segment
select
sell
seminar
senior
sense
sentence
series
service
session
settle
setup
seven
shadow
shaft
shallow
share
shed
shell
sheriff
shield
shift
shine
ship
shiver
shock
shoe
shoot
shop
short
shoulder
shove
shrimp
shrug
shuffle
shy
sibling
sick
side
siege
sight
sign
silent
silk
silly
silver
similar
simple
since
sing
siren
sister
situate
six
size
skate
sketch
ski
skill
skin
skirt
skull
slab
slam
sleep
slender
slice
slide
slight
slim
slogan
slot
slow
slush
small
smart
smile
smoke
smooth
snack
snake
snap
sniff
snow
soap
soccer
social
sock
soda
soft
solar
soldier
solid
solution
solve
someone
song
soon
sorry
sort
soul
sound
soup
source
south
space
spare
spatial
spawn
speak
special
speed
spell
spend
sphere
spice
spider
spike
spin
spirit
split
spoil
sponsor
spoon
sport
spot
spray
spread
spring
spy
square
squeeze
squirrel
stable
stadium
staff
stage
stairs
stamp
stand
start
state
stay
steak
steel
stem
step
stereo
stick
still
sting
stock
stomach
stone
stool
story
stove
strategy
street
strike
strong
struggle
student
stuff
stumble
style
subject
submit
subway
success
such
sudden
suffer
sugar
suggest
suit
summer
sun
sunny
sunset
super
supply
supreme
sure
surface
surge
surprise
surround
survey
suspect
sustain
swallow
swamp
swap
swarm
swear
sweet
swift
swim
swing
switch
sword
symbol
symptom
syrup
system
table
tackle
tag
tail
talent
talk
tank
tape
target
task
taste
tattoo
taxi
teach
team
tell
ten
tenant
tennis
tent
term
test
text
thank
that
theme
then
theory
there
they
thing
this
thought
three
thrive
throw
thumb
thunder
ticket
tide
tiger
tilt
timber
time
tiny
tip
tired
tissue
title
toast
tobacco
today
toddler
toe
together
toilet
token
tomato
tomorrow
tone
tongue
tonight
tool
tooth
top
topic
topple
torch
tornado
tortoise
toss
total
tourist
toward
tower
town
toy
track
trade
traffic
tragic
train
transfer
trap
trash
travel
tray
treat
tree
trend
trial
tribe
trick
trigger
trim
trip
trophy
trouble
truck
true
truly
trumpet
trust
truth
try
tube
tuition
tumble
tuna
tunnel
turkey
turn
turtle
twelve
twenty
twice
twin
twist
two
type
typical
ugly
umbrella
unable
unaware
uncle
uncover
under
undo
unfair
unfold
unhappy
uniform
unique
unit
universe
unknown
unlock
until
unusual
unveil
update
upgrade
uphold
upon
upper
upset
urban
urge
usage
use
used
useful
useless
usual
utility
vacant
vacuum
vague
valid
valley
valve
van
vanish
vapor
various
vast
vault
vehicle
velvet
vendor
venture
venue
verb
verify
version
very
vessel
veteran
viable
vibrant
vicious
victory
video
view
village
vintage
violin
virtual
virus
visa
visit
visual
vital
vivid
vocal
voice
void
volcano
volume
vote
voyage
wage
wagon
wait
walk
wall
walnut
want
warfare
warm
warrior
wash
wasp
waste
water
wave
way
wealth
weapon
wear
weasel
weather
web
wedding
weekend
weird
welcome
west
wet
whale
what
wheat
wheel
when
where
whip
whisper
wide
width
wife
wild
will
win
window
wine
wing
wink
winner
winter
wire
wisdom
wise
wish
witness
wolf
woman
wonder
wood
wool
word
work
world
worry
worth
wrap
wreck
wrestle
wrist
write
wrong
yard
year
yellow
you
young
youth
zebra
zero
zone
zoo`.split('\n');

// node_modules/@concordium/web-sdk/lib/esm/wasm/HdWallet.js
var import_buffer23 = __toESM(require_buffer(), 1);
var ConcordiumHdWallet = class _ConcordiumHdWallet {
    static fromSeedPhrase(seedPhrase, network) {
        if (!validateMnemonic(seedPhrase, wordlist)) {
            throw new Error('Invalid seed phrase.');
        }
        const seedAsHex = import_buffer23.Buffer.from(mnemonicToSeedSync(seedPhrase)).toString('hex');
        return new _ConcordiumHdWallet(seedAsHex, network);
    }
    static fromHex(seedAsHex, network) {
        if (seedAsHex.length !== 128) {
            throw new Error('The provided seed ' + seedAsHex + ' is invalid as its length was not 128');
        }
        if (!isHex(seedAsHex)) {
            throw new Error('The provided seed ' + seedAsHex + ' does not represent a hexidecimal value');
        }
        return new _ConcordiumHdWallet(seedAsHex, network);
    }
    constructor(seedAsHex, network) {
        this.seedAsHex = seedAsHex;
        this.network = network;
    }
    getAccountSigningKey(identityProviderIndex, identityIndex, credentialCounter) {
        return import_buffer23.Buffer.from(
            wasm5.getAccountSigningKey(
                this.seedAsHex,
                this.network,
                identityProviderIndex,
                identityIndex,
                credentialCounter
            ),
            'hex'
        );
    }
    getAccountPublicKey(identityProviderIndex, identityIndex, credentialCounter) {
        return import_buffer23.Buffer.from(
            wasm5.getAccountPublicKey(
                this.seedAsHex,
                this.network,
                identityProviderIndex,
                identityIndex,
                credentialCounter
            ),
            'hex'
        );
    }
    getCredentialId(identityProviderIndex, identityIndex, credentialCounter, { onChainCommitmentKey }) {
        return import_buffer23.Buffer.from(
            wasm5.getCredentialId(
                this.seedAsHex,
                this.network,
                identityProviderIndex,
                identityIndex,
                credentialCounter,
                onChainCommitmentKey
            ),
            'hex'
        );
    }
    getPrfKey(identityProviderIndex, identityIndex) {
        return import_buffer23.Buffer.from(
            wasm5.getPrfKey(this.seedAsHex, this.network, identityProviderIndex, identityIndex),
            'hex'
        );
    }
    getIdCredSec(identityProviderIndex, identityIndex) {
        return import_buffer23.Buffer.from(
            wasm5.getIdCredSec(this.seedAsHex, this.network, identityProviderIndex, identityIndex),
            'hex'
        );
    }
    getSignatureBlindingRandomness(identityProviderIndex, identityIndex) {
        return import_buffer23.Buffer.from(
            wasm5.getSignatureBlindingRandomness(this.seedAsHex, this.network, identityProviderIndex, identityIndex),
            'hex'
        );
    }
    getAttributeCommitmentRandomness(identityProviderIndex, identityIndex, credentialCounter, attribute) {
        return import_buffer23.Buffer.from(
            wasm5.getAttributeCommitmentRandomness(
                this.seedAsHex,
                this.network,
                identityProviderIndex,
                identityIndex,
                credentialCounter,
                attribute
            ),
            'hex'
        );
    }
    getVerifiableCredentialSigningKey(issuer, verifiableCredentialIndex) {
        return import_buffer23.Buffer.from(
            wasm5.getVerifiableCredentialSigningKey(
                this.seedAsHex,
                this.network,
                issuer.index,
                issuer.subindex,
                verifiableCredentialIndex
            ),
            'hex'
        );
    }
    getVerifiableCredentialPublicKey(issuer, verifiableCredentialIndex) {
        return import_buffer23.Buffer.from(
            wasm5.getVerifiableCredentialPublicKey(
                this.seedAsHex,
                this.network,
                issuer.index,
                issuer.subindex,
                verifiableCredentialIndex
            ),
            'hex'
        );
    }
    getVerifiableCredentialBackupEncryptionKey() {
        return import_buffer23.Buffer.from(
            wasm5.getVerifiableCredentialBackupEncryptionKey(this.seedAsHex, this.network),
            'hex'
        );
    }
};

// node_modules/@concordium/web-sdk/lib/esm/wasm/identity.js
var wasm6 = __toESM(require_index_min2(), 1);
function createIdentityRequestWithKeys(input) {
    const rawRequest = wasm6.createIdRequestV1(JSON.stringify(input));
    try {
        return JSON.parse(rawRequest).idObjectRequest;
    } catch (e) {
        throw new Error(rawRequest);
    }
}
function createIdentityRequest(input) {
    const wallet = ConcordiumHdWallet.fromHex(input.seed, input.net);
    const identityProviderIndex = input.ipInfo.ipIdentity;
    const identityIndex = input.identityIndex;
    const idCredSec = wallet.getIdCredSec(identityProviderIndex, identityIndex).toString('hex');
    const prfKey = wallet.getPrfKey(identityProviderIndex, identityIndex).toString('hex');
    const blindingRandomness = wallet
        .getSignatureBlindingRandomness(identityProviderIndex, identityIndex)
        .toString('hex');
    const inputWithKeys = {
        arsInfos: input.arsInfos,
        arThreshold: input.arThreshold,
        globalContext: input.globalContext,
        ipInfo: input.ipInfo,
        idCredSec,
        prfKey,
        blindingRandomness,
    };
    return createIdentityRequestWithKeys(inputWithKeys);
}
function createIdentityRecoveryRequest2(input) {
    const wallet = ConcordiumHdWallet.fromHex(input.seedAsHex, input.net);
    const idCredSec = wallet.getIdCredSec(input.ipInfo.ipIdentity, input.identityIndex).toString('hex');
    const inputWithKeys = {
        globalContext: input.globalContext,
        ipInfo: input.ipInfo,
        timestamp: input.timestamp,
        idCredSec,
    };
    return createIdentityRecoveryRequestWithKeys(inputWithKeys);
}
function createIdentityRecoveryRequestWithKeys(input) {
    const rawRequest = wasm6.createIdentityRecoveryRequest(JSON.stringify(input));
    try {
        return JSON.parse(rawRequest).idRecoveryRequest;
    } catch (e) {
        throw new Error(rawRequest);
    }
}
function getIdProof(input) {
    const rawRequest = wasm6.createIdProof(JSON.stringify(input));
    let out;
    try {
        out = JSON.parse(rawRequest);
    } catch (e) {
        throw new Error(rawRequest);
    }
    return out;
}

// node_modules/@concordium/web-sdk/lib/esm/wasm/credentialDeploymentTransactions.js
var import_buffer24 = __toESM(require_buffer(), 1);
var wasm7 = __toESM(require_index_min2(), 1);
function createUnsignedCredentialInfo(
    identity,
    cryptographicParameters2,
    threshold,
    publicKeys,
    credentialIndex,
    revealedAttributes,
    address
) {
    if (publicKeys.length > 255) {
        throw new Error('The number of keys is greater than what the transaction supports: ' + publicKeys.length);
    }
    const identityProvider = identity.identityProvider;
    const credentialInput = {
        ipInfo: identityProvider.ipInfo,
        arsInfos: identityProvider.arsInfos,
        global: cryptographicParameters2,
        identityObject: identity.identityObject,
        randomness: {
            randomness: identity.randomness,
        },
        publicKeys,
        credentialNumber: credentialIndex,
        threshold,
        prfKey: identity.prfKey,
        idCredSec: identity.idCredSecret,
        revealedAttributes,
    };
    if (address) {
        credentialInput.address = address.address;
    }
    const unsignedCredentialDeploymentInfoString = wasm7.generateUnsignedCredential(JSON.stringify(credentialInput));
    const result = JSON.parse(unsignedCredentialDeploymentInfoString);
    return result;
}
function createCredentialDeploymentTransaction(
    identity,
    cryptographicParameters2,
    threshold,
    publicKeys,
    credentialIndex,
    revealedAttributes,
    expiry
) {
    const unsignedCredentialInfo = createUnsignedCredentialInfo(
        identity,
        cryptographicParameters2,
        threshold,
        publicKeys,
        credentialIndex,
        revealedAttributes
    );
    return {
        unsignedCdi: unsignedCredentialInfo.unsignedCdi,
        randomness: unsignedCredentialInfo.randomness,
        expiry,
    };
}
function createUnsignedCredentialForExistingAccount(
    identity,
    cryptographicParameters2,
    threshold,
    publicKeys,
    credentialIndex,
    revealedAttributes,
    address
) {
    return createUnsignedCredentialInfo(
        identity,
        cryptographicParameters2,
        threshold,
        publicKeys,
        credentialIndex,
        revealedAttributes,
        address
    );
}
function buildSignedCredentialForExistingAccount(unsignedCredentialInfo, signatures) {
    const signedCredential = JSON.parse(wasm7.getDeploymentInfo(signatures, JSON.stringify(unsignedCredentialInfo)));
    return signedCredential;
}
function getAccountAddress(credId) {
    const hashedCredId = sha256([import_buffer24.Buffer.from(credId, 'hex')]);
    return fromBuffer(hashedCredId);
}
function createCredentialTransaction(input, expiry) {
    const wallet = ConcordiumHdWallet.fromHex(input.seedAsHex, input.net);
    const publicKey = wallet
        .getAccountPublicKey(input.ipInfo.ipIdentity, input.identityIndex, input.credNumber)
        .toString('hex');
    const verifyKey = {
        schemeId: 'Ed25519',
        verifyKey: publicKey,
    };
    const credentialPublicKeys = {
        keys: { 0: verifyKey },
        threshold: 1,
    };
    const prfKey = wallet.getPrfKey(input.ipInfo.ipIdentity, input.identityIndex).toString('hex');
    const idCredSec = wallet.getIdCredSec(input.ipInfo.ipIdentity, input.identityIndex).toString('hex');
    const randomness = wallet
        .getSignatureBlindingRandomness(input.ipInfo.ipIdentity, input.identityIndex)
        .toString('hex');
    const attributeRandomness = mapRecord(
        filterRecord(AttributesKeys, (k) => isNaN(Number(k))),
        (x) =>
            wallet
                .getAttributeCommitmentRandomness(input.ipInfo.ipIdentity, input.identityIndex, input.credNumber, x)
                .toString('hex')
    );
    const noSeedInput = {
        ipInfo: input.ipInfo,
        globalContext: input.globalContext,
        arsInfos: input.arsInfos,
        idObject: input.idObject,
        idCredSec,
        prfKey,
        sigRetrievelRandomness: randomness,
        credentialPublicKeys,
        attributeRandomness,
        revealedAttributes: input.revealedAttributes,
        credNumber: input.credNumber,
    };
    return createCredentialTransactionNoSeed(noSeedInput, expiry);
}
function createCredentialTransactionNoSeed(input, expiry) {
    const { sigRetrievelRandomness, ...other } = input;
    const internalInput = {
        ...other,
        blindingRandomness: input.sigRetrievelRandomness,
    };
    const rawRequest = wasm7.createUnsignedCredentialV1(JSON.stringify(internalInput));
    let info;
    try {
        info = JSON.parse(rawRequest);
    } catch (e) {
        throw new Error(rawRequest);
    }
    return {
        expiry,
        ...info,
    };
}
async function signCredentialTransaction(credDeployment, signingKey) {
    const digest = getCredentialDeploymentSignDigest(credDeployment);
    return import_buffer24.Buffer.from(await signAsync(digest, signingKey)).toString('hex');
}

// node_modules/@concordium/web-sdk/lib/esm/wasm/web3Id.js
var wasm8 = __toESM(require_index_min2(), 1);
var import_json_bigint6 = __toESM(require_json_bigint(), 1);
function verifyWeb3IdCredentialSignature2(input) {
    return wasm8.verifyWeb3IdCredentialSignature((0, import_json_bigint6.stringify)(input));
}
function getVerifiablePresentation(input) {
    try {
        const s = VerifiablePresentation.fromString(
            // Use json-bigint stringify to ensure we can handle bigints
            wasm8.createWeb3IdProof((0, import_json_bigint6.stringify)(input))
        );
        return s;
    } catch (e) {
        throw new Error(e);
    }
}

// node_modules/@concordium/web-sdk/lib/esm/id/idProofs.js
var import_iso_3166_1 = __toESM(require_dist(), 1);
function getPastDate(yearsAgo, daysOffset = 0) {
    const date = /* @__PURE__ */ new Date();
    date.setDate(date.getDate() + daysOffset);
    const month = (date.getMonth() + 1).toString().padStart(2, '0');
    const day = date.getDate().toString().padStart(2, '0');
    const year = (date.getFullYear() - yearsAgo).toString();
    return year + month + day;
}
function getAttributeString(key) {
    if (!(key in AttributesKeys)) {
        throw new Error('invalid attribute key');
    }
    return AttributesKeys[key];
}
function isISO8601(date) {
    if (date.length !== 8) {
        return false;
    }
    if (!/^\d+$/.test(date)) {
        return false;
    }
    const month = Number(date.substring(4, 6));
    if (month < 1 || month > 12) {
        return false;
    }
    const day = Number(date.substring(6));
    if (day < 1 || day > 31) {
        return false;
    }
    return true;
}
function isISO3166_1Alpha2(code) {
    return Boolean((0, import_iso_3166_1.whereAlpha2)(code)) && /^[A-Z][A-Z]$/.test(code);
}
function isISO3166_2(code) {
    return isISO3166_1Alpha2(code.substring(0, 2)) && /^\-([a-zA-Z0-9]){1,3}$/.test(code.substring(2));
}
function verifyRangeStatement(statement) {
    if (statement.lower === void 0) {
        throw new Error('Range statements must contain a lower field');
    }
    if (statement.upper === void 0) {
        throw new Error('Range statements must contain an upper field');
    }
    if (statement.upper < statement.lower) {
        throw new Error('Upper bound must be greater than lower bound');
    }
    switch (statement.attributeTag) {
        case AttributeKeyString.dob:
        case AttributeKeyString.idDocIssuedAt:
        case AttributeKeyString.idDocExpiresAt: {
            if (!isISO8601(statement.lower)) {
                throw new Error(statement.attributeTag + ' lower range value must be YYYYMMDD');
            }
            if (!isISO8601(statement.upper)) {
                throw new Error(statement.attributeTag + ' upper range value must be YYYYMMDD');
            }
            break;
        }
        default:
            throw new Error(statement.attributeTag + ' is not allowed to be used in range statements');
    }
}
function verifySetStatement(statement, typeName) {
    if (statement.set === void 0) {
        throw new Error(typeName + 'statements must contain a lower field');
    }
    if (statement.set.length === 0) {
        throw new Error(typeName + ' statements may not use empty sets');
    }
    switch (statement.attributeTag) {
        case AttributeKeyString.countryOfResidence:
        case AttributeKeyString.nationality:
            if (!statement.set.every(isISO3166_1Alpha2)) {
                throw new Error(statement.attributeTag + ' values must be ISO3166-1 Alpha 2 codes in upper case');
            }
            break;
        case AttributeKeyString.idDocIssuer:
            if (!statement.set.every((x) => isISO3166_1Alpha2(x) || isISO3166_2(x))) {
                throw new Error('idDocIssuer must be ISO3166-1 Alpha 2  in upper case or ISO3166-2 codes');
            }
            break;
        case AttributeKeyString.idDocType:
            if (!statement.set.every((v) => Object.values(IdDocType).includes(v))) {
                throw new Error('idDocType values must be one from IdDocType enum');
            }
            break;
        default:
            throw new Error(statement.attributeTag + ' is not allowed to be used in ' + typeName + ' statements');
    }
}
function verifyAtomicStatement(statement, existingStatements) {
    if (statement.type === void 0) {
        throw new Error('Statements must contain a type field');
    }
    if (statement.attributeTag === void 0) {
        throw new Error('Statements must contain an attributeTag field');
    }
    if (!(statement.attributeTag in AttributeKeyString)) {
        throw new Error('Unknown attributeTag: ' + statement.attributeTag);
    }
    if (existingStatements.some((v) => v.attributeTag === statement.attributeTag)) {
        throw new Error('Only 1 statement is allowed for each attribute');
    }
    switch (statement.type) {
        case StatementTypes.AttributeInRange:
            return verifyRangeStatement(statement);
        case StatementTypes.AttributeInSet:
            return verifySetStatement(statement, 'membership');
        case StatementTypes.AttributeNotInSet:
            return verifySetStatement(statement, 'non-membership');
        case StatementTypes.RevealAttribute:
            return;
        default:
            throw new Error(
                // eslint-disable-next-line @typescript-eslint/no-explicit-any
                'Unknown statement type: ' + statement.type
            );
    }
}
function verifyIdstatement(statements) {
    if (statements.length === 0) {
        throw new Error('Empty statements are not allowed');
    }
    const checkedStatements = [];
    for (const s of statements) {
        verifyAtomicStatement(s, checkedStatements);
        checkedStatements.push(s);
    }
    return true;
}
var IdStatementBuilder = class {
    constructor(checkConstraints = true) {
        this.statements = [];
        this.checkConstraints = checkConstraints;
    }
    /**
     * Outputs the built statement.
     */
    getStatement() {
        return this.statements;
    }
    /**
     * If checkConstraints is true, this checks whether the given statement may be added to the statement being built.
     * If the statement breaks any rules, this will throw an error.
     */
    check(statement) {
        if (this.checkConstraints) {
            verifyAtomicStatement(statement, this.statements);
        }
    }
    /**
     * Add to the statement, that the given attribute should be in the given range, i.e. that lower <= attribute < upper.
     * @param attribute the attribute that should be checked
     * @param lower: the lower end of the range, inclusive.
     * @param upper: the upper end of the range, exclusive.
     * @returns the updated builder
     */
    addRange(attribute, lower, upper) {
        const statement = {
            type: StatementTypes.AttributeInRange,
            attributeTag: getAttributeString(attribute),
            lower,
            upper,
        };
        this.check(statement);
        this.statements.push(statement);
        return this;
    }
    /**
     * Add to the statement, that the given attribute should be one of the values in the given set.
     * @param attribute the attribute that should be checked
     * @param set: the set of values that the attribute must be included in.
     * @returns the updated builder
     */
    addMembership(attribute, set) {
        const statement = {
            type: StatementTypes.AttributeInSet,
            attributeTag: getAttributeString(attribute),
            set,
        };
        this.check(statement);
        this.statements.push(statement);
        return this;
    }
    /**
     * Add to the statement, that the given attribute should be one of the values in the given set.
     * @param attribute the attribute that should be checked
     * @param set: the set of values that the attribute must be included in.
     * @returns the updated builder
     */
    addNonMembership(attribute, set) {
        const statement = {
            type: StatementTypes.AttributeNotInSet,
            attributeTag: getAttributeString(attribute),
            set,
        };
        this.check(statement);
        this.statements.push(statement);
        return this;
    }
    /**
     * Add to the statement, that the given attribute should be revealed.
     * The proof will contain the value.
     * @param attribute the attribute that should be revealed
     * @returns the updated builder
     */
    revealAttribute(attribute) {
        const statement = {
            type: StatementTypes.RevealAttribute,
            attributeTag: getAttributeString(attribute),
        };
        this.check(statement);
        this.statements.push(statement);
        return this;
    }
    /**
     * Add to the statement that the age is at minimum the given value.
     * This adds a range statement that the date of birth is between 1st of january 1800 and <age> years ago.
     * @param age: the minimum age allowed.
     * @returns the updated builder
     */
    addMinimumAge(age) {
        return this.addRange(AttributesKeys.dob, MIN_DATE, getPastDate(age, 1));
    }
    /**
     * Add to the statement that the age is at maximum the given value.
     * This adds a range statement that the date of birth is between <age + 1> years ago and 1st of january 9999.
     * @param age: the maximum age allowed.
     * @returns the updated builder
     */
    addMaximumAge(age) {
        return this.addRange(AttributesKeys.dob, getPastDate(age + 1, 1), MAX_DATE);
    }
    /**
     * Add to the statement that the age is between two given ages.
     * This adds a range statement that the date of birth is between <maxAge> years ago and <minAge> years ago.
     * @param minAge: the maximum age allowed.
     * @param maxAge: the maximum age allowed.
     * @returns the updated builder
     */
    addAgeInRange(minAge, maxAge) {
        return this.addRange(AttributesKeys.dob, getPastDate(maxAge + 1, 1), getPastDate(minAge));
    }
    /**
     * Add to the statement that the user's document expiry is atleast the given date.
     * This adds a range statement that the idDocExpiresAt is between the given date and 1st of january 9999 .
     * @param earliestDate: the earliest the document is allow to be expired at, should be a string in YYYYMMDD format.
     * @returns the updated builder
     */
    documentExpiryNoEarlierThan(earliestDate) {
        return this.addRange(AttributesKeys.idDocExpiresAt, earliestDate, MAX_DATE);
    }
    /**
     * Add to the statement that the country of residence is one of the EU countries
     * @returns the updated builder
     */
    addEUResidency() {
        return this.addMembership(AttributesKeys.countryOfResidence, EU_MEMBERS);
    }
    /**
     * Add to the statement that the nationality is one of the EU countries
     * @returns the updated builder
     */
    addEUNationality() {
        return this.addMembership(AttributesKeys.nationality, EU_MEMBERS);
    }
};

// node_modules/@concordium/web-sdk/lib/esm/id/idProofTypes.js
var attributesWithRange = ['dob', 'idDocIssuedAt', 'idDocExpiresAt'];
var attributesWithSet = ['countryOfResidence', 'nationality', 'idDocType', 'idDocIssuer'];

// node_modules/@concordium/web-sdk/lib/esm/grpc/GRPCClient.js
var import_buffer26 = __toESM(require_buffer(), 1);

// node_modules/@protobuf-ts/grpcweb-transport/build/es2015/goog-grpc-status-code.js
var GrpcStatusCode;
(function (GrpcStatusCode2) {
    GrpcStatusCode2[(GrpcStatusCode2['OK'] = 0)] = 'OK';
    GrpcStatusCode2[(GrpcStatusCode2['CANCELLED'] = 1)] = 'CANCELLED';
    GrpcStatusCode2[(GrpcStatusCode2['UNKNOWN'] = 2)] = 'UNKNOWN';
    GrpcStatusCode2[(GrpcStatusCode2['INVALID_ARGUMENT'] = 3)] = 'INVALID_ARGUMENT';
    GrpcStatusCode2[(GrpcStatusCode2['DEADLINE_EXCEEDED'] = 4)] = 'DEADLINE_EXCEEDED';
    GrpcStatusCode2[(GrpcStatusCode2['NOT_FOUND'] = 5)] = 'NOT_FOUND';
    GrpcStatusCode2[(GrpcStatusCode2['ALREADY_EXISTS'] = 6)] = 'ALREADY_EXISTS';
    GrpcStatusCode2[(GrpcStatusCode2['PERMISSION_DENIED'] = 7)] = 'PERMISSION_DENIED';
    GrpcStatusCode2[(GrpcStatusCode2['UNAUTHENTICATED'] = 16)] = 'UNAUTHENTICATED';
    GrpcStatusCode2[(GrpcStatusCode2['RESOURCE_EXHAUSTED'] = 8)] = 'RESOURCE_EXHAUSTED';
    GrpcStatusCode2[(GrpcStatusCode2['FAILED_PRECONDITION'] = 9)] = 'FAILED_PRECONDITION';
    GrpcStatusCode2[(GrpcStatusCode2['ABORTED'] = 10)] = 'ABORTED';
    GrpcStatusCode2[(GrpcStatusCode2['OUT_OF_RANGE'] = 11)] = 'OUT_OF_RANGE';
    GrpcStatusCode2[(GrpcStatusCode2['UNIMPLEMENTED'] = 12)] = 'UNIMPLEMENTED';
    GrpcStatusCode2[(GrpcStatusCode2['INTERNAL'] = 13)] = 'INTERNAL';
    GrpcStatusCode2[(GrpcStatusCode2['UNAVAILABLE'] = 14)] = 'UNAVAILABLE';
    GrpcStatusCode2[(GrpcStatusCode2['DATA_LOSS'] = 15)] = 'DATA_LOSS';
})(GrpcStatusCode || (GrpcStatusCode = {}));

// node_modules/@protobuf-ts/grpcweb-transport/build/es2015/grpc-web-format.js
var __awaiter6 = function (thisArg, _arguments, P3, generator) {
    function adopt(value) {
        return value instanceof P3
            ? value
            : new P3(function (resolve) {
                  resolve(value);
              });
    }
    return new (P3 || (P3 = Promise))(function (resolve, reject) {
        function fulfilled(value) {
            try {
                step(generator.next(value));
            } catch (e) {
                reject(e);
            }
        }
        function rejected(value) {
            try {
                step(generator['throw'](value));
            } catch (e) {
                reject(e);
            }
        }
        function step(result) {
            result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);
        }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
function createGrpcWebRequestHeader(headers, format, timeout, meta, userAgent) {
    if (meta) {
        for (let [k, v] of Object.entries(meta)) {
            if (typeof v == 'string') headers.append(k, v);
            else for (let i of v) headers.append(k, i);
        }
    }
    headers.set('Content-Type', format === 'text' ? 'application/grpc-web-text' : 'application/grpc-web+proto');
    if (format == 'text') {
        headers.set('Accept', 'application/grpc-web-text');
    }
    headers.set('X-Grpc-Web', '1');
    if (userAgent) headers.set('X-User-Agent', userAgent);
    if (typeof timeout === 'number') {
        if (timeout <= 0) {
            throw new RpcError(`timeout ${timeout} ms exceeded`, GrpcStatusCode[GrpcStatusCode.DEADLINE_EXCEEDED]);
        }
        headers.set('grpc-timeout', `${timeout}m`);
    } else if (timeout) {
        const deadline = timeout.getTime();
        const now = Date.now();
        if (deadline <= now) {
            throw new RpcError(`deadline ${timeout} exceeded`, GrpcStatusCode[GrpcStatusCode.DEADLINE_EXCEEDED]);
        }
        headers.set('grpc-timeout', `${deadline - now}m`);
    }
    return headers;
}
function createGrpcWebRequestBody(message, format) {
    let body = new Uint8Array(5 + message.length);
    body[0] = GrpcWebFrame.DATA;
    for (let msgLen = message.length, i = 4; i > 0; i--) {
        body[i] = msgLen % 256;
        msgLen >>>= 8;
    }
    body.set(message, 5);
    return format === 'binary' ? body : base64encode(body);
}
function readGrpcWebResponseHeader(headersOrFetchResponse, httpStatus, httpStatusText) {
    if (arguments.length === 1) {
        let fetchResponse = headersOrFetchResponse;
        let responseType;
        try {
            responseType = fetchResponse.type;
        } catch (_a) {}
        switch (responseType) {
            case 'error':
            case 'opaque':
            case 'opaqueredirect':
                throw new RpcError(`fetch response type ${fetchResponse.type}`, GrpcStatusCode[GrpcStatusCode.UNKNOWN]);
        }
        return readGrpcWebResponseHeader(
            fetchHeadersToHttp(fetchResponse.headers),
            fetchResponse.status,
            fetchResponse.statusText
        );
    }
    let headers = headersOrFetchResponse,
        httpOk = httpStatus >= 200 && httpStatus < 300,
        responseMeta = parseMetadata(headers),
        [statusCode, statusDetail] = parseStatus(headers);
    if ((statusCode === void 0 || statusCode === GrpcStatusCode.OK) && !httpOk) {
        statusCode = httpStatusToGrpc(httpStatus);
        statusDetail = httpStatusText;
    }
    return [statusCode, statusDetail, responseMeta];
}
function readGrpcWebResponseTrailer(data) {
    let headers = parseTrailer(data),
        [code, detail] = parseStatus(headers),
        meta = parseMetadata(headers);
    return [code !== null && code !== void 0 ? code : GrpcStatusCode.OK, detail, meta];
}
var GrpcWebFrame;
(function (GrpcWebFrame2) {
    GrpcWebFrame2[(GrpcWebFrame2['DATA'] = 0)] = 'DATA';
    GrpcWebFrame2[(GrpcWebFrame2['TRAILER'] = 128)] = 'TRAILER';
})(GrpcWebFrame || (GrpcWebFrame = {}));
function readGrpcWebResponseBody(stream, contentType, onFrame) {
    return __awaiter6(this, void 0, void 0, function* () {
        let streamReader,
            base64queue = '',
            byteQueue = new Uint8Array(0),
            format = parseFormat(contentType);
        if (isReadableStream(stream)) {
            let whatWgReadableStream = stream.getReader();
            streamReader = {
                next: () => whatWgReadableStream.read(),
            };
        } else {
            streamReader = stream[Symbol.asyncIterator]();
        }
        while (true) {
            let result = yield streamReader.next();
            if (result.value !== void 0) {
                if (format === 'text') {
                    for (let i = 0; i < result.value.length; i++) base64queue += String.fromCharCode(result.value[i]);
                    let safeLen = base64queue.length - (base64queue.length % 4);
                    if (safeLen === 0) continue;
                    byteQueue = concatBytes(byteQueue, base64decode(base64queue.substring(0, safeLen)));
                    base64queue = base64queue.substring(safeLen);
                } else {
                    byteQueue = concatBytes(byteQueue, result.value);
                }
                while (byteQueue.length >= 5 && byteQueue[0] === GrpcWebFrame.DATA) {
                    let msgLen = 0;
                    for (let i = 1; i < 5; i++) msgLen = (msgLen << 8) + byteQueue[i];
                    if (byteQueue.length - 5 >= msgLen) {
                        onFrame(GrpcWebFrame.DATA, byteQueue.subarray(5, 5 + msgLen));
                        byteQueue = byteQueue.subarray(5 + msgLen);
                    } else break;
                }
            }
            if (result.done) {
                if (byteQueue.length === 0) break;
                if (byteQueue[0] !== GrpcWebFrame.TRAILER || byteQueue.length < 5)
                    throw new RpcError('premature EOF', GrpcStatusCode[GrpcStatusCode.DATA_LOSS]);
                onFrame(GrpcWebFrame.TRAILER, byteQueue.subarray(5));
                break;
            }
        }
    });
}
var isReadableStream = (s) => {
    return typeof s.getReader == 'function';
};
function concatBytes(a, b) {
    let n = new Uint8Array(a.length + b.length);
    n.set(a);
    n.set(b, a.length);
    return n;
}
function parseFormat(contentType) {
    switch (contentType) {
        case 'application/grpc-web-text':
        case 'application/grpc-web-text+proto':
            return 'text';
        case 'application/grpc-web':
        case 'application/grpc-web+proto':
            return 'binary';
        case void 0:
        case null:
            throw new RpcError('missing response content type', GrpcStatusCode[GrpcStatusCode.INTERNAL]);
        default:
            throw new RpcError(
                'unexpected response content type: ' + contentType,
                GrpcStatusCode[GrpcStatusCode.INTERNAL]
            );
    }
}
function parseStatus(headers) {
    let code, message;
    let m = headers['grpc-message'];
    if (m !== void 0) {
        if (Array.isArray(m)) return [GrpcStatusCode.INTERNAL, 'invalid grpc-web message'];
        message = m;
    }
    let s = headers['grpc-status'];
    if (s !== void 0) {
        if (Array.isArray(s)) return [GrpcStatusCode.INTERNAL, 'invalid grpc-web status'];
        code = parseInt(s, 10);
        if (GrpcStatusCode[code] === void 0) return [GrpcStatusCode.INTERNAL, 'invalid grpc-web status'];
    }
    return [code, message];
}
function parseMetadata(headers) {
    let meta = {};
    for (let [k, v] of Object.entries(headers))
        switch (k) {
            case 'grpc-message':
            case 'grpc-status':
            case 'content-type':
                break;
            default:
                meta[k] = v;
        }
    return meta;
}
function parseTrailer(trailerData) {
    let headers = {};
    for (let chunk of String.fromCharCode.apply(String, trailerData).trim().split('\r\n')) {
        if (chunk == '') continue;
        let [key, ...val] = chunk.split(':');
        const value = val.join(':').trim();
        key = key.trim();
        let e = headers[key];
        if (typeof e == 'string') headers[key] = [e, value];
        else if (Array.isArray(e)) e.push(value);
        else headers[key] = value;
    }
    return headers;
}
function fetchHeadersToHttp(fetchHeaders) {
    let headers = {};
    fetchHeaders.forEach((value, key) => {
        let e = headers[key];
        if (typeof e == 'string') headers[key] = [e, value];
        else if (Array.isArray(e)) e.push(value);
        else headers[key] = value;
    });
    return headers;
}
function httpStatusToGrpc(httpStatus) {
    switch (httpStatus) {
        case 200:
            return GrpcStatusCode.OK;
        case 400:
            return GrpcStatusCode.INVALID_ARGUMENT;
        case 401:
            return GrpcStatusCode.UNAUTHENTICATED;
        case 403:
            return GrpcStatusCode.PERMISSION_DENIED;
        case 404:
            return GrpcStatusCode.NOT_FOUND;
        case 409:
            return GrpcStatusCode.ABORTED;
        case 412:
            return GrpcStatusCode.FAILED_PRECONDITION;
        case 429:
            return GrpcStatusCode.RESOURCE_EXHAUSTED;
        case 499:
            return GrpcStatusCode.CANCELLED;
        case 500:
            return GrpcStatusCode.UNKNOWN;
        case 501:
            return GrpcStatusCode.UNIMPLEMENTED;
        case 503:
            return GrpcStatusCode.UNAVAILABLE;
        case 504:
            return GrpcStatusCode.DEADLINE_EXCEEDED;
        default:
            return GrpcStatusCode.UNKNOWN;
    }
}

// node_modules/@protobuf-ts/grpcweb-transport/build/es2015/grpc-web-transport.js
var GrpcWebFetchTransport = class {
    constructor(defaultOptions) {
        this.defaultOptions = defaultOptions;
    }
    mergeOptions(options) {
        return mergeRpcOptions(this.defaultOptions, options);
    }
    /**
     * Create an URI for a gRPC web call.
     *
     * Takes the `baseUrl` option and appends:
     * - slash "/"
     * - package name
     * - dot "."
     * - service name
     * - slash "/"
     * - method name
     *
     * If the service was declared without a package, the package name and dot
     * are omitted.
     *
     * All names are used exactly like declared in .proto.
     */
    makeUrl(method, options) {
        let base = options.baseUrl;
        if (base.endsWith('/')) base = base.substring(0, base.length - 1);
        return `${base}/${method.service.typeName}/${method.name}`;
    }
    clientStreaming(method) {
        const e = new RpcError(
            'Client streaming is not supported by grpc-web',
            GrpcStatusCode[GrpcStatusCode.UNIMPLEMENTED]
        );
        e.methodName = method.name;
        e.serviceName = method.service.typeName;
        throw e;
    }
    duplex(method) {
        const e = new RpcError(
            'Duplex streaming is not supported by grpc-web',
            GrpcStatusCode[GrpcStatusCode.UNIMPLEMENTED]
        );
        e.methodName = method.name;
        e.serviceName = method.service.typeName;
        throw e;
    }
    serverStreaming(method, input, options) {
        var _a, _b, _c, _d;
        let opt = options,
            format = (_a = opt.format) !== null && _a !== void 0 ? _a : 'text',
            fetchInit = (_b = opt.fetchInit) !== null && _b !== void 0 ? _b : {},
            url = this.makeUrl(method, opt),
            inputBytes = method.I.toBinary(input, opt.binaryOptions),
            defHeader = new Deferred(),
            responseStream = new RpcOutputStreamController(),
            responseEmptyBody = true,
            maybeStatus,
            defStatus = new Deferred(),
            maybeTrailer,
            defTrailer = new Deferred();
        globalThis
            .fetch(
                url,
                Object.assign(Object.assign({}, fetchInit), {
                    method: 'POST',
                    headers: createGrpcWebRequestHeader(new globalThis.Headers(), format, opt.timeout, opt.meta),
                    body: createGrpcWebRequestBody(inputBytes, format),
                    signal: (_c = options.abort) !== null && _c !== void 0 ? _c : null,
                    // node-fetch@3.0.0-beta.9 rejects `undefined`
                })
            )
            .then((fetchResponse) => {
                let [code, detail, meta] = readGrpcWebResponseHeader(fetchResponse);
                defHeader.resolve(meta);
                if (code != null && code !== GrpcStatusCode.OK)
                    throw new RpcError(
                        detail !== null && detail !== void 0 ? detail : GrpcStatusCode[code],
                        GrpcStatusCode[code],
                        meta
                    );
                if (code != null)
                    maybeStatus = {
                        code: GrpcStatusCode[code],
                        detail: detail !== null && detail !== void 0 ? detail : GrpcStatusCode[code],
                    };
                return fetchResponse;
            })
            .then((fetchResponse) => {
                if (!fetchResponse.body)
                    throw new RpcError('missing response body', GrpcStatusCode[GrpcStatusCode.INTERNAL]);
                return readGrpcWebResponseBody(
                    fetchResponse.body,
                    fetchResponse.headers.get('content-type'),
                    (type, data) => {
                        switch (type) {
                            case GrpcWebFrame.DATA:
                                responseStream.notifyMessage(method.O.fromBinary(data, opt.binaryOptions));
                                responseEmptyBody = false;
                                break;
                            case GrpcWebFrame.TRAILER:
                                let code, detail;
                                [code, detail, maybeTrailer] = readGrpcWebResponseTrailer(data);
                                maybeStatus = {
                                    code: GrpcStatusCode[code],
                                    detail: detail !== null && detail !== void 0 ? detail : GrpcStatusCode[code],
                                };
                                break;
                        }
                    }
                );
            })
            .then(() => {
                if (!maybeTrailer && !responseEmptyBody)
                    throw new RpcError(`missing trailers`, GrpcStatusCode[GrpcStatusCode.DATA_LOSS]);
                if (!maybeStatus) throw new RpcError(`missing status`, GrpcStatusCode[GrpcStatusCode.INTERNAL]);
                if (maybeStatus.code !== 'OK') throw new RpcError(maybeStatus.detail, maybeStatus.code, maybeTrailer);
                responseStream.notifyComplete();
                defStatus.resolve(maybeStatus);
                defTrailer.resolve(maybeTrailer || {});
            })
            .catch((reason) => {
                let error;
                if (reason instanceof RpcError) error = reason;
                else if (reason instanceof Error && reason.name === 'AbortError')
                    error = new RpcError(reason.message, GrpcStatusCode[GrpcStatusCode.CANCELLED]);
                else
                    error = new RpcError(
                        reason instanceof Error ? reason.message : '' + reason,
                        GrpcStatusCode[GrpcStatusCode.INTERNAL]
                    );
                error.methodName = method.name;
                error.serviceName = method.service.typeName;
                defHeader.rejectPending(error);
                responseStream.notifyError(error);
                defStatus.rejectPending(error);
                defTrailer.rejectPending(error);
            });
        return new ServerStreamingCall(
            method,
            (_d = opt.meta) !== null && _d !== void 0 ? _d : {},
            input,
            defHeader.promise,
            responseStream,
            defStatus.promise,
            defTrailer.promise
        );
    }
    unary(method, input, options) {
        var _a, _b, _c, _d;
        let opt = options,
            format = (_a = opt.format) !== null && _a !== void 0 ? _a : 'text',
            fetchInit = (_b = opt.fetchInit) !== null && _b !== void 0 ? _b : {},
            url = this.makeUrl(method, opt),
            inputBytes = method.I.toBinary(input, opt.binaryOptions),
            defHeader = new Deferred(),
            maybeMessage,
            defMessage = new Deferred(),
            maybeStatus,
            defStatus = new Deferred(),
            maybeTrailer,
            defTrailer = new Deferred();
        globalThis
            .fetch(
                url,
                Object.assign(Object.assign({}, fetchInit), {
                    method: 'POST',
                    headers: createGrpcWebRequestHeader(new globalThis.Headers(), format, opt.timeout, opt.meta),
                    body: createGrpcWebRequestBody(inputBytes, format),
                    signal: (_c = options.abort) !== null && _c !== void 0 ? _c : null,
                    // node-fetch@3.0.0-beta.9 rejects `undefined`
                })
            )
            .then((fetchResponse) => {
                let [code, detail, meta] = readGrpcWebResponseHeader(fetchResponse);
                defHeader.resolve(meta);
                if (code != null && code !== GrpcStatusCode.OK)
                    throw new RpcError(
                        detail !== null && detail !== void 0 ? detail : GrpcStatusCode[code],
                        GrpcStatusCode[code],
                        meta
                    );
                if (code != null)
                    maybeStatus = {
                        code: GrpcStatusCode[code],
                        detail: detail !== null && detail !== void 0 ? detail : GrpcStatusCode[code],
                    };
                return fetchResponse;
            })
            .then((fetchResponse) => {
                if (!fetchResponse.body)
                    throw new RpcError('missing response body', GrpcStatusCode[GrpcStatusCode.INTERNAL]);
                return readGrpcWebResponseBody(
                    fetchResponse.body,
                    fetchResponse.headers.get('content-type'),
                    (type, data) => {
                        switch (type) {
                            case GrpcWebFrame.DATA:
                                if (maybeMessage)
                                    throw new RpcError(
                                        `unary call received 2nd message`,
                                        GrpcStatusCode[GrpcStatusCode.DATA_LOSS]
                                    );
                                maybeMessage = method.O.fromBinary(data, opt.binaryOptions);
                                break;
                            case GrpcWebFrame.TRAILER:
                                let code, detail;
                                [code, detail, maybeTrailer] = readGrpcWebResponseTrailer(data);
                                maybeStatus = {
                                    code: GrpcStatusCode[code],
                                    detail: detail !== null && detail !== void 0 ? detail : GrpcStatusCode[code],
                                };
                                break;
                        }
                    }
                );
            })
            .then(() => {
                if (!maybeTrailer && maybeMessage)
                    throw new RpcError(`missing trailers`, GrpcStatusCode[GrpcStatusCode.DATA_LOSS]);
                if (!maybeStatus) throw new RpcError(`missing status`, GrpcStatusCode[GrpcStatusCode.INTERNAL]);
                if (!maybeMessage && maybeStatus.code === 'OK')
                    throw new RpcError('expected error status', GrpcStatusCode[GrpcStatusCode.DATA_LOSS]);
                if (!maybeMessage) throw new RpcError(maybeStatus.detail, maybeStatus.code, maybeTrailer);
                defMessage.resolve(maybeMessage);
                if (maybeStatus.code !== 'OK') throw new RpcError(maybeStatus.detail, maybeStatus.code, maybeTrailer);
                defStatus.resolve(maybeStatus);
                defTrailer.resolve(maybeTrailer || {});
            })
            .catch((reason) => {
                let error;
                if (reason instanceof RpcError) error = reason;
                else if (reason instanceof Error && reason.name === 'AbortError')
                    error = new RpcError(reason.message, GrpcStatusCode[GrpcStatusCode.CANCELLED]);
                else
                    error = new RpcError(
                        reason instanceof Error ? reason.message : '' + reason,
                        GrpcStatusCode[GrpcStatusCode.INTERNAL]
                    );
                error.methodName = method.name;
                error.serviceName = method.service.typeName;
                defHeader.rejectPending(error);
                defMessage.rejectPending(error);
                defStatus.rejectPending(error);
                defTrailer.rejectPending(error);
            });
        return new UnaryCall(
            method,
            (_d = opt.meta) !== null && _d !== void 0 ? _d : {},
            input,
            defHeader.promise,
            defMessage.promise,
            defStatus.promise,
            defTrailer.promise
        );
    }
};

// node_modules/@concordium/web-sdk/lib/esm/grpc-api/v2/concordium/types.js
var PeersInfo_Peer_CatchupStatus;
(function (PeersInfo_Peer_CatchupStatus2) {
    PeersInfo_Peer_CatchupStatus2[(PeersInfo_Peer_CatchupStatus2['UPTODATE'] = 0)] = 'UPTODATE';
    PeersInfo_Peer_CatchupStatus2[(PeersInfo_Peer_CatchupStatus2['PENDING'] = 1)] = 'PENDING';
    PeersInfo_Peer_CatchupStatus2[(PeersInfo_Peer_CatchupStatus2['CATCHINGUP'] = 2)] = 'CATCHINGUP';
})(PeersInfo_Peer_CatchupStatus || (PeersInfo_Peer_CatchupStatus = {}));
var NodeInfo_BakerConsensusInfo_PassiveCommitteeInfo;
(function (NodeInfo_BakerConsensusInfo_PassiveCommitteeInfo2) {
    NodeInfo_BakerConsensusInfo_PassiveCommitteeInfo2[
        (NodeInfo_BakerConsensusInfo_PassiveCommitteeInfo2['NOT_IN_COMMITTEE'] = 0)
    ] = 'NOT_IN_COMMITTEE';
    NodeInfo_BakerConsensusInfo_PassiveCommitteeInfo2[
        (NodeInfo_BakerConsensusInfo_PassiveCommitteeInfo2['ADDED_BUT_NOT_ACTIVE_IN_COMMITTEE'] = 1)
    ] = 'ADDED_BUT_NOT_ACTIVE_IN_COMMITTEE';
    NodeInfo_BakerConsensusInfo_PassiveCommitteeInfo2[
        (NodeInfo_BakerConsensusInfo_PassiveCommitteeInfo2['ADDED_BUT_WRONG_KEYS'] = 2)
    ] = 'ADDED_BUT_WRONG_KEYS';
})(NodeInfo_BakerConsensusInfo_PassiveCommitteeInfo || (NodeInfo_BakerConsensusInfo_PassiveCommitteeInfo = {}));
var OpenStatus2;
(function (OpenStatus3) {
    OpenStatus3[(OpenStatus3['OPEN_FOR_ALL'] = 0)] = 'OPEN_FOR_ALL';
    OpenStatus3[(OpenStatus3['CLOSED_FOR_NEW'] = 1)] = 'CLOSED_FOR_NEW';
    OpenStatus3[(OpenStatus3['CLOSED_FOR_ALL'] = 2)] = 'CLOSED_FOR_ALL';
})(OpenStatus2 || (OpenStatus2 = {}));
var ContractVersion2;
(function (ContractVersion3) {
    ContractVersion3[(ContractVersion3['V0'] = 0)] = 'V0';
    ContractVersion3[(ContractVersion3['V1'] = 1)] = 'V1';
})(ContractVersion2 || (ContractVersion2 = {}));
var CredentialType;
(function (CredentialType2) {
    CredentialType2[(CredentialType2['INITIAL'] = 0)] = 'INITIAL';
    CredentialType2[(CredentialType2['NORMAL'] = 1)] = 'NORMAL';
})(CredentialType || (CredentialType = {}));
var UpdateType2;
(function (UpdateType3) {
    UpdateType3[(UpdateType3['UPDATE_PROTOCOL'] = 0)] = 'UPDATE_PROTOCOL';
    UpdateType3[(UpdateType3['UPDATE_ELECTION_DIFFICULTY'] = 1)] = 'UPDATE_ELECTION_DIFFICULTY';
    UpdateType3[(UpdateType3['UPDATE_EURO_PER_ENERGY'] = 2)] = 'UPDATE_EURO_PER_ENERGY';
    UpdateType3[(UpdateType3['UPDATE_MICRO_CCD_PER_EURO'] = 3)] = 'UPDATE_MICRO_CCD_PER_EURO';
    UpdateType3[(UpdateType3['UPDATE_FOUNDATION_ACCOUNT'] = 4)] = 'UPDATE_FOUNDATION_ACCOUNT';
    UpdateType3[(UpdateType3['UPDATE_MINT_DISTRIBUTION'] = 5)] = 'UPDATE_MINT_DISTRIBUTION';
    UpdateType3[(UpdateType3['UPDATE_TRANSACTION_FEE_DISTRIBUTION'] = 6)] = 'UPDATE_TRANSACTION_FEE_DISTRIBUTION';
    UpdateType3[(UpdateType3['UPDATE_GAS_REWARDS'] = 7)] = 'UPDATE_GAS_REWARDS';
    UpdateType3[(UpdateType3['UPDATE_POOL_PARAMETERS'] = 8)] = 'UPDATE_POOL_PARAMETERS';
    UpdateType3[(UpdateType3['ADD_ANONYMITY_REVOKER'] = 9)] = 'ADD_ANONYMITY_REVOKER';
    UpdateType3[(UpdateType3['ADD_IDENTITY_PROVIDER'] = 10)] = 'ADD_IDENTITY_PROVIDER';
    UpdateType3[(UpdateType3['UPDATE_ROOT_KEYS'] = 11)] = 'UPDATE_ROOT_KEYS';
    UpdateType3[(UpdateType3['UPDATE_LEVEL1_KEYS'] = 12)] = 'UPDATE_LEVEL1_KEYS';
    UpdateType3[(UpdateType3['UPDATE_LEVEL2_KEYS'] = 13)] = 'UPDATE_LEVEL2_KEYS';
    UpdateType3[(UpdateType3['UPDATE_COOLDOWN_PARAMETERS'] = 14)] = 'UPDATE_COOLDOWN_PARAMETERS';
    UpdateType3[(UpdateType3['UPDATE_TIME_PARAMETERS'] = 15)] = 'UPDATE_TIME_PARAMETERS';
    UpdateType3[(UpdateType3['UPDATE_TIMEOUT_PARAMETERS'] = 16)] = 'UPDATE_TIMEOUT_PARAMETERS';
    UpdateType3[(UpdateType3['UPDATE_MIN_BLOCK_TIME'] = 17)] = 'UPDATE_MIN_BLOCK_TIME';
    UpdateType3[(UpdateType3['UPDATE_BLOCK_ENERGY_LIMIT'] = 18)] = 'UPDATE_BLOCK_ENERGY_LIMIT';
    UpdateType3[(UpdateType3['UPDATE_FINALIZATION_COMMITTEE_PARAMETERS'] = 19)] =
        'UPDATE_FINALIZATION_COMMITTEE_PARAMETERS';
})(UpdateType2 || (UpdateType2 = {}));
var TransactionType;
(function (TransactionType2) {
    TransactionType2[(TransactionType2['DEPLOY_MODULE'] = 0)] = 'DEPLOY_MODULE';
    TransactionType2[(TransactionType2['INIT_CONTRACT'] = 1)] = 'INIT_CONTRACT';
    TransactionType2[(TransactionType2['UPDATE'] = 2)] = 'UPDATE';
    TransactionType2[(TransactionType2['TRANSFER'] = 3)] = 'TRANSFER';
    TransactionType2[(TransactionType2['ADD_BAKER'] = 4)] = 'ADD_BAKER';
    TransactionType2[(TransactionType2['REMOVE_BAKER'] = 5)] = 'REMOVE_BAKER';
    TransactionType2[(TransactionType2['UPDATE_BAKER_STAKE'] = 6)] = 'UPDATE_BAKER_STAKE';
    TransactionType2[(TransactionType2['UPDATE_BAKER_RESTAKE_EARNINGS'] = 7)] = 'UPDATE_BAKER_RESTAKE_EARNINGS';
    TransactionType2[(TransactionType2['UPDATE_BAKER_KEYS'] = 8)] = 'UPDATE_BAKER_KEYS';
    TransactionType2[(TransactionType2['UPDATE_CREDENTIAL_KEYS'] = 9)] = 'UPDATE_CREDENTIAL_KEYS';
    TransactionType2[(TransactionType2['ENCRYPTED_AMOUNT_TRANSFER'] = 10)] = 'ENCRYPTED_AMOUNT_TRANSFER';
    TransactionType2[(TransactionType2['TRANSFER_TO_ENCRYPTED'] = 11)] = 'TRANSFER_TO_ENCRYPTED';
    TransactionType2[(TransactionType2['TRANSFER_TO_PUBLIC'] = 12)] = 'TRANSFER_TO_PUBLIC';
    TransactionType2[(TransactionType2['TRANSFER_WITH_SCHEDULE'] = 13)] = 'TRANSFER_WITH_SCHEDULE';
    TransactionType2[(TransactionType2['UPDATE_CREDENTIALS'] = 14)] = 'UPDATE_CREDENTIALS';
    TransactionType2[(TransactionType2['REGISTER_DATA'] = 15)] = 'REGISTER_DATA';
    TransactionType2[(TransactionType2['TRANSFER_WITH_MEMO'] = 16)] = 'TRANSFER_WITH_MEMO';
    TransactionType2[(TransactionType2['ENCRYPTED_AMOUNT_TRANSFER_WITH_MEMO'] = 17)] =
        'ENCRYPTED_AMOUNT_TRANSFER_WITH_MEMO';
    TransactionType2[(TransactionType2['TRANSFER_WITH_SCHEDULE_AND_MEMO'] = 18)] = 'TRANSFER_WITH_SCHEDULE_AND_MEMO';
    TransactionType2[(TransactionType2['CONFIGURE_BAKER'] = 19)] = 'CONFIGURE_BAKER';
    TransactionType2[(TransactionType2['CONFIGURE_DELEGATION'] = 20)] = 'CONFIGURE_DELEGATION';
})(TransactionType || (TransactionType = {}));
var ProtocolVersion;
(function (ProtocolVersion2) {
    ProtocolVersion2[(ProtocolVersion2['PROTOCOL_VERSION_1'] = 0)] = 'PROTOCOL_VERSION_1';
    ProtocolVersion2[(ProtocolVersion2['PROTOCOL_VERSION_2'] = 1)] = 'PROTOCOL_VERSION_2';
    ProtocolVersion2[(ProtocolVersion2['PROTOCOL_VERSION_3'] = 2)] = 'PROTOCOL_VERSION_3';
    ProtocolVersion2[(ProtocolVersion2['PROTOCOL_VERSION_4'] = 3)] = 'PROTOCOL_VERSION_4';
    ProtocolVersion2[(ProtocolVersion2['PROTOCOL_VERSION_5'] = 4)] = 'PROTOCOL_VERSION_5';
    ProtocolVersion2[(ProtocolVersion2['PROTOCOL_VERSION_6'] = 5)] = 'PROTOCOL_VERSION_6';
    ProtocolVersion2[(ProtocolVersion2['PROTOCOL_VERSION_7'] = 6)] = 'PROTOCOL_VERSION_7';
})(ProtocolVersion || (ProtocolVersion = {}));
var Empty$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.Empty', []);
    }
};
var Empty = new Empty$Type();
var BlockHash$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.BlockHash', [
            {
                no: 1,
                name: 'value',
                kind: 'scalar',
                T: 12,
                /*ScalarType.BYTES*/
            },
        ]);
    }
};
var BlockHash2 = new BlockHash$Type();
var Sha256Hash$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.Sha256Hash', [
            {
                no: 1,
                name: 'value',
                kind: 'scalar',
                T: 12,
                /*ScalarType.BYTES*/
            },
        ]);
    }
};
var Sha256Hash = new Sha256Hash$Type();
var TransactionHash$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.TransactionHash', [
            {
                no: 1,
                name: 'value',
                kind: 'scalar',
                T: 12,
                /*ScalarType.BYTES*/
            },
        ]);
    }
};
var TransactionHash2 = new TransactionHash$Type();
var StateHash$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.StateHash', [
            {
                no: 1,
                name: 'value',
                kind: 'scalar',
                T: 12,
                /*ScalarType.BYTES*/
            },
        ]);
    }
};
var StateHash = new StateHash$Type();
var AbsoluteBlockHeight$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.AbsoluteBlockHeight', [
            {
                no: 1,
                name: 'value',
                kind: 'scalar',
                T: 4,
                L: 0,
                /*LongType.BIGINT*/
            },
        ]);
    }
};
var AbsoluteBlockHeight = new AbsoluteBlockHeight$Type();
var BlockHeight$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.BlockHeight', [
            {
                no: 1,
                name: 'value',
                kind: 'scalar',
                T: 4,
                L: 0,
                /*LongType.BIGINT*/
            },
        ]);
    }
};
var BlockHeight = new BlockHeight$Type();
var BakerId$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.BakerId', [
            {
                no: 1,
                name: 'value',
                kind: 'scalar',
                T: 4,
                L: 0,
                /*LongType.BIGINT*/
            },
        ]);
    }
};
var BakerId = new BakerId$Type();
var AccountIndex$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.AccountIndex', [
            {
                no: 1,
                name: 'value',
                kind: 'scalar',
                T: 4,
                L: 0,
                /*LongType.BIGINT*/
            },
        ]);
    }
};
var AccountIndex = new AccountIndex$Type();
var ModuleRef$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.ModuleRef', [
            {
                no: 1,
                name: 'value',
                kind: 'scalar',
                T: 12,
                /*ScalarType.BYTES*/
            },
        ]);
    }
};
var ModuleRef = new ModuleRef$Type();
var VersionedModuleSource$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.VersionedModuleSource', [
            { no: 1, name: 'v0', kind: 'message', oneof: 'module', T: () => VersionedModuleSource_ModuleSourceV0 },
            { no: 2, name: 'v1', kind: 'message', oneof: 'module', T: () => VersionedModuleSource_ModuleSourceV1 },
        ]);
    }
};
var VersionedModuleSource = new VersionedModuleSource$Type();
var VersionedModuleSource_ModuleSourceV0$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.VersionedModuleSource.ModuleSourceV0', [
            {
                no: 1,
                name: 'value',
                kind: 'scalar',
                T: 12,
                /*ScalarType.BYTES*/
            },
        ]);
    }
};
var VersionedModuleSource_ModuleSourceV0 = new VersionedModuleSource_ModuleSourceV0$Type();
var VersionedModuleSource_ModuleSourceV1$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.VersionedModuleSource.ModuleSourceV1', [
            {
                no: 1,
                name: 'value',
                kind: 'scalar',
                T: 12,
                /*ScalarType.BYTES*/
            },
        ]);
    }
};
var VersionedModuleSource_ModuleSourceV1 = new VersionedModuleSource_ModuleSourceV1$Type();
var Timestamp$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.Timestamp', [
            {
                no: 1,
                name: 'value',
                kind: 'scalar',
                T: 4,
                L: 0,
                /*LongType.BIGINT*/
            },
        ]);
    }
};
var Timestamp2 = new Timestamp$Type();
var Release$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.Release', [
            { no: 1, name: 'timestamp', kind: 'message', T: () => Timestamp2 },
            { no: 2, name: 'amount', kind: 'message', T: () => Amount },
            { no: 3, name: 'transactions', kind: 'message', repeat: 1, T: () => TransactionHash2 },
        ]);
    }
};
var Release = new Release$Type();
var NewRelease$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.NewRelease', [
            { no: 1, name: 'timestamp', kind: 'message', T: () => Timestamp2 },
            { no: 2, name: 'amount', kind: 'message', T: () => Amount },
        ]);
    }
};
var NewRelease = new NewRelease$Type();
var ReleaseSchedule$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.ReleaseSchedule', [
            { no: 1, name: 'total', kind: 'message', T: () => Amount },
            { no: 2, name: 'schedules', kind: 'message', repeat: 1, T: () => Release },
        ]);
    }
};
var ReleaseSchedule = new ReleaseSchedule$Type();
var EncryptedAmount$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.EncryptedAmount', [
            {
                no: 1,
                name: 'value',
                kind: 'scalar',
                T: 12,
                /*ScalarType.BYTES*/
            },
        ]);
    }
};
var EncryptedAmount = new EncryptedAmount$Type();
var EncryptedBalance$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.EncryptedBalance', [
            { no: 1, name: 'self_amount', kind: 'message', T: () => EncryptedAmount },
            {
                no: 2,
                name: 'start_index',
                kind: 'scalar',
                T: 4,
                L: 0,
                /*LongType.BIGINT*/
            },
            { no: 3, name: 'aggregated_amount', kind: 'message', T: () => EncryptedAmount },
            {
                no: 4,
                name: 'num_aggregated',
                kind: 'scalar',
                opt: true,
                T: 13,
                /*ScalarType.UINT32*/
            },
            { no: 5, name: 'incoming_amounts', kind: 'message', repeat: 1, T: () => EncryptedAmount },
        ]);
    }
};
var EncryptedBalance = new EncryptedBalance$Type();
var DelegationTarget$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.DelegationTarget', [
            { no: 1, name: 'passive', kind: 'message', oneof: 'target', T: () => Empty },
            { no: 2, name: 'baker', kind: 'message', oneof: 'target', T: () => BakerId },
        ]);
    }
};
var DelegationTarget = new DelegationTarget$Type();
var BakerElectionVerifyKey$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.BakerElectionVerifyKey', [
            {
                no: 1,
                name: 'value',
                kind: 'scalar',
                T: 12,
                /*ScalarType.BYTES*/
            },
        ]);
    }
};
var BakerElectionVerifyKey = new BakerElectionVerifyKey$Type();
var BakerSignatureVerifyKey$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.BakerSignatureVerifyKey', [
            {
                no: 1,
                name: 'value',
                kind: 'scalar',
                T: 12,
                /*ScalarType.BYTES*/
            },
        ]);
    }
};
var BakerSignatureVerifyKey = new BakerSignatureVerifyKey$Type();
var BakerAggregationVerifyKey$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.BakerAggregationVerifyKey', [
            {
                no: 1,
                name: 'value',
                kind: 'scalar',
                T: 12,
                /*ScalarType.BYTES*/
            },
        ]);
    }
};
var BakerAggregationVerifyKey = new BakerAggregationVerifyKey$Type();
var BakerInfo$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.BakerInfo', [
            { no: 1, name: 'baker_id', kind: 'message', T: () => BakerId },
            { no: 2, name: 'election_key', kind: 'message', T: () => BakerElectionVerifyKey },
            { no: 3, name: 'signature_key', kind: 'message', T: () => BakerSignatureVerifyKey },
            { no: 4, name: 'aggregation_key', kind: 'message', T: () => BakerAggregationVerifyKey },
        ]);
    }
};
var BakerInfo = new BakerInfo$Type();
var StakePendingChange$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.StakePendingChange', [
            { no: 1, name: 'reduce', kind: 'message', oneof: 'change', T: () => StakePendingChange_Reduce },
            { no: 2, name: 'remove', kind: 'message', oneof: 'change', T: () => Timestamp2 },
        ]);
    }
};
var StakePendingChange = new StakePendingChange$Type();
var StakePendingChange_Reduce$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.StakePendingChange.Reduce', [
            { no: 1, name: 'new_stake', kind: 'message', T: () => Amount },
            { no: 2, name: 'effective_time', kind: 'message', T: () => Timestamp2 },
        ]);
    }
};
var StakePendingChange_Reduce = new StakePendingChange_Reduce$Type();
var AmountFraction$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.AmountFraction', [
            {
                no: 1,
                name: 'parts_per_hundred_thousand',
                kind: 'scalar',
                T: 13,
                /*ScalarType.UINT32*/
            },
        ]);
    }
};
var AmountFraction = new AmountFraction$Type();
var CommissionRates$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.CommissionRates', [
            { no: 1, name: 'finalization', kind: 'message', T: () => AmountFraction },
            { no: 2, name: 'baking', kind: 'message', T: () => AmountFraction },
            { no: 3, name: 'transaction', kind: 'message', T: () => AmountFraction },
        ]);
    }
};
var CommissionRates = new CommissionRates$Type();
var BakerPoolInfo$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.BakerPoolInfo', [
            {
                no: 1,
                name: 'open_status',
                kind: 'enum',
                T: () => ['concordium.v2.OpenStatus', OpenStatus2, 'OPEN_STATUS_'],
            },
            {
                no: 2,
                name: 'url',
                kind: 'scalar',
                T: 9,
                /*ScalarType.STRING*/
            },
            { no: 3, name: 'commission_rates', kind: 'message', T: () => CommissionRates },
        ]);
    }
};
var BakerPoolInfo = new BakerPoolInfo$Type();
var AccountStakingInfo$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.AccountStakingInfo', [
            { no: 1, name: 'baker', kind: 'message', oneof: 'stakingInfo', T: () => AccountStakingInfo_Baker },
            { no: 2, name: 'delegator', kind: 'message', oneof: 'stakingInfo', T: () => AccountStakingInfo_Delegator },
        ]);
    }
};
var AccountStakingInfo = new AccountStakingInfo$Type();
var AccountStakingInfo_Baker$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.AccountStakingInfo.Baker', [
            { no: 1, name: 'staked_amount', kind: 'message', T: () => Amount },
            {
                no: 2,
                name: 'restake_earnings',
                kind: 'scalar',
                T: 8,
                /*ScalarType.BOOL*/
            },
            { no: 3, name: 'baker_info', kind: 'message', T: () => BakerInfo },
            { no: 4, name: 'pending_change', kind: 'message', T: () => StakePendingChange },
            { no: 5, name: 'pool_info', kind: 'message', T: () => BakerPoolInfo },
        ]);
    }
};
var AccountStakingInfo_Baker = new AccountStakingInfo_Baker$Type();
var AccountStakingInfo_Delegator$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.AccountStakingInfo.Delegator', [
            { no: 1, name: 'staked_amount', kind: 'message', T: () => Amount },
            {
                no: 2,
                name: 'restake_earnings',
                kind: 'scalar',
                T: 8,
                /*ScalarType.BOOL*/
            },
            { no: 3, name: 'target', kind: 'message', T: () => DelegationTarget },
            { no: 4, name: 'pending_change', kind: 'message', T: () => StakePendingChange },
        ]);
    }
};
var AccountStakingInfo_Delegator = new AccountStakingInfo_Delegator$Type();
var SequenceNumber$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.SequenceNumber', [
            {
                no: 1,
                name: 'value',
                kind: 'scalar',
                T: 4,
                L: 0,
                /*LongType.BIGINT*/
            },
        ]);
    }
};
var SequenceNumber2 = new SequenceNumber$Type();
var UpdateSequenceNumber$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.UpdateSequenceNumber', [
            {
                no: 1,
                name: 'value',
                kind: 'scalar',
                T: 4,
                L: 0,
                /*LongType.BIGINT*/
            },
        ]);
    }
};
var UpdateSequenceNumber = new UpdateSequenceNumber$Type();
var Amount$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.Amount', [
            {
                no: 1,
                name: 'value',
                kind: 'scalar',
                T: 4,
                L: 0,
                /*LongType.BIGINT*/
            },
        ]);
    }
};
var Amount = new Amount$Type();
var CredentialIndex$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.CredentialIndex', [
            {
                no: 1,
                name: 'value',
                kind: 'scalar',
                T: 13,
                /*ScalarType.UINT32*/
            },
        ]);
    }
};
var CredentialIndex = new CredentialIndex$Type();
var SignatureThreshold$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.SignatureThreshold', [
            {
                no: 1,
                name: 'value',
                kind: 'scalar',
                T: 13,
                /*ScalarType.UINT32*/
            },
        ]);
    }
};
var SignatureThreshold = new SignatureThreshold$Type();
var AccountThreshold$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.AccountThreshold', [
            {
                no: 1,
                name: 'value',
                kind: 'scalar',
                T: 13,
                /*ScalarType.UINT32*/
            },
        ]);
    }
};
var AccountThreshold = new AccountThreshold$Type();
var EncryptionKey$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.EncryptionKey', [
            {
                no: 1,
                name: 'value',
                kind: 'scalar',
                T: 12,
                /*ScalarType.BYTES*/
            },
        ]);
    }
};
var EncryptionKey = new EncryptionKey$Type();
var AccountAddress$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.AccountAddress', [
            {
                no: 1,
                name: 'value',
                kind: 'scalar',
                T: 12,
                /*ScalarType.BYTES*/
            },
        ]);
    }
};
var AccountAddress2 = new AccountAddress$Type();
var Address$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.Address', [
            { no: 1, name: 'account', kind: 'message', oneof: 'type', T: () => AccountAddress2 },
            { no: 2, name: 'contract', kind: 'message', oneof: 'type', T: () => ContractAddress2 },
        ]);
    }
};
var Address = new Address$Type();
var AccountVerifyKey$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.AccountVerifyKey', [
            {
                no: 1,
                name: 'ed25519_key',
                kind: 'scalar',
                oneof: 'key',
                T: 12,
                /*ScalarType.BYTES*/
            },
        ]);
    }
};
var AccountVerifyKey = new AccountVerifyKey$Type();
var CredentialPublicKeys$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.CredentialPublicKeys', [
            { no: 1, name: 'keys', kind: 'map', K: 13, V: { kind: 'message', T: () => AccountVerifyKey } },
            { no: 2, name: 'threshold', kind: 'message', T: () => SignatureThreshold },
        ]);
    }
};
var CredentialPublicKeys = new CredentialPublicKeys$Type();
var CredentialRegistrationId$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.CredentialRegistrationId', [
            {
                no: 1,
                name: 'value',
                kind: 'scalar',
                T: 12,
                /*ScalarType.BYTES*/
            },
        ]);
    }
};
var CredentialRegistrationId2 = new CredentialRegistrationId$Type();
var IdentityProviderIdentity$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.IdentityProviderIdentity', [
            {
                no: 1,
                name: 'value',
                kind: 'scalar',
                T: 13,
                /*ScalarType.UINT32*/
            },
        ]);
    }
};
var IdentityProviderIdentity = new IdentityProviderIdentity$Type();
var YearMonth$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.YearMonth', [
            {
                no: 1,
                name: 'year',
                kind: 'scalar',
                T: 13,
                /*ScalarType.UINT32*/
            },
            {
                no: 2,
                name: 'month',
                kind: 'scalar',
                T: 13,
                /*ScalarType.UINT32*/
            },
        ]);
    }
};
var YearMonth = new YearMonth$Type();
var Policy$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.Policy', [
            { no: 1, name: 'created_at', kind: 'message', T: () => YearMonth },
            { no: 2, name: 'valid_to', kind: 'message', T: () => YearMonth },
            {
                no: 3,
                name: 'attributes',
                kind: 'map',
                K: 13,
                V: {
                    kind: 'scalar',
                    T: 12,
                    /*ScalarType.BYTES*/
                },
            },
        ]);
    }
};
var Policy = new Policy$Type();
var InitialCredentialValues$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.InitialCredentialValues', [
            { no: 1, name: 'keys', kind: 'message', T: () => CredentialPublicKeys },
            { no: 2, name: 'cred_id', kind: 'message', T: () => CredentialRegistrationId2 },
            { no: 3, name: 'ip_id', kind: 'message', T: () => IdentityProviderIdentity },
            { no: 4, name: 'policy', kind: 'message', T: () => Policy },
        ]);
    }
};
var InitialCredentialValues = new InitialCredentialValues$Type();
var ChainArData$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.ChainArData', [
            {
                no: 1,
                name: 'enc_id_cred_pub_share',
                kind: 'scalar',
                T: 12,
                /*ScalarType.BYTES*/
            },
        ]);
    }
};
var ChainArData = new ChainArData$Type();
var ArThreshold$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.ArThreshold', [
            {
                no: 1,
                name: 'value',
                kind: 'scalar',
                T: 13,
                /*ScalarType.UINT32*/
            },
        ]);
    }
};
var ArThreshold = new ArThreshold$Type();
var Commitment$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.Commitment', [
            {
                no: 1,
                name: 'value',
                kind: 'scalar',
                T: 12,
                /*ScalarType.BYTES*/
            },
        ]);
    }
};
var Commitment = new Commitment$Type();
var CredentialCommitments$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.CredentialCommitments', [
            { no: 1, name: 'prf', kind: 'message', T: () => Commitment },
            { no: 2, name: 'cred_counter', kind: 'message', T: () => Commitment },
            { no: 3, name: 'max_accounts', kind: 'message', T: () => Commitment },
            { no: 4, name: 'attributes', kind: 'map', K: 13, V: { kind: 'message', T: () => Commitment } },
            { no: 5, name: 'id_cred_sec_sharing_coeff', kind: 'message', repeat: 1, T: () => Commitment },
        ]);
    }
};
var CredentialCommitments = new CredentialCommitments$Type();
var NormalCredentialValues$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.NormalCredentialValues', [
            { no: 1, name: 'keys', kind: 'message', T: () => CredentialPublicKeys },
            { no: 2, name: 'cred_id', kind: 'message', T: () => CredentialRegistrationId2 },
            { no: 3, name: 'ip_id', kind: 'message', T: () => IdentityProviderIdentity },
            { no: 4, name: 'policy', kind: 'message', T: () => Policy },
            { no: 5, name: 'ar_threshold', kind: 'message', T: () => ArThreshold },
            { no: 6, name: 'ar_data', kind: 'map', K: 13, V: { kind: 'message', T: () => ChainArData } },
            { no: 7, name: 'commitments', kind: 'message', T: () => CredentialCommitments },
        ]);
    }
};
var NormalCredentialValues = new NormalCredentialValues$Type();
var AccountCredential$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.AccountCredential', [
            { no: 1, name: 'initial', kind: 'message', oneof: 'credentialValues', T: () => InitialCredentialValues },
            { no: 2, name: 'normal', kind: 'message', oneof: 'credentialValues', T: () => NormalCredentialValues },
        ]);
    }
};
var AccountCredential = new AccountCredential$Type();
var AccountInfo$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.AccountInfo', [
            { no: 1, name: 'sequence_number', kind: 'message', T: () => SequenceNumber2 },
            { no: 2, name: 'amount', kind: 'message', T: () => Amount },
            { no: 3, name: 'schedule', kind: 'message', T: () => ReleaseSchedule },
            { no: 4, name: 'creds', kind: 'map', K: 13, V: { kind: 'message', T: () => AccountCredential } },
            { no: 5, name: 'threshold', kind: 'message', T: () => AccountThreshold },
            { no: 6, name: 'encrypted_balance', kind: 'message', T: () => EncryptedBalance },
            { no: 7, name: 'encryption_key', kind: 'message', T: () => EncryptionKey },
            { no: 8, name: 'index', kind: 'message', T: () => AccountIndex },
            { no: 9, name: 'stake', kind: 'message', T: () => AccountStakingInfo },
            { no: 10, name: 'address', kind: 'message', T: () => AccountAddress2 },
        ]);
    }
};
var AccountInfo = new AccountInfo$Type();
var BlockHashInput$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.BlockHashInput', [
            { no: 1, name: 'best', kind: 'message', oneof: 'blockHashInput', T: () => Empty },
            { no: 2, name: 'last_final', kind: 'message', oneof: 'blockHashInput', T: () => Empty },
            { no: 3, name: 'given', kind: 'message', oneof: 'blockHashInput', T: () => BlockHash2 },
            { no: 4, name: 'absolute_height', kind: 'message', oneof: 'blockHashInput', T: () => AbsoluteBlockHeight },
            {
                no: 5,
                name: 'relative_height',
                kind: 'message',
                oneof: 'blockHashInput',
                T: () => BlockHashInput_RelativeHeight,
            },
        ]);
    }
};
var BlockHashInput = new BlockHashInput$Type();
var BlockHashInput_RelativeHeight$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.BlockHashInput.RelativeHeight', [
            { no: 1, name: 'genesis_index', kind: 'message', T: () => GenesisIndex },
            { no: 2, name: 'height', kind: 'message', T: () => BlockHeight },
            {
                no: 3,
                name: 'restrict',
                kind: 'scalar',
                T: 8,
                /*ScalarType.BOOL*/
            },
        ]);
    }
};
var BlockHashInput_RelativeHeight = new BlockHashInput_RelativeHeight$Type();
var EpochRequest$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.EpochRequest', [
            {
                no: 1,
                name: 'relative_epoch',
                kind: 'message',
                oneof: 'epochRequestInput',
                T: () => EpochRequest_RelativeEpoch,
            },
            { no: 2, name: 'block_hash', kind: 'message', oneof: 'epochRequestInput', T: () => BlockHashInput },
        ]);
    }
};
var EpochRequest = new EpochRequest$Type();
var EpochRequest_RelativeEpoch$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.EpochRequest.RelativeEpoch', [
            { no: 1, name: 'genesis_index', kind: 'message', T: () => GenesisIndex },
            { no: 2, name: 'epoch', kind: 'message', T: () => Epoch },
        ]);
    }
};
var EpochRequest_RelativeEpoch = new EpochRequest_RelativeEpoch$Type();
var AccountIdentifierInput$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.AccountIdentifierInput', [
            { no: 1, name: 'address', kind: 'message', oneof: 'accountIdentifierInput', T: () => AccountAddress2 },
            {
                no: 2,
                name: 'cred_id',
                kind: 'message',
                oneof: 'accountIdentifierInput',
                T: () => CredentialRegistrationId2,
            },
            { no: 3, name: 'account_index', kind: 'message', oneof: 'accountIdentifierInput', T: () => AccountIndex },
        ]);
    }
};
var AccountIdentifierInput = new AccountIdentifierInput$Type();
var AccountInfoRequest$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.AccountInfoRequest', [
            { no: 1, name: 'block_hash', kind: 'message', T: () => BlockHashInput },
            { no: 2, name: 'account_identifier', kind: 'message', T: () => AccountIdentifierInput },
        ]);
    }
};
var AccountInfoRequest = new AccountInfoRequest$Type();
var FinalizedBlockInfo$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.FinalizedBlockInfo', [
            { no: 1, name: 'hash', kind: 'message', T: () => BlockHash2 },
            { no: 2, name: 'height', kind: 'message', T: () => AbsoluteBlockHeight },
        ]);
    }
};
var FinalizedBlockInfo = new FinalizedBlockInfo$Type();
var AncestorsRequest$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.AncestorsRequest', [
            { no: 1, name: 'block_hash', kind: 'message', T: () => BlockHashInput },
            {
                no: 2,
                name: 'amount',
                kind: 'scalar',
                T: 4,
                L: 0,
                /*LongType.BIGINT*/
            },
        ]);
    }
};
var AncestorsRequest = new AncestorsRequest$Type();
var ModuleSourceRequest$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.ModuleSourceRequest', [
            { no: 1, name: 'block_hash', kind: 'message', T: () => BlockHashInput },
            { no: 2, name: 'module_ref', kind: 'message', T: () => ModuleRef },
        ]);
    }
};
var ModuleSourceRequest = new ModuleSourceRequest$Type();
var ContractAddress$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.ContractAddress', [
            {
                no: 1,
                name: 'index',
                kind: 'scalar',
                T: 4,
                L: 0,
                /*LongType.BIGINT*/
            },
            {
                no: 2,
                name: 'subindex',
                kind: 'scalar',
                T: 4,
                L: 0,
                /*LongType.BIGINT*/
            },
        ]);
    }
};
var ContractAddress2 = new ContractAddress$Type();
var InstanceInfoRequest$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.InstanceInfoRequest', [
            { no: 1, name: 'block_hash', kind: 'message', T: () => BlockHashInput },
            { no: 2, name: 'address', kind: 'message', T: () => ContractAddress2 },
        ]);
    }
};
var InstanceInfoRequest = new InstanceInfoRequest$Type();
var InstanceInfo$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.InstanceInfo', [
            { no: 1, name: 'v0', kind: 'message', oneof: 'version', T: () => InstanceInfo_V0 },
            { no: 2, name: 'v1', kind: 'message', oneof: 'version', T: () => InstanceInfo_V1 },
        ]);
    }
};
var InstanceInfo = new InstanceInfo$Type();
var InstanceInfo_V0$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.InstanceInfo.V0', [
            { no: 1, name: 'model', kind: 'message', T: () => ContractStateV0 },
            { no: 2, name: 'owner', kind: 'message', T: () => AccountAddress2 },
            { no: 3, name: 'amount', kind: 'message', T: () => Amount },
            { no: 4, name: 'methods', kind: 'message', repeat: 1, T: () => ReceiveName2 },
            { no: 5, name: 'name', kind: 'message', T: () => InitName2 },
            { no: 6, name: 'source_module', kind: 'message', T: () => ModuleRef },
        ]);
    }
};
var InstanceInfo_V0 = new InstanceInfo_V0$Type();
var InstanceInfo_V1$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.InstanceInfo.V1', [
            { no: 2, name: 'owner', kind: 'message', T: () => AccountAddress2 },
            { no: 3, name: 'amount', kind: 'message', T: () => Amount },
            { no: 4, name: 'methods', kind: 'message', repeat: 1, T: () => ReceiveName2 },
            { no: 5, name: 'name', kind: 'message', T: () => InitName2 },
            { no: 6, name: 'source_module', kind: 'message', T: () => ModuleRef },
        ]);
    }
};
var InstanceInfo_V1 = new InstanceInfo_V1$Type();
var InstanceStateKVPair$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.InstanceStateKVPair', [
            {
                no: 1,
                name: 'key',
                kind: 'scalar',
                T: 12,
                /*ScalarType.BYTES*/
            },
            {
                no: 2,
                name: 'value',
                kind: 'scalar',
                T: 12,
                /*ScalarType.BYTES*/
            },
        ]);
    }
};
var InstanceStateKVPair = new InstanceStateKVPair$Type();
var InstanceStateLookupRequest$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.InstanceStateLookupRequest', [
            { no: 1, name: 'block_hash', kind: 'message', T: () => BlockHashInput },
            { no: 2, name: 'address', kind: 'message', T: () => ContractAddress2 },
            {
                no: 3,
                name: 'key',
                kind: 'scalar',
                T: 12,
                /*ScalarType.BYTES*/
            },
        ]);
    }
};
var InstanceStateLookupRequest = new InstanceStateLookupRequest$Type();
var InstanceStateValueAtKey$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.InstanceStateValueAtKey', [
            {
                no: 1,
                name: 'value',
                kind: 'scalar',
                T: 12,
                /*ScalarType.BYTES*/
            },
        ]);
    }
};
var InstanceStateValueAtKey = new InstanceStateValueAtKey$Type();
var ReceiveName$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.ReceiveName', [
            {
                no: 1,
                name: 'value',
                kind: 'scalar',
                T: 9,
                /*ScalarType.STRING*/
            },
        ]);
    }
};
var ReceiveName2 = new ReceiveName$Type();
var InitName$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.InitName', [
            {
                no: 1,
                name: 'value',
                kind: 'scalar',
                T: 9,
                /*ScalarType.STRING*/
            },
        ]);
    }
};
var InitName2 = new InitName$Type();
var Parameter$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.Parameter', [
            {
                no: 1,
                name: 'value',
                kind: 'scalar',
                T: 12,
                /*ScalarType.BYTES*/
            },
        ]);
    }
};
var Parameter2 = new Parameter$Type();
var ContractStateV0$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.ContractStateV0', [
            {
                no: 1,
                name: 'value',
                kind: 'scalar',
                T: 12,
                /*ScalarType.BYTES*/
            },
        ]);
    }
};
var ContractStateV0 = new ContractStateV0$Type();
var BlockItemStatus$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.BlockItemStatus', [
            { no: 1, name: 'received', kind: 'message', oneof: 'status', T: () => Empty },
            { no: 2, name: 'committed', kind: 'message', oneof: 'status', T: () => BlockItemStatus_Committed },
            { no: 3, name: 'finalized', kind: 'message', oneof: 'status', T: () => BlockItemStatus_Finalized },
        ]);
    }
};
var BlockItemStatus = new BlockItemStatus$Type();
var BlockItemStatus_Committed$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.BlockItemStatus.Committed', [
            { no: 1, name: 'outcomes', kind: 'message', repeat: 1, T: () => BlockItemSummaryInBlock },
        ]);
    }
};
var BlockItemStatus_Committed = new BlockItemStatus_Committed$Type();
var BlockItemStatus_Finalized$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.BlockItemStatus.Finalized', [
            { no: 1, name: 'outcome', kind: 'message', T: () => BlockItemSummaryInBlock },
        ]);
    }
};
var BlockItemStatus_Finalized = new BlockItemStatus_Finalized$Type();
var BlockItemSummaryInBlock$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.BlockItemSummaryInBlock', [
            { no: 1, name: 'block_hash', kind: 'message', T: () => BlockHash2 },
            { no: 2, name: 'outcome', kind: 'message', T: () => BlockItemSummary },
        ]);
    }
};
var BlockItemSummaryInBlock = new BlockItemSummaryInBlock$Type();
var Energy$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.Energy', [
            {
                no: 1,
                name: 'value',
                kind: 'scalar',
                T: 4,
                L: 0,
                /*LongType.BIGINT*/
            },
        ]);
    }
};
var Energy2 = new Energy$Type();
var Slot$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.Slot', [
            {
                no: 1,
                name: 'value',
                kind: 'scalar',
                T: 4,
                L: 0,
                /*LongType.BIGINT*/
            },
        ]);
    }
};
var Slot = new Slot$Type();
var NextAccountSequenceNumber$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.NextAccountSequenceNumber', [
            { no: 1, name: 'sequence_number', kind: 'message', T: () => SequenceNumber2 },
            {
                no: 2,
                name: 'all_final',
                kind: 'scalar',
                T: 8,
                /*ScalarType.BOOL*/
            },
        ]);
    }
};
var NextAccountSequenceNumber = new NextAccountSequenceNumber$Type();
var Duration$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.Duration', [
            {
                no: 1,
                name: 'value',
                kind: 'scalar',
                T: 4,
                L: 0,
                /*LongType.BIGINT*/
            },
        ]);
    }
};
var Duration2 = new Duration$Type();
var RejectReason$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.RejectReason', [
            { no: 1, name: 'module_not_wf', kind: 'message', oneof: 'reason', T: () => Empty },
            { no: 2, name: 'module_hash_already_exists', kind: 'message', oneof: 'reason', T: () => ModuleRef },
            { no: 3, name: 'invalid_account_reference', kind: 'message', oneof: 'reason', T: () => AccountAddress2 },
            {
                no: 4,
                name: 'invalid_init_method',
                kind: 'message',
                oneof: 'reason',
                T: () => RejectReason_InvalidInitMethod,
            },
            {
                no: 5,
                name: 'invalid_receive_method',
                kind: 'message',
                oneof: 'reason',
                T: () => RejectReason_InvalidReceiveMethod,
            },
            { no: 6, name: 'invalid_module_reference', kind: 'message', oneof: 'reason', T: () => ModuleRef },
            { no: 7, name: 'invalid_contract_address', kind: 'message', oneof: 'reason', T: () => ContractAddress2 },
            { no: 8, name: 'runtime_failure', kind: 'message', oneof: 'reason', T: () => Empty },
            { no: 9, name: 'amount_too_large', kind: 'message', oneof: 'reason', T: () => RejectReason_AmountTooLarge },
            { no: 10, name: 'serialization_failure', kind: 'message', oneof: 'reason', T: () => Empty },
            { no: 11, name: 'out_of_energy', kind: 'message', oneof: 'reason', T: () => Empty },
            { no: 12, name: 'rejected_init', kind: 'message', oneof: 'reason', T: () => RejectReason_RejectedInit },
            {
                no: 13,
                name: 'rejected_receive',
                kind: 'message',
                oneof: 'reason',
                T: () => RejectReason_RejectedReceive,
            },
            { no: 14, name: 'invalid_proof', kind: 'message', oneof: 'reason', T: () => Empty },
            { no: 15, name: 'already_a_baker', kind: 'message', oneof: 'reason', T: () => BakerId },
            { no: 16, name: 'not_a_baker', kind: 'message', oneof: 'reason', T: () => AccountAddress2 },
            { no: 17, name: 'insufficient_balance_for_baker_stake', kind: 'message', oneof: 'reason', T: () => Empty },
            {
                no: 18,
                name: 'stake_under_minimum_threshold_for_baking',
                kind: 'message',
                oneof: 'reason',
                T: () => Empty,
            },
            { no: 19, name: 'baker_in_cooldown', kind: 'message', oneof: 'reason', T: () => Empty },
            {
                no: 20,
                name: 'duplicate_aggregation_key',
                kind: 'message',
                oneof: 'reason',
                T: () => BakerAggregationVerifyKey,
            },
            { no: 21, name: 'non_existent_credential_id', kind: 'message', oneof: 'reason', T: () => Empty },
            { no: 22, name: 'key_index_already_in_use', kind: 'message', oneof: 'reason', T: () => Empty },
            { no: 23, name: 'invalid_account_threshold', kind: 'message', oneof: 'reason', T: () => Empty },
            { no: 24, name: 'invalid_credential_key_sign_threshold', kind: 'message', oneof: 'reason', T: () => Empty },
            {
                no: 25,
                name: 'invalid_encrypted_amount_transfer_proof',
                kind: 'message',
                oneof: 'reason',
                T: () => Empty,
            },
            { no: 26, name: 'invalid_transfer_to_public_proof', kind: 'message', oneof: 'reason', T: () => Empty },
            {
                no: 27,
                name: 'encrypted_amount_self_transfer',
                kind: 'message',
                oneof: 'reason',
                T: () => AccountAddress2,
            },
            { no: 28, name: 'invalid_index_on_encrypted_transfer', kind: 'message', oneof: 'reason', T: () => Empty },
            { no: 29, name: 'zero_scheduledAmount', kind: 'message', oneof: 'reason', T: () => Empty },
            { no: 30, name: 'non_increasing_schedule', kind: 'message', oneof: 'reason', T: () => Empty },
            { no: 31, name: 'first_scheduled_release_expired', kind: 'message', oneof: 'reason', T: () => Empty },
            { no: 32, name: 'scheduled_self_transfer', kind: 'message', oneof: 'reason', T: () => AccountAddress2 },
            { no: 33, name: 'invalid_credentials', kind: 'message', oneof: 'reason', T: () => Empty },
            {
                no: 34,
                name: 'duplicate_cred_ids',
                kind: 'message',
                oneof: 'reason',
                T: () => RejectReason_DuplicateCredIds,
            },
            {
                no: 35,
                name: 'non_existent_cred_ids',
                kind: 'message',
                oneof: 'reason',
                T: () => RejectReason_NonExistentCredIds,
            },
            { no: 36, name: 'remove_first_credential', kind: 'message', oneof: 'reason', T: () => Empty },
            { no: 37, name: 'credential_holder_did_not_sign', kind: 'message', oneof: 'reason', T: () => Empty },
            { no: 38, name: 'not_allowed_multiple_credentials', kind: 'message', oneof: 'reason', T: () => Empty },
            { no: 39, name: 'not_allowed_to_receive_encrypted', kind: 'message', oneof: 'reason', T: () => Empty },
            { no: 40, name: 'not_allowed_to_handle_encrypted', kind: 'message', oneof: 'reason', T: () => Empty },
            { no: 41, name: 'missing_baker_add_parameters', kind: 'message', oneof: 'reason', T: () => Empty },
            {
                no: 42,
                name: 'finalization_reward_commission_not_in_range',
                kind: 'message',
                oneof: 'reason',
                T: () => Empty,
            },
            { no: 43, name: 'baking_reward_commission_not_in_range', kind: 'message', oneof: 'reason', T: () => Empty },
            {
                no: 44,
                name: 'transaction_fee_commission_not_in_range',
                kind: 'message',
                oneof: 'reason',
                T: () => Empty,
            },
            { no: 45, name: 'already_a_delegator', kind: 'message', oneof: 'reason', T: () => Empty },
            {
                no: 46,
                name: 'insufficient_balance_for_delegation_stake',
                kind: 'message',
                oneof: 'reason',
                T: () => Empty,
            },
            { no: 47, name: 'missing_delegation_add_parameters', kind: 'message', oneof: 'reason', T: () => Empty },
            { no: 48, name: 'insufficient_delegation_stake', kind: 'message', oneof: 'reason', T: () => Empty },
            { no: 49, name: 'delegator_in_cooldown', kind: 'message', oneof: 'reason', T: () => Empty },
            { no: 50, name: 'not_a_delegator', kind: 'message', oneof: 'reason', T: () => AccountAddress2 },
            { no: 51, name: 'delegation_target_not_a_baker', kind: 'message', oneof: 'reason', T: () => BakerId },
            { no: 52, name: 'stake_over_maximum_threshold_for_pool', kind: 'message', oneof: 'reason', T: () => Empty },
            { no: 53, name: 'pool_would_become_over_delegated', kind: 'message', oneof: 'reason', T: () => Empty },
            { no: 54, name: 'pool_closed', kind: 'message', oneof: 'reason', T: () => Empty },
        ]);
    }
};
var RejectReason = new RejectReason$Type();
var RejectReason_InvalidInitMethod$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.RejectReason.InvalidInitMethod', [
            { no: 1, name: 'module_ref', kind: 'message', T: () => ModuleRef },
            { no: 2, name: 'init_name', kind: 'message', T: () => InitName2 },
        ]);
    }
};
var RejectReason_InvalidInitMethod = new RejectReason_InvalidInitMethod$Type();
var RejectReason_InvalidReceiveMethod$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.RejectReason.InvalidReceiveMethod', [
            { no: 1, name: 'module_ref', kind: 'message', T: () => ModuleRef },
            { no: 2, name: 'receive_name', kind: 'message', T: () => ReceiveName2 },
        ]);
    }
};
var RejectReason_InvalidReceiveMethod = new RejectReason_InvalidReceiveMethod$Type();
var RejectReason_AmountTooLarge$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.RejectReason.AmountTooLarge', [
            { no: 1, name: 'address', kind: 'message', T: () => Address },
            { no: 2, name: 'amount', kind: 'message', T: () => Amount },
        ]);
    }
};
var RejectReason_AmountTooLarge = new RejectReason_AmountTooLarge$Type();
var RejectReason_RejectedInit$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.RejectReason.RejectedInit', [
            {
                no: 1,
                name: 'reject_reason',
                kind: 'scalar',
                T: 5,
                /*ScalarType.INT32*/
            },
        ]);
    }
};
var RejectReason_RejectedInit = new RejectReason_RejectedInit$Type();
var RejectReason_RejectedReceive$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.RejectReason.RejectedReceive', [
            {
                no: 1,
                name: 'reject_reason',
                kind: 'scalar',
                T: 5,
                /*ScalarType.INT32*/
            },
            { no: 2, name: 'contract_address', kind: 'message', T: () => ContractAddress2 },
            { no: 3, name: 'receive_name', kind: 'message', T: () => ReceiveName2 },
            { no: 4, name: 'parameter', kind: 'message', T: () => Parameter2 },
        ]);
    }
};
var RejectReason_RejectedReceive = new RejectReason_RejectedReceive$Type();
var RejectReason_DuplicateCredIds$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.RejectReason.DuplicateCredIds', [
            { no: 1, name: 'ids', kind: 'message', repeat: 1, T: () => CredentialRegistrationId2 },
        ]);
    }
};
var RejectReason_DuplicateCredIds = new RejectReason_DuplicateCredIds$Type();
var RejectReason_NonExistentCredIds$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.RejectReason.NonExistentCredIds', [
            { no: 1, name: 'ids', kind: 'message', repeat: 1, T: () => CredentialRegistrationId2 },
        ]);
    }
};
var RejectReason_NonExistentCredIds = new RejectReason_NonExistentCredIds$Type();
var ContractInitializedEvent$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.ContractInitializedEvent', [
            {
                no: 1,
                name: 'contract_version',
                kind: 'enum',
                T: () => ['concordium.v2.ContractVersion', ContractVersion2],
            },
            { no: 2, name: 'origin_ref', kind: 'message', T: () => ModuleRef },
            { no: 3, name: 'address', kind: 'message', T: () => ContractAddress2 },
            { no: 4, name: 'amount', kind: 'message', T: () => Amount },
            { no: 5, name: 'init_name', kind: 'message', T: () => InitName2 },
            { no: 6, name: 'events', kind: 'message', repeat: 1, T: () => ContractEvent2 },
        ]);
    }
};
var ContractInitializedEvent = new ContractInitializedEvent$Type();
var ContractEvent$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.ContractEvent', [
            {
                no: 1,
                name: 'value',
                kind: 'scalar',
                T: 12,
                /*ScalarType.BYTES*/
            },
        ]);
    }
};
var ContractEvent2 = new ContractEvent$Type();
var InstanceUpdatedEvent$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.InstanceUpdatedEvent', [
            {
                no: 1,
                name: 'contract_version',
                kind: 'enum',
                T: () => ['concordium.v2.ContractVersion', ContractVersion2],
            },
            { no: 2, name: 'address', kind: 'message', T: () => ContractAddress2 },
            { no: 3, name: 'instigator', kind: 'message', T: () => Address },
            { no: 4, name: 'amount', kind: 'message', T: () => Amount },
            { no: 5, name: 'parameter', kind: 'message', T: () => Parameter2 },
            { no: 6, name: 'receive_name', kind: 'message', T: () => ReceiveName2 },
            { no: 7, name: 'events', kind: 'message', repeat: 1, T: () => ContractEvent2 },
        ]);
    }
};
var InstanceUpdatedEvent = new InstanceUpdatedEvent$Type();
var ContractTraceElement$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.ContractTraceElement', [
            { no: 1, name: 'updated', kind: 'message', oneof: 'element', T: () => InstanceUpdatedEvent },
            {
                no: 2,
                name: 'transferred',
                kind: 'message',
                oneof: 'element',
                T: () => ContractTraceElement_Transferred,
            },
            {
                no: 3,
                name: 'interrupted',
                kind: 'message',
                oneof: 'element',
                T: () => ContractTraceElement_Interrupted,
            },
            { no: 4, name: 'resumed', kind: 'message', oneof: 'element', T: () => ContractTraceElement_Resumed },
            { no: 5, name: 'upgraded', kind: 'message', oneof: 'element', T: () => ContractTraceElement_Upgraded },
        ]);
    }
};
var ContractTraceElement = new ContractTraceElement$Type();
var ContractTraceElement_Transferred$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.ContractTraceElement.Transferred', [
            { no: 1, name: 'sender', kind: 'message', T: () => ContractAddress2 },
            { no: 2, name: 'amount', kind: 'message', T: () => Amount },
            { no: 3, name: 'receiver', kind: 'message', T: () => AccountAddress2 },
        ]);
    }
};
var ContractTraceElement_Transferred = new ContractTraceElement_Transferred$Type();
var ContractTraceElement_Interrupted$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.ContractTraceElement.Interrupted', [
            { no: 1, name: 'address', kind: 'message', T: () => ContractAddress2 },
            { no: 2, name: 'events', kind: 'message', repeat: 1, T: () => ContractEvent2 },
        ]);
    }
};
var ContractTraceElement_Interrupted = new ContractTraceElement_Interrupted$Type();
var ContractTraceElement_Resumed$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.ContractTraceElement.Resumed', [
            { no: 1, name: 'address', kind: 'message', T: () => ContractAddress2 },
            {
                no: 2,
                name: 'success',
                kind: 'scalar',
                T: 8,
                /*ScalarType.BOOL*/
            },
        ]);
    }
};
var ContractTraceElement_Resumed = new ContractTraceElement_Resumed$Type();
var ContractTraceElement_Upgraded$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.ContractTraceElement.Upgraded', [
            { no: 1, name: 'address', kind: 'message', T: () => ContractAddress2 },
            { no: 2, name: 'from', kind: 'message', T: () => ModuleRef },
            { no: 3, name: 'to', kind: 'message', T: () => ModuleRef },
        ]);
    }
};
var ContractTraceElement_Upgraded = new ContractTraceElement_Upgraded$Type();
var BakerKeysEvent$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.BakerKeysEvent', [
            { no: 1, name: 'baker_id', kind: 'message', T: () => BakerId },
            { no: 2, name: 'account', kind: 'message', T: () => AccountAddress2 },
            { no: 3, name: 'sign_key', kind: 'message', T: () => BakerSignatureVerifyKey },
            { no: 4, name: 'election_key', kind: 'message', T: () => BakerElectionVerifyKey },
            { no: 5, name: 'aggregation_key', kind: 'message', T: () => BakerAggregationVerifyKey },
        ]);
    }
};
var BakerKeysEvent = new BakerKeysEvent$Type();
var Memo$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.Memo', [
            {
                no: 1,
                name: 'value',
                kind: 'scalar',
                T: 12,
                /*ScalarType.BYTES*/
            },
        ]);
    }
};
var Memo = new Memo$Type();
var BakerStakeUpdatedData$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.BakerStakeUpdatedData', [
            { no: 1, name: 'baker_id', kind: 'message', T: () => BakerId },
            { no: 2, name: 'new_stake', kind: 'message', T: () => Amount },
            {
                no: 3,
                name: 'increased',
                kind: 'scalar',
                T: 8,
                /*ScalarType.BOOL*/
            },
        ]);
    }
};
var BakerStakeUpdatedData = new BakerStakeUpdatedData$Type();
var EncryptedAmountRemovedEvent$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.EncryptedAmountRemovedEvent', [
            { no: 1, name: 'account', kind: 'message', T: () => AccountAddress2 },
            { no: 2, name: 'new_amount', kind: 'message', T: () => EncryptedAmount },
            { no: 3, name: 'input_amount', kind: 'message', T: () => EncryptedAmount },
            {
                no: 4,
                name: 'up_to_index',
                kind: 'scalar',
                T: 4,
                L: 0,
                /*LongType.BIGINT*/
            },
        ]);
    }
};
var EncryptedAmountRemovedEvent = new EncryptedAmountRemovedEvent$Type();
var NewEncryptedAmountEvent$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.NewEncryptedAmountEvent', [
            { no: 1, name: 'receiver', kind: 'message', T: () => AccountAddress2 },
            {
                no: 2,
                name: 'new_index',
                kind: 'scalar',
                T: 4,
                L: 0,
                /*LongType.BIGINT*/
            },
            { no: 3, name: 'encrypted_amount', kind: 'message', T: () => EncryptedAmount },
        ]);
    }
};
var NewEncryptedAmountEvent = new NewEncryptedAmountEvent$Type();
var EncryptedSelfAmountAddedEvent$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.EncryptedSelfAmountAddedEvent', [
            { no: 1, name: 'account', kind: 'message', T: () => AccountAddress2 },
            { no: 2, name: 'new_amount', kind: 'message', T: () => EncryptedAmount },
            { no: 3, name: 'amount', kind: 'message', T: () => Amount },
        ]);
    }
};
var EncryptedSelfAmountAddedEvent = new EncryptedSelfAmountAddedEvent$Type();
var RegisteredData$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.RegisteredData', [
            {
                no: 1,
                name: 'value',
                kind: 'scalar',
                T: 12,
                /*ScalarType.BYTES*/
            },
        ]);
    }
};
var RegisteredData = new RegisteredData$Type();
var BakerEvent$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.BakerEvent', [
            { no: 1, name: 'baker_added', kind: 'message', oneof: 'event', T: () => BakerEvent_BakerAdded },
            { no: 2, name: 'baker_removed', kind: 'message', oneof: 'event', T: () => BakerId },
            {
                no: 3,
                name: 'baker_stake_increased',
                kind: 'message',
                oneof: 'event',
                T: () => BakerEvent_BakerStakeIncreased,
            },
            {
                no: 4,
                name: 'baker_stake_decreased',
                kind: 'message',
                oneof: 'event',
                T: () => BakerEvent_BakerStakeDecreased,
            },
            {
                no: 5,
                name: 'baker_restake_earnings_updated',
                kind: 'message',
                oneof: 'event',
                T: () => BakerEvent_BakerRestakeEarningsUpdated,
            },
            { no: 6, name: 'baker_keys_updated', kind: 'message', oneof: 'event', T: () => BakerKeysEvent },
            {
                no: 7,
                name: 'baker_set_open_status',
                kind: 'message',
                oneof: 'event',
                T: () => BakerEvent_BakerSetOpenStatus,
            },
            {
                no: 8,
                name: 'baker_set_metadata_url',
                kind: 'message',
                oneof: 'event',
                T: () => BakerEvent_BakerSetMetadataUrl,
            },
            {
                no: 9,
                name: 'baker_set_transaction_fee_commission',
                kind: 'message',
                oneof: 'event',
                T: () => BakerEvent_BakerSetTransactionFeeCommission,
            },
            {
                no: 10,
                name: 'baker_set_baking_reward_commission',
                kind: 'message',
                oneof: 'event',
                T: () => BakerEvent_BakerSetBakingRewardCommission,
            },
            {
                no: 11,
                name: 'baker_set_finalization_reward_commission',
                kind: 'message',
                oneof: 'event',
                T: () => BakerEvent_BakerSetFinalizationRewardCommission,
            },
        ]);
    }
};
var BakerEvent = new BakerEvent$Type();
var BakerEvent_BakerAdded$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.BakerEvent.BakerAdded', [
            { no: 1, name: 'keys_event', kind: 'message', T: () => BakerKeysEvent },
            { no: 2, name: 'stake', kind: 'message', T: () => Amount },
            {
                no: 3,
                name: 'restake_earnings',
                kind: 'scalar',
                T: 8,
                /*ScalarType.BOOL*/
            },
        ]);
    }
};
var BakerEvent_BakerAdded = new BakerEvent_BakerAdded$Type();
var BakerEvent_BakerStakeIncreased$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.BakerEvent.BakerStakeIncreased', [
            { no: 1, name: 'baker_id', kind: 'message', T: () => BakerId },
            { no: 2, name: 'new_stake', kind: 'message', T: () => Amount },
        ]);
    }
};
var BakerEvent_BakerStakeIncreased = new BakerEvent_BakerStakeIncreased$Type();
var BakerEvent_BakerStakeDecreased$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.BakerEvent.BakerStakeDecreased', [
            { no: 1, name: 'baker_id', kind: 'message', T: () => BakerId },
            { no: 2, name: 'new_stake', kind: 'message', T: () => Amount },
        ]);
    }
};
var BakerEvent_BakerStakeDecreased = new BakerEvent_BakerStakeDecreased$Type();
var BakerEvent_BakerRestakeEarningsUpdated$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.BakerEvent.BakerRestakeEarningsUpdated', [
            { no: 1, name: 'baker_id', kind: 'message', T: () => BakerId },
            {
                no: 2,
                name: 'restake_earnings',
                kind: 'scalar',
                T: 8,
                /*ScalarType.BOOL*/
            },
        ]);
    }
};
var BakerEvent_BakerRestakeEarningsUpdated = new BakerEvent_BakerRestakeEarningsUpdated$Type();
var BakerEvent_BakerSetOpenStatus$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.BakerEvent.BakerSetOpenStatus', [
            { no: 1, name: 'baker_id', kind: 'message', T: () => BakerId },
            {
                no: 2,
                name: 'open_status',
                kind: 'enum',
                T: () => ['concordium.v2.OpenStatus', OpenStatus2, 'OPEN_STATUS_'],
            },
        ]);
    }
};
var BakerEvent_BakerSetOpenStatus = new BakerEvent_BakerSetOpenStatus$Type();
var BakerEvent_BakerSetMetadataUrl$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.BakerEvent.BakerSetMetadataUrl', [
            { no: 1, name: 'baker_id', kind: 'message', T: () => BakerId },
            {
                no: 2,
                name: 'url',
                kind: 'scalar',
                T: 9,
                /*ScalarType.STRING*/
            },
        ]);
    }
};
var BakerEvent_BakerSetMetadataUrl = new BakerEvent_BakerSetMetadataUrl$Type();
var BakerEvent_BakerSetTransactionFeeCommission$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.BakerEvent.BakerSetTransactionFeeCommission', [
            { no: 1, name: 'baker_id', kind: 'message', T: () => BakerId },
            { no: 2, name: 'transaction_fee_commission', kind: 'message', T: () => AmountFraction },
        ]);
    }
};
var BakerEvent_BakerSetTransactionFeeCommission = new BakerEvent_BakerSetTransactionFeeCommission$Type();
var BakerEvent_BakerSetBakingRewardCommission$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.BakerEvent.BakerSetBakingRewardCommission', [
            { no: 1, name: 'baker_id', kind: 'message', T: () => BakerId },
            { no: 2, name: 'baking_reward_commission', kind: 'message', T: () => AmountFraction },
        ]);
    }
};
var BakerEvent_BakerSetBakingRewardCommission = new BakerEvent_BakerSetBakingRewardCommission$Type();
var BakerEvent_BakerSetFinalizationRewardCommission$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.BakerEvent.BakerSetFinalizationRewardCommission', [
            { no: 1, name: 'baker_id', kind: 'message', T: () => BakerId },
            { no: 2, name: 'finalization_reward_commission', kind: 'message', T: () => AmountFraction },
        ]);
    }
};
var BakerEvent_BakerSetFinalizationRewardCommission = new BakerEvent_BakerSetFinalizationRewardCommission$Type();
var DelegatorId$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.DelegatorId', [{ no: 1, name: 'id', kind: 'message', T: () => AccountIndex }]);
    }
};
var DelegatorId = new DelegatorId$Type();
var DelegationEvent$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.DelegationEvent', [
            {
                no: 1,
                name: 'delegation_stake_increased',
                kind: 'message',
                oneof: 'event',
                T: () => DelegationEvent_DelegationStakeIncreased,
            },
            {
                no: 2,
                name: 'delegation_stake_decreased',
                kind: 'message',
                oneof: 'event',
                T: () => DelegationEvent_DelegationStakeDecreased,
            },
            {
                no: 3,
                name: 'delegation_set_restake_earnings',
                kind: 'message',
                oneof: 'event',
                T: () => DelegationEvent_DelegationSetRestakeEarnings,
            },
            {
                no: 4,
                name: 'delegation_set_delegation_target',
                kind: 'message',
                oneof: 'event',
                T: () => DelegationEvent_DelegationSetDelegationTarget,
            },
            { no: 5, name: 'delegation_added', kind: 'message', oneof: 'event', T: () => DelegatorId },
            { no: 6, name: 'delegation_removed', kind: 'message', oneof: 'event', T: () => DelegatorId },
        ]);
    }
};
var DelegationEvent = new DelegationEvent$Type();
var DelegationEvent_DelegationStakeIncreased$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.DelegationEvent.DelegationStakeIncreased', [
            { no: 1, name: 'delegator_id', kind: 'message', T: () => DelegatorId },
            { no: 2, name: 'new_stake', kind: 'message', T: () => Amount },
        ]);
    }
};
var DelegationEvent_DelegationStakeIncreased = new DelegationEvent_DelegationStakeIncreased$Type();
var DelegationEvent_DelegationStakeDecreased$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.DelegationEvent.DelegationStakeDecreased', [
            { no: 1, name: 'delegator_id', kind: 'message', T: () => DelegatorId },
            { no: 2, name: 'new_stake', kind: 'message', T: () => Amount },
        ]);
    }
};
var DelegationEvent_DelegationStakeDecreased = new DelegationEvent_DelegationStakeDecreased$Type();
var DelegationEvent_DelegationSetRestakeEarnings$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.DelegationEvent.DelegationSetRestakeEarnings', [
            { no: 1, name: 'delegator_id', kind: 'message', T: () => DelegatorId },
            {
                no: 2,
                name: 'restake_earnings',
                kind: 'scalar',
                T: 8,
                /*ScalarType.BOOL*/
            },
        ]);
    }
};
var DelegationEvent_DelegationSetRestakeEarnings = new DelegationEvent_DelegationSetRestakeEarnings$Type();
var DelegationEvent_DelegationSetDelegationTarget$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.DelegationEvent.DelegationSetDelegationTarget', [
            { no: 1, name: 'delegator_id', kind: 'message', T: () => DelegatorId },
            { no: 2, name: 'delegation_target', kind: 'message', T: () => DelegationTarget },
        ]);
    }
};
var DelegationEvent_DelegationSetDelegationTarget = new DelegationEvent_DelegationSetDelegationTarget$Type();
var AccountTransactionEffects$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.AccountTransactionEffects', [
            { no: 1, name: 'none', kind: 'message', oneof: 'effect', T: () => AccountTransactionEffects_None },
            { no: 2, name: 'module_deployed', kind: 'message', oneof: 'effect', T: () => ModuleRef },
            {
                no: 3,
                name: 'contract_initialized',
                kind: 'message',
                oneof: 'effect',
                T: () => ContractInitializedEvent,
            },
            {
                no: 4,
                name: 'contract_update_issued',
                kind: 'message',
                oneof: 'effect',
                T: () => AccountTransactionEffects_ContractUpdateIssued,
            },
            {
                no: 5,
                name: 'account_transfer',
                kind: 'message',
                oneof: 'effect',
                T: () => AccountTransactionEffects_AccountTransfer,
            },
            { no: 6, name: 'baker_added', kind: 'message', oneof: 'effect', T: () => BakerEvent_BakerAdded },
            { no: 7, name: 'baker_removed', kind: 'message', oneof: 'effect', T: () => BakerId },
            {
                no: 8,
                name: 'baker_stake_updated',
                kind: 'message',
                oneof: 'effect',
                T: () => AccountTransactionEffects_BakerStakeUpdated,
            },
            {
                no: 9,
                name: 'baker_restake_earnings_updated',
                kind: 'message',
                oneof: 'effect',
                T: () => BakerEvent_BakerRestakeEarningsUpdated,
            },
            { no: 10, name: 'baker_keys_updated', kind: 'message', oneof: 'effect', T: () => BakerKeysEvent },
            {
                no: 11,
                name: 'encrypted_amount_transferred',
                kind: 'message',
                oneof: 'effect',
                T: () => AccountTransactionEffects_EncryptedAmountTransferred,
            },
            {
                no: 12,
                name: 'transferred_to_encrypted',
                kind: 'message',
                oneof: 'effect',
                T: () => EncryptedSelfAmountAddedEvent,
            },
            {
                no: 13,
                name: 'transferred_to_public',
                kind: 'message',
                oneof: 'effect',
                T: () => AccountTransactionEffects_TransferredToPublic,
            },
            {
                no: 14,
                name: 'transferred_with_schedule',
                kind: 'message',
                oneof: 'effect',
                T: () => AccountTransactionEffects_TransferredWithSchedule,
            },
            {
                no: 15,
                name: 'credential_keys_updated',
                kind: 'message',
                oneof: 'effect',
                T: () => CredentialRegistrationId2,
            },
            {
                no: 16,
                name: 'credentials_updated',
                kind: 'message',
                oneof: 'effect',
                T: () => AccountTransactionEffects_CredentialsUpdated,
            },
            { no: 17, name: 'data_registered', kind: 'message', oneof: 'effect', T: () => RegisteredData },
            {
                no: 18,
                name: 'baker_configured',
                kind: 'message',
                oneof: 'effect',
                T: () => AccountTransactionEffects_BakerConfigured,
            },
            {
                no: 19,
                name: 'delegation_configured',
                kind: 'message',
                oneof: 'effect',
                T: () => AccountTransactionEffects_DelegationConfigured,
            },
        ]);
    }
};
var AccountTransactionEffects = new AccountTransactionEffects$Type();
var AccountTransactionEffects_None$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.AccountTransactionEffects.None', [
            {
                no: 1,
                name: 'transaction_type',
                kind: 'enum',
                opt: true,
                T: () => ['concordium.v2.TransactionType', TransactionType],
            },
            { no: 2, name: 'reject_reason', kind: 'message', T: () => RejectReason },
        ]);
    }
};
var AccountTransactionEffects_None = new AccountTransactionEffects_None$Type();
var AccountTransactionEffects_ContractUpdateIssued$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.AccountTransactionEffects.ContractUpdateIssued', [
            { no: 1, name: 'effects', kind: 'message', repeat: 1, T: () => ContractTraceElement },
        ]);
    }
};
var AccountTransactionEffects_ContractUpdateIssued = new AccountTransactionEffects_ContractUpdateIssued$Type();
var AccountTransactionEffects_AccountTransfer$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.AccountTransactionEffects.AccountTransfer', [
            { no: 1, name: 'amount', kind: 'message', T: () => Amount },
            { no: 2, name: 'receiver', kind: 'message', T: () => AccountAddress2 },
            { no: 3, name: 'memo', kind: 'message', T: () => Memo },
        ]);
    }
};
var AccountTransactionEffects_AccountTransfer = new AccountTransactionEffects_AccountTransfer$Type();
var AccountTransactionEffects_BakerStakeUpdated$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.AccountTransactionEffects.BakerStakeUpdated', [
            { no: 1, name: 'update', kind: 'message', T: () => BakerStakeUpdatedData },
        ]);
    }
};
var AccountTransactionEffects_BakerStakeUpdated = new AccountTransactionEffects_BakerStakeUpdated$Type();
var AccountTransactionEffects_EncryptedAmountTransferred$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.AccountTransactionEffects.EncryptedAmountTransferred', [
            { no: 1, name: 'removed', kind: 'message', T: () => EncryptedAmountRemovedEvent },
            { no: 2, name: 'added', kind: 'message', T: () => NewEncryptedAmountEvent },
            { no: 3, name: 'memo', kind: 'message', T: () => Memo },
        ]);
    }
};
var AccountTransactionEffects_EncryptedAmountTransferred =
    new AccountTransactionEffects_EncryptedAmountTransferred$Type();
var AccountTransactionEffects_TransferredToPublic$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.AccountTransactionEffects.TransferredToPublic', [
            { no: 1, name: 'removed', kind: 'message', T: () => EncryptedAmountRemovedEvent },
            { no: 2, name: 'amount', kind: 'message', T: () => Amount },
        ]);
    }
};
var AccountTransactionEffects_TransferredToPublic = new AccountTransactionEffects_TransferredToPublic$Type();
var AccountTransactionEffects_TransferredWithSchedule$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.AccountTransactionEffects.TransferredWithSchedule', [
            { no: 1, name: 'receiver', kind: 'message', T: () => AccountAddress2 },
            { no: 2, name: 'amount', kind: 'message', repeat: 1, T: () => NewRelease },
            { no: 3, name: 'memo', kind: 'message', T: () => Memo },
        ]);
    }
};
var AccountTransactionEffects_TransferredWithSchedule = new AccountTransactionEffects_TransferredWithSchedule$Type();
var AccountTransactionEffects_CredentialsUpdated$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.AccountTransactionEffects.CredentialsUpdated', [
            { no: 1, name: 'new_cred_ids', kind: 'message', repeat: 1, T: () => CredentialRegistrationId2 },
            { no: 2, name: 'removed_cred_ids', kind: 'message', repeat: 1, T: () => CredentialRegistrationId2 },
            { no: 3, name: 'new_threshold', kind: 'message', T: () => AccountThreshold },
        ]);
    }
};
var AccountTransactionEffects_CredentialsUpdated = new AccountTransactionEffects_CredentialsUpdated$Type();
var AccountTransactionEffects_BakerConfigured$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.AccountTransactionEffects.BakerConfigured', [
            { no: 1, name: 'events', kind: 'message', repeat: 1, T: () => BakerEvent },
        ]);
    }
};
var AccountTransactionEffects_BakerConfigured = new AccountTransactionEffects_BakerConfigured$Type();
var AccountTransactionEffects_DelegationConfigured$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.AccountTransactionEffects.DelegationConfigured', [
            { no: 1, name: 'events', kind: 'message', repeat: 1, T: () => DelegationEvent },
        ]);
    }
};
var AccountTransactionEffects_DelegationConfigured = new AccountTransactionEffects_DelegationConfigured$Type();
var ElectionDifficulty$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.ElectionDifficulty', [{ no: 1, name: 'value', kind: 'message', T: () => AmountFraction }]);
    }
};
var ElectionDifficulty = new ElectionDifficulty$Type();
var TimeoutParameters$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.TimeoutParameters', [
            { no: 1, name: 'timeout_base', kind: 'message', T: () => Duration2 },
            { no: 2, name: 'timeout_increase', kind: 'message', T: () => Ratio },
            { no: 3, name: 'timeout_decrease', kind: 'message', T: () => Ratio },
        ]);
    }
};
var TimeoutParameters = new TimeoutParameters$Type();
var FinalizationCommitteeParameters$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.FinalizationCommitteeParameters', [
            {
                no: 1,
                name: 'minimum_finalizers',
                kind: 'scalar',
                T: 13,
                /*ScalarType.UINT32*/
            },
            {
                no: 2,
                name: 'maximum_finalizers',
                kind: 'scalar',
                T: 13,
                /*ScalarType.UINT32*/
            },
            { no: 3, name: 'finalizer_relative_stake_threshold', kind: 'message', T: () => AmountFraction },
        ]);
    }
};
var FinalizationCommitteeParameters = new FinalizationCommitteeParameters$Type();
var ConsensusParametersV1$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.ConsensusParametersV1', [
            { no: 1, name: 'timeout_parameters', kind: 'message', T: () => TimeoutParameters },
            { no: 2, name: 'min_block_time', kind: 'message', T: () => Duration2 },
            { no: 3, name: 'block_energy_limit', kind: 'message', T: () => Energy2 },
        ]);
    }
};
var ConsensusParametersV1 = new ConsensusParametersV1$Type();
var ExchangeRate$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.ExchangeRate', [{ no: 1, name: 'value', kind: 'message', T: () => Ratio }]);
    }
};
var ExchangeRate = new ExchangeRate$Type();
var Ratio$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.Ratio', [
            {
                no: 1,
                name: 'numerator',
                kind: 'scalar',
                T: 4,
                L: 0,
                /*LongType.BIGINT*/
            },
            {
                no: 2,
                name: 'denominator',
                kind: 'scalar',
                T: 4,
                L: 0,
                /*LongType.BIGINT*/
            },
        ]);
    }
};
var Ratio = new Ratio$Type();
var UpdatePublicKey$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.UpdatePublicKey', [
            {
                no: 1,
                name: 'value',
                kind: 'scalar',
                T: 12,
                /*ScalarType.BYTES*/
            },
        ]);
    }
};
var UpdatePublicKey = new UpdatePublicKey$Type();
var UpdateKeysThreshold$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.UpdateKeysThreshold', [
            {
                no: 1,
                name: 'value',
                kind: 'scalar',
                T: 13,
                /*ScalarType.UINT32*/
            },
        ]);
    }
};
var UpdateKeysThreshold = new UpdateKeysThreshold$Type();
var UpdateKeysIndex$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.UpdateKeysIndex', [
            {
                no: 1,
                name: 'value',
                kind: 'scalar',
                T: 13,
                /*ScalarType.UINT32*/
            },
        ]);
    }
};
var UpdateKeysIndex = new UpdateKeysIndex$Type();
var HigherLevelKeys$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.HigherLevelKeys', [
            { no: 1, name: 'keys', kind: 'message', repeat: 1, T: () => UpdatePublicKey },
            { no: 2, name: 'threshold', kind: 'message', T: () => UpdateKeysThreshold },
        ]);
    }
};
var HigherLevelKeys = new HigherLevelKeys$Type();
var AccessStructure$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.AccessStructure', [
            { no: 1, name: 'access_public_keys', kind: 'message', repeat: 1, T: () => UpdateKeysIndex },
            { no: 2, name: 'access_threshold', kind: 'message', T: () => UpdateKeysThreshold },
        ]);
    }
};
var AccessStructure = new AccessStructure$Type();
var AuthorizationsV0$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.AuthorizationsV0', [
            { no: 1, name: 'keys', kind: 'message', repeat: 1, T: () => UpdatePublicKey },
            { no: 2, name: 'emergency', kind: 'message', T: () => AccessStructure },
            { no: 3, name: 'protocol', kind: 'message', T: () => AccessStructure },
            { no: 4, name: 'parameter_consensus', kind: 'message', T: () => AccessStructure },
            { no: 5, name: 'parameter_euro_per_energy', kind: 'message', T: () => AccessStructure },
            { no: 6, name: 'parameter_micro_CCD_per_euro', kind: 'message', T: () => AccessStructure },
            { no: 7, name: 'parameter_foundation_account', kind: 'message', T: () => AccessStructure },
            { no: 8, name: 'parameter_mint_distribution', kind: 'message', T: () => AccessStructure },
            { no: 9, name: 'parameter_transaction_fee_distribution', kind: 'message', T: () => AccessStructure },
            { no: 10, name: 'parameter_gas_rewards', kind: 'message', T: () => AccessStructure },
            { no: 11, name: 'pool_parameters', kind: 'message', T: () => AccessStructure },
            { no: 12, name: 'add_anonymity_revoker', kind: 'message', T: () => AccessStructure },
            { no: 13, name: 'add_identity_provider', kind: 'message', T: () => AccessStructure },
        ]);
    }
};
var AuthorizationsV0 = new AuthorizationsV0$Type();
var AuthorizationsV1$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.AuthorizationsV1', [
            { no: 1, name: 'v0', kind: 'message', T: () => AuthorizationsV0 },
            { no: 2, name: 'parameter_cooldown', kind: 'message', T: () => AccessStructure },
            { no: 3, name: 'parameter_time', kind: 'message', T: () => AccessStructure },
        ]);
    }
};
var AuthorizationsV1 = new AuthorizationsV1$Type();
var Description$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.Description', [
            {
                no: 1,
                name: 'name',
                kind: 'scalar',
                T: 9,
                /*ScalarType.STRING*/
            },
            {
                no: 2,
                name: 'url',
                kind: 'scalar',
                T: 9,
                /*ScalarType.STRING*/
            },
            {
                no: 3,
                name: 'description',
                kind: 'scalar',
                T: 9,
                /*ScalarType.STRING*/
            },
        ]);
    }
};
var Description = new Description$Type();
var ArInfo$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.ArInfo', [
            { no: 1, name: 'identity', kind: 'message', T: () => ArInfo_ArIdentity },
            { no: 2, name: 'description', kind: 'message', T: () => Description },
            { no: 3, name: 'public_key', kind: 'message', T: () => ArInfo_ArPublicKey },
        ]);
    }
};
var ArInfo = new ArInfo$Type();
var ArInfo_ArIdentity$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.ArInfo.ArIdentity', [
            {
                no: 1,
                name: 'value',
                kind: 'scalar',
                T: 13,
                /*ScalarType.UINT32*/
            },
        ]);
    }
};
var ArInfo_ArIdentity = new ArInfo_ArIdentity$Type();
var ArInfo_ArPublicKey$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.ArInfo.ArPublicKey', [
            {
                no: 1,
                name: 'value',
                kind: 'scalar',
                T: 12,
                /*ScalarType.BYTES*/
            },
        ]);
    }
};
var ArInfo_ArPublicKey = new ArInfo_ArPublicKey$Type();
var IpIdentity$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.IpIdentity', [
            {
                no: 1,
                name: 'value',
                kind: 'scalar',
                T: 13,
                /*ScalarType.UINT32*/
            },
        ]);
    }
};
var IpIdentity = new IpIdentity$Type();
var IpInfo$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.IpInfo', [
            { no: 1, name: 'identity', kind: 'message', T: () => IpIdentity },
            { no: 2, name: 'description', kind: 'message', T: () => Description },
            { no: 3, name: 'verify_key', kind: 'message', T: () => IpInfo_IpVerifyKey },
            { no: 4, name: 'cdi_verify_key', kind: 'message', T: () => IpInfo_IpCdiVerifyKey },
        ]);
    }
};
var IpInfo = new IpInfo$Type();
var IpInfo_IpVerifyKey$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.IpInfo.IpVerifyKey', [
            {
                no: 1,
                name: 'value',
                kind: 'scalar',
                T: 12,
                /*ScalarType.BYTES*/
            },
        ]);
    }
};
var IpInfo_IpVerifyKey = new IpInfo_IpVerifyKey$Type();
var IpInfo_IpCdiVerifyKey$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.IpInfo.IpCdiVerifyKey', [
            {
                no: 1,
                name: 'value',
                kind: 'scalar',
                T: 12,
                /*ScalarType.BYTES*/
            },
        ]);
    }
};
var IpInfo_IpCdiVerifyKey = new IpInfo_IpCdiVerifyKey$Type();
var DurationSeconds$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.DurationSeconds', [
            {
                no: 1,
                name: 'value',
                kind: 'scalar',
                T: 4,
                L: 0,
                /*LongType.BIGINT*/
            },
        ]);
    }
};
var DurationSeconds = new DurationSeconds$Type();
var InclusiveRangeAmountFraction$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.InclusiveRangeAmountFraction', [
            { no: 1, name: 'min', kind: 'message', T: () => AmountFraction },
            { no: 2, name: 'max_', kind: 'message', T: () => AmountFraction },
        ]);
    }
};
var InclusiveRangeAmountFraction = new InclusiveRangeAmountFraction$Type();
var CommissionRanges$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.CommissionRanges', [
            { no: 1, name: 'finalization', kind: 'message', T: () => InclusiveRangeAmountFraction },
            { no: 2, name: 'baking', kind: 'message', T: () => InclusiveRangeAmountFraction },
            { no: 3, name: 'transaction', kind: 'message', T: () => InclusiveRangeAmountFraction },
        ]);
    }
};
var CommissionRanges = new CommissionRanges$Type();
var CapitalBound$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.CapitalBound', [{ no: 1, name: 'value', kind: 'message', T: () => AmountFraction }]);
    }
};
var CapitalBound = new CapitalBound$Type();
var LeverageFactor$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.LeverageFactor', [{ no: 1, name: 'value', kind: 'message', T: () => Ratio }]);
    }
};
var LeverageFactor = new LeverageFactor$Type();
var Epoch$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.Epoch', [
            {
                no: 1,
                name: 'value',
                kind: 'scalar',
                T: 4,
                L: 0,
                /*LongType.BIGINT*/
            },
        ]);
    }
};
var Epoch = new Epoch$Type();
var Round$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.Round', [
            {
                no: 1,
                name: 'value',
                kind: 'scalar',
                T: 4,
                L: 0,
                /*LongType.BIGINT*/
            },
        ]);
    }
};
var Round = new Round$Type();
var RewardPeriodLength$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.RewardPeriodLength', [{ no: 1, name: 'value', kind: 'message', T: () => Epoch }]);
    }
};
var RewardPeriodLength = new RewardPeriodLength$Type();
var MintRate$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.MintRate', [
            {
                no: 1,
                name: 'mantissa',
                kind: 'scalar',
                T: 13,
                /*ScalarType.UINT32*/
            },
            {
                no: 2,
                name: 'exponent',
                kind: 'scalar',
                T: 13,
                /*ScalarType.UINT32*/
            },
        ]);
    }
};
var MintRate = new MintRate$Type();
var CooldownParametersCpv1$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.CooldownParametersCpv1', [
            { no: 1, name: 'pool_owner_cooldown', kind: 'message', T: () => DurationSeconds },
            { no: 2, name: 'delegator_cooldown', kind: 'message', T: () => DurationSeconds },
        ]);
    }
};
var CooldownParametersCpv1 = new CooldownParametersCpv1$Type();
var PoolParametersCpv1$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.PoolParametersCpv1', [
            { no: 1, name: 'passive_finalization_commission', kind: 'message', T: () => AmountFraction },
            { no: 2, name: 'passive_baking_commission', kind: 'message', T: () => AmountFraction },
            { no: 3, name: 'passive_transaction_commission', kind: 'message', T: () => AmountFraction },
            { no: 4, name: 'commission_bounds', kind: 'message', T: () => CommissionRanges },
            { no: 5, name: 'minimum_equity_capital', kind: 'message', T: () => Amount },
            { no: 6, name: 'capital_bound', kind: 'message', T: () => CapitalBound },
            { no: 7, name: 'leverage_bound', kind: 'message', T: () => LeverageFactor },
        ]);
    }
};
var PoolParametersCpv1 = new PoolParametersCpv1$Type();
var TimeParametersCpv1$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.TimeParametersCpv1', [
            { no: 1, name: 'reward_period_length', kind: 'message', T: () => RewardPeriodLength },
            { no: 2, name: 'mint_per_payday', kind: 'message', T: () => MintRate },
        ]);
    }
};
var TimeParametersCpv1 = new TimeParametersCpv1$Type();
var MintDistributionCpv1$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.MintDistributionCpv1', [
            { no: 1, name: 'baking_reward', kind: 'message', T: () => AmountFraction },
            { no: 2, name: 'finalization_reward', kind: 'message', T: () => AmountFraction },
        ]);
    }
};
var MintDistributionCpv1 = new MintDistributionCpv1$Type();
var ProtocolUpdate$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.ProtocolUpdate', [
            {
                no: 1,
                name: 'message_',
                kind: 'scalar',
                T: 9,
                /*ScalarType.STRING*/
            },
            {
                no: 2,
                name: 'specification_url',
                kind: 'scalar',
                T: 9,
                /*ScalarType.STRING*/
            },
            { no: 3, name: 'specificationHash', kind: 'message', T: () => Sha256Hash },
            {
                no: 4,
                name: 'specification_auxiliary_data',
                kind: 'scalar',
                T: 12,
                /*ScalarType.BYTES*/
            },
        ]);
    }
};
var ProtocolUpdate = new ProtocolUpdate$Type();
var MintDistributionCpv0$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.MintDistributionCpv0', [
            { no: 1, name: 'mint_per_slot', kind: 'message', T: () => MintRate },
            { no: 2, name: 'baking_reward', kind: 'message', T: () => AmountFraction },
            { no: 3, name: 'finalization_reward', kind: 'message', T: () => AmountFraction },
        ]);
    }
};
var MintDistributionCpv0 = new MintDistributionCpv0$Type();
var TransactionFeeDistribution$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.TransactionFeeDistribution', [
            { no: 1, name: 'baker', kind: 'message', T: () => AmountFraction },
            { no: 2, name: 'gas_account', kind: 'message', T: () => AmountFraction },
        ]);
    }
};
var TransactionFeeDistribution = new TransactionFeeDistribution$Type();
var GasRewards$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.GasRewards', [
            { no: 1, name: 'baker', kind: 'message', T: () => AmountFraction },
            { no: 2, name: 'finalization_proof', kind: 'message', T: () => AmountFraction },
            { no: 3, name: 'account_creation', kind: 'message', T: () => AmountFraction },
            { no: 4, name: 'chain_update', kind: 'message', T: () => AmountFraction },
        ]);
    }
};
var GasRewards = new GasRewards$Type();
var GasRewardsCpv2$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.GasRewardsCpv2', [
            { no: 1, name: 'baker', kind: 'message', T: () => AmountFraction },
            { no: 3, name: 'account_creation', kind: 'message', T: () => AmountFraction },
            { no: 4, name: 'chain_update', kind: 'message', T: () => AmountFraction },
        ]);
    }
};
var GasRewardsCpv2 = new GasRewardsCpv2$Type();
var BakerStakeThreshold$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.BakerStakeThreshold', [
            { no: 1, name: 'baker_stake_threshold', kind: 'message', T: () => Amount },
        ]);
    }
};
var BakerStakeThreshold = new BakerStakeThreshold$Type();
var RootUpdate$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.RootUpdate', [
            { no: 1, name: 'root_keys_update', kind: 'message', oneof: 'updateType', T: () => HigherLevelKeys },
            { no: 2, name: 'level_1_keys_update', kind: 'message', oneof: 'updateType', T: () => HigherLevelKeys },
            { no: 3, name: 'level_2_keys_update_v0', kind: 'message', oneof: 'updateType', T: () => AuthorizationsV0 },
            { no: 4, name: 'level_2_keys_update_v1', kind: 'message', oneof: 'updateType', T: () => AuthorizationsV1 },
        ]);
    }
};
var RootUpdate = new RootUpdate$Type();
var Level1Update$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.Level1Update', [
            { no: 1, name: 'level_1_keys_update', kind: 'message', oneof: 'updateType', T: () => HigherLevelKeys },
            { no: 2, name: 'level_2_keys_update_v0', kind: 'message', oneof: 'updateType', T: () => AuthorizationsV0 },
            { no: 3, name: 'level_2_keys_update_v1', kind: 'message', oneof: 'updateType', T: () => AuthorizationsV1 },
        ]);
    }
};
var Level1Update = new Level1Update$Type();
var UpdatePayload$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.UpdatePayload', [
            { no: 1, name: 'protocol_update', kind: 'message', oneof: 'payload', T: () => ProtocolUpdate },
            {
                no: 2,
                name: 'election_difficulty_update',
                kind: 'message',
                oneof: 'payload',
                T: () => ElectionDifficulty,
            },
            { no: 3, name: 'euro_per_energy_update', kind: 'message', oneof: 'payload', T: () => ExchangeRate },
            { no: 4, name: 'micro_ccd_per_euro_update', kind: 'message', oneof: 'payload', T: () => ExchangeRate },
            { no: 5, name: 'foundation_account_update', kind: 'message', oneof: 'payload', T: () => AccountAddress2 },
            {
                no: 6,
                name: 'mint_distribution_update',
                kind: 'message',
                oneof: 'payload',
                T: () => MintDistributionCpv0,
            },
            {
                no: 7,
                name: 'transaction_fee_distribution_update',
                kind: 'message',
                oneof: 'payload',
                T: () => TransactionFeeDistribution,
            },
            { no: 8, name: 'gas_rewards_update', kind: 'message', oneof: 'payload', T: () => GasRewards },
            {
                no: 9,
                name: 'baker_stake_threshold_update',
                kind: 'message',
                oneof: 'payload',
                T: () => BakerStakeThreshold,
            },
            { no: 10, name: 'root_update', kind: 'message', oneof: 'payload', T: () => RootUpdate },
            { no: 11, name: 'level_1_update', kind: 'message', oneof: 'payload', T: () => Level1Update },
            { no: 12, name: 'add_anonymity_revoker_update', kind: 'message', oneof: 'payload', T: () => ArInfo },
            { no: 13, name: 'add_identity_provider_update', kind: 'message', oneof: 'payload', T: () => IpInfo },
            {
                no: 14,
                name: 'cooldown_parameters_cpv_1_update',
                kind: 'message',
                oneof: 'payload',
                T: () => CooldownParametersCpv1,
            },
            {
                no: 15,
                name: 'pool_parameters_cpv_1_update',
                kind: 'message',
                oneof: 'payload',
                T: () => PoolParametersCpv1,
            },
            {
                no: 16,
                name: 'time_parameters_cpv_1_update',
                kind: 'message',
                oneof: 'payload',
                T: () => TimeParametersCpv1,
            },
            {
                no: 17,
                name: 'mint_distribution_cpv_1_update',
                kind: 'message',
                oneof: 'payload',
                T: () => MintDistributionCpv1,
            },
            { no: 18, name: 'gas_rewards_cpv_2_update', kind: 'message', oneof: 'payload', T: () => GasRewardsCpv2 },
            {
                no: 19,
                name: 'timeout_parameters_update',
                kind: 'message',
                oneof: 'payload',
                T: () => TimeoutParameters,
            },
            { no: 20, name: 'min_block_time_update', kind: 'message', oneof: 'payload', T: () => Duration2 },
            { no: 21, name: 'block_energy_limit_update', kind: 'message', oneof: 'payload', T: () => Energy2 },
            {
                no: 22,
                name: 'finalization_committee_parameters_update',
                kind: 'message',
                oneof: 'payload',
                T: () => FinalizationCommitteeParameters,
            },
        ]);
    }
};
var UpdatePayload = new UpdatePayload$Type();
var AccountTransactionDetails$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.AccountTransactionDetails', [
            { no: 1, name: 'cost', kind: 'message', T: () => Amount },
            { no: 2, name: 'sender', kind: 'message', T: () => AccountAddress2 },
            { no: 3, name: 'effects', kind: 'message', T: () => AccountTransactionEffects },
        ]);
    }
};
var AccountTransactionDetails = new AccountTransactionDetails$Type();
var AccountCreationDetails$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.AccountCreationDetails', [
            {
                no: 1,
                name: 'credential_type',
                kind: 'enum',
                T: () => ['concordium.v2.CredentialType', CredentialType, 'CREDENTIAL_TYPE_'],
            },
            { no: 2, name: 'address', kind: 'message', T: () => AccountAddress2 },
            { no: 3, name: 'reg_id', kind: 'message', T: () => CredentialRegistrationId2 },
        ]);
    }
};
var AccountCreationDetails = new AccountCreationDetails$Type();
var TransactionTime$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.TransactionTime', [
            {
                no: 1,
                name: 'value',
                kind: 'scalar',
                T: 4,
                L: 0,
                /*LongType.BIGINT*/
            },
        ]);
    }
};
var TransactionTime = new TransactionTime$Type();
var UpdateDetails$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.UpdateDetails', [
            { no: 1, name: 'effective_time', kind: 'message', T: () => TransactionTime },
            { no: 2, name: 'payload', kind: 'message', T: () => UpdatePayload },
        ]);
    }
};
var UpdateDetails = new UpdateDetails$Type();
var BlockItemSummary$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.BlockItemSummary', [
            { no: 1, name: 'index', kind: 'message', T: () => BlockItemSummary_TransactionIndex },
            { no: 2, name: 'energy_cost', kind: 'message', T: () => Energy2 },
            { no: 3, name: 'hash', kind: 'message', T: () => TransactionHash2 },
            {
                no: 4,
                name: 'account_transaction',
                kind: 'message',
                oneof: 'details',
                T: () => AccountTransactionDetails,
            },
            { no: 5, name: 'account_creation', kind: 'message', oneof: 'details', T: () => AccountCreationDetails },
            { no: 6, name: 'update', kind: 'message', oneof: 'details', T: () => UpdateDetails },
        ]);
    }
};
var BlockItemSummary = new BlockItemSummary$Type();
var BlockItemSummary_TransactionIndex$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.BlockItemSummary.TransactionIndex', [
            {
                no: 1,
                name: 'value',
                kind: 'scalar',
                T: 4,
                L: 0,
                /*LongType.BIGINT*/
            },
        ]);
    }
};
var BlockItemSummary_TransactionIndex = new BlockItemSummary_TransactionIndex$Type();
var GenesisIndex$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.GenesisIndex', [
            {
                no: 1,
                name: 'value',
                kind: 'scalar',
                T: 13,
                /*ScalarType.UINT32*/
            },
        ]);
    }
};
var GenesisIndex = new GenesisIndex$Type();
var ConsensusInfo$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.ConsensusInfo', [
            { no: 1, name: 'best_block', kind: 'message', T: () => BlockHash2 },
            { no: 2, name: 'genesis_block', kind: 'message', T: () => BlockHash2 },
            { no: 3, name: 'genesis_time', kind: 'message', T: () => Timestamp2 },
            { no: 4, name: 'slot_duration', kind: 'message', T: () => Duration2 },
            { no: 5, name: 'epoch_duration', kind: 'message', T: () => Duration2 },
            { no: 6, name: 'last_finalized_block', kind: 'message', T: () => BlockHash2 },
            { no: 7, name: 'best_block_height', kind: 'message', T: () => AbsoluteBlockHeight },
            { no: 8, name: 'last_finalized_block_height', kind: 'message', T: () => AbsoluteBlockHeight },
            {
                no: 9,
                name: 'blocks_received_count',
                kind: 'scalar',
                T: 13,
                /*ScalarType.UINT32*/
            },
            { no: 10, name: 'block_last_received_time', kind: 'message', T: () => Timestamp2 },
            {
                no: 11,
                name: 'block_receive_latency_ema',
                kind: 'scalar',
                T: 1,
                /*ScalarType.DOUBLE*/
            },
            {
                no: 12,
                name: 'block_receive_latency_emsd',
                kind: 'scalar',
                T: 1,
                /*ScalarType.DOUBLE*/
            },
            {
                no: 13,
                name: 'block_receive_period_ema',
                kind: 'scalar',
                opt: true,
                T: 1,
                /*ScalarType.DOUBLE*/
            },
            {
                no: 14,
                name: 'block_receive_period_emsd',
                kind: 'scalar',
                opt: true,
                T: 1,
                /*ScalarType.DOUBLE*/
            },
            {
                no: 15,
                name: 'blocks_verified_count',
                kind: 'scalar',
                T: 13,
                /*ScalarType.UINT32*/
            },
            { no: 16, name: 'block_last_arrived_time', kind: 'message', T: () => Timestamp2 },
            {
                no: 17,
                name: 'block_arrive_latency_ema',
                kind: 'scalar',
                T: 1,
                /*ScalarType.DOUBLE*/
            },
            {
                no: 18,
                name: 'block_arrive_latency_emsd',
                kind: 'scalar',
                T: 1,
                /*ScalarType.DOUBLE*/
            },
            {
                no: 19,
                name: 'block_arrive_period_ema',
                kind: 'scalar',
                opt: true,
                T: 1,
                /*ScalarType.DOUBLE*/
            },
            {
                no: 20,
                name: 'block_arrive_period_emsd',
                kind: 'scalar',
                opt: true,
                T: 1,
                /*ScalarType.DOUBLE*/
            },
            {
                no: 21,
                name: 'transactions_per_block_ema',
                kind: 'scalar',
                T: 1,
                /*ScalarType.DOUBLE*/
            },
            {
                no: 22,
                name: 'transactions_per_block_emsd',
                kind: 'scalar',
                T: 1,
                /*ScalarType.DOUBLE*/
            },
            {
                no: 23,
                name: 'finalization_count',
                kind: 'scalar',
                T: 13,
                /*ScalarType.UINT32*/
            },
            { no: 24, name: 'last_finalized_time', kind: 'message', T: () => Timestamp2 },
            {
                no: 25,
                name: 'finalization_period_ema',
                kind: 'scalar',
                opt: true,
                T: 1,
                /*ScalarType.DOUBLE*/
            },
            {
                no: 26,
                name: 'finalization_period_emsd',
                kind: 'scalar',
                opt: true,
                T: 1,
                /*ScalarType.DOUBLE*/
            },
            {
                no: 27,
                name: 'protocol_version',
                kind: 'enum',
                T: () => ['concordium.v2.ProtocolVersion', ProtocolVersion],
            },
            { no: 28, name: 'genesis_index', kind: 'message', T: () => GenesisIndex },
            { no: 29, name: 'current_era_genesis_block', kind: 'message', T: () => BlockHash2 },
            { no: 30, name: 'current_era_genesis_time', kind: 'message', T: () => Timestamp2 },
            { no: 31, name: 'current_timeout_duration', kind: 'message', T: () => Duration2 },
            { no: 32, name: 'current_round', kind: 'message', T: () => Round },
            { no: 33, name: 'current_epoch', kind: 'message', T: () => Epoch },
            { no: 34, name: 'trigger_block_time', kind: 'message', T: () => Timestamp2 },
        ]);
    }
};
var ConsensusInfo = new ConsensusInfo$Type();
var ArrivedBlockInfo$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.ArrivedBlockInfo', [
            { no: 1, name: 'hash', kind: 'message', T: () => BlockHash2 },
            { no: 2, name: 'height', kind: 'message', T: () => AbsoluteBlockHeight },
        ]);
    }
};
var ArrivedBlockInfo = new ArrivedBlockInfo$Type();
var CryptographicParameters$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.CryptographicParameters', [
            {
                no: 1,
                name: 'genesis_string',
                kind: 'scalar',
                T: 9,
                /*ScalarType.STRING*/
            },
            {
                no: 2,
                name: 'bulletproof_generators',
                kind: 'scalar',
                T: 12,
                /*ScalarType.BYTES*/
            },
            {
                no: 3,
                name: 'on_chain_commitment_key',
                kind: 'scalar',
                T: 12,
                /*ScalarType.BYTES*/
            },
        ]);
    }
};
var CryptographicParameters = new CryptographicParameters$Type();
var BlockInfo$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.BlockInfo', [
            { no: 1, name: 'hash', kind: 'message', T: () => BlockHash2 },
            { no: 2, name: 'height', kind: 'message', T: () => AbsoluteBlockHeight },
            { no: 3, name: 'parent_block', kind: 'message', T: () => BlockHash2 },
            { no: 4, name: 'last_finalized_block', kind: 'message', T: () => BlockHash2 },
            { no: 5, name: 'genesis_index', kind: 'message', T: () => GenesisIndex },
            { no: 6, name: 'era_block_height', kind: 'message', T: () => BlockHeight },
            { no: 7, name: 'receive_time', kind: 'message', T: () => Timestamp2 },
            { no: 8, name: 'arrive_time', kind: 'message', T: () => Timestamp2 },
            { no: 9, name: 'slot_number', kind: 'message', T: () => Slot },
            { no: 10, name: 'slot_time', kind: 'message', T: () => Timestamp2 },
            { no: 11, name: 'baker', kind: 'message', T: () => BakerId },
            {
                no: 12,
                name: 'finalized',
                kind: 'scalar',
                T: 8,
                /*ScalarType.BOOL*/
            },
            {
                no: 13,
                name: 'transaction_count',
                kind: 'scalar',
                T: 13,
                /*ScalarType.UINT32*/
            },
            { no: 14, name: 'transactions_energy_cost', kind: 'message', T: () => Energy2 },
            {
                no: 15,
                name: 'transactions_size',
                kind: 'scalar',
                T: 13,
                /*ScalarType.UINT32*/
            },
            { no: 16, name: 'state_hash', kind: 'message', T: () => StateHash },
            {
                no: 17,
                name: 'protocol_version',
                kind: 'enum',
                T: () => ['concordium.v2.ProtocolVersion', ProtocolVersion],
            },
            { no: 18, name: 'round', kind: 'message', T: () => Round },
            { no: 19, name: 'epoch', kind: 'message', T: () => Epoch },
        ]);
    }
};
var BlockInfo = new BlockInfo$Type();
var PoolInfoRequest$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.PoolInfoRequest', [
            { no: 1, name: 'block_hash', kind: 'message', T: () => BlockHashInput },
            { no: 2, name: 'baker', kind: 'message', T: () => BakerId },
        ]);
    }
};
var PoolInfoRequest = new PoolInfoRequest$Type();
var PoolPendingChange$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.PoolPendingChange', [
            { no: 1, name: 'reduce', kind: 'message', oneof: 'change', T: () => PoolPendingChange_Reduce },
            { no: 2, name: 'remove', kind: 'message', oneof: 'change', T: () => PoolPendingChange_Remove },
        ]);
    }
};
var PoolPendingChange = new PoolPendingChange$Type();
var PoolPendingChange_Reduce$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.PoolPendingChange.Reduce', [
            { no: 1, name: 'reduced_equity_capital', kind: 'message', T: () => Amount },
            { no: 2, name: 'effective_time', kind: 'message', T: () => Timestamp2 },
        ]);
    }
};
var PoolPendingChange_Reduce = new PoolPendingChange_Reduce$Type();
var PoolPendingChange_Remove$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.PoolPendingChange.Remove', [
            { no: 1, name: 'effective_time', kind: 'message', T: () => Timestamp2 },
        ]);
    }
};
var PoolPendingChange_Remove = new PoolPendingChange_Remove$Type();
var PoolCurrentPaydayInfo$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.PoolCurrentPaydayInfo', [
            {
                no: 1,
                name: 'blocks_baked',
                kind: 'scalar',
                T: 4,
                L: 0,
                /*LongType.BIGINT*/
            },
            {
                no: 2,
                name: 'finalization_live',
                kind: 'scalar',
                T: 8,
                /*ScalarType.BOOL*/
            },
            { no: 3, name: 'transaction_fees_earned', kind: 'message', T: () => Amount },
            { no: 4, name: 'effective_stake', kind: 'message', T: () => Amount },
            {
                no: 5,
                name: 'lottery_power',
                kind: 'scalar',
                T: 1,
                /*ScalarType.DOUBLE*/
            },
            { no: 6, name: 'baker_equity_capital', kind: 'message', T: () => Amount },
            { no: 7, name: 'delegated_capital', kind: 'message', T: () => Amount },
            { no: 8, name: 'commission_rates', kind: 'message', T: () => CommissionRates },
        ]);
    }
};
var PoolCurrentPaydayInfo = new PoolCurrentPaydayInfo$Type();
var PoolInfoResponse$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.PoolInfoResponse', [
            { no: 1, name: 'baker', kind: 'message', T: () => BakerId },
            { no: 2, name: 'address', kind: 'message', T: () => AccountAddress2 },
            { no: 3, name: 'equity_capital', kind: 'message', T: () => Amount },
            { no: 4, name: 'delegated_capital', kind: 'message', T: () => Amount },
            { no: 5, name: 'delegated_capital_cap', kind: 'message', T: () => Amount },
            { no: 6, name: 'pool_info', kind: 'message', T: () => BakerPoolInfo },
            { no: 7, name: 'equity_pending_change', kind: 'message', T: () => PoolPendingChange },
            { no: 8, name: 'current_payday_info', kind: 'message', T: () => PoolCurrentPaydayInfo },
            { no: 9, name: 'all_pool_total_capital', kind: 'message', T: () => Amount },
        ]);
    }
};
var PoolInfoResponse = new PoolInfoResponse$Type();
var PassiveDelegationInfo$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.PassiveDelegationInfo', [
            { no: 1, name: 'delegated_capital', kind: 'message', T: () => Amount },
            { no: 2, name: 'commission_rates', kind: 'message', T: () => CommissionRates },
            { no: 3, name: 'current_payday_transaction_fees_earned', kind: 'message', T: () => Amount },
            { no: 4, name: 'current_payday_delegated_capital', kind: 'message', T: () => Amount },
            { no: 5, name: 'all_pool_total_capital', kind: 'message', T: () => Amount },
        ]);
    }
};
var PassiveDelegationInfo = new PassiveDelegationInfo$Type();
var BlocksAtHeightRequest$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.BlocksAtHeightRequest', [
            {
                no: 1,
                name: 'absolute',
                kind: 'message',
                oneof: 'blocksAtHeight',
                T: () => BlocksAtHeightRequest_Absolute,
            },
            {
                no: 2,
                name: 'relative',
                kind: 'message',
                oneof: 'blocksAtHeight',
                T: () => BlocksAtHeightRequest_Relative,
            },
        ]);
    }
};
var BlocksAtHeightRequest = new BlocksAtHeightRequest$Type();
var BlocksAtHeightRequest_Absolute$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.BlocksAtHeightRequest.Absolute', [
            { no: 1, name: 'height', kind: 'message', T: () => AbsoluteBlockHeight },
        ]);
    }
};
var BlocksAtHeightRequest_Absolute = new BlocksAtHeightRequest_Absolute$Type();
var BlocksAtHeightRequest_Relative$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.BlocksAtHeightRequest.Relative', [
            { no: 1, name: 'genesis_index', kind: 'message', T: () => GenesisIndex },
            { no: 2, name: 'height', kind: 'message', T: () => BlockHeight },
            {
                no: 3,
                name: 'restrict',
                kind: 'scalar',
                T: 8,
                /*ScalarType.BOOL*/
            },
        ]);
    }
};
var BlocksAtHeightRequest_Relative = new BlocksAtHeightRequest_Relative$Type();
var BlocksAtHeightResponse$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.BlocksAtHeightResponse', [
            { no: 1, name: 'blocks', kind: 'message', repeat: 1, T: () => BlockHash2 },
        ]);
    }
};
var BlocksAtHeightResponse = new BlocksAtHeightResponse$Type();
var TokenomicsInfo$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.TokenomicsInfo', [
            { no: 1, name: 'v0', kind: 'message', oneof: 'tokenomics', T: () => TokenomicsInfo_V0 },
            { no: 2, name: 'v1', kind: 'message', oneof: 'tokenomics', T: () => TokenomicsInfo_V1 },
        ]);
    }
};
var TokenomicsInfo = new TokenomicsInfo$Type();
var TokenomicsInfo_V0$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.TokenomicsInfo.V0', [
            { no: 1, name: 'total_amount', kind: 'message', T: () => Amount },
            { no: 2, name: 'total_encrypted_amount', kind: 'message', T: () => Amount },
            { no: 3, name: 'baking_reward_account', kind: 'message', T: () => Amount },
            { no: 4, name: 'finalization_reward_account', kind: 'message', T: () => Amount },
            { no: 5, name: 'gas_account', kind: 'message', T: () => Amount },
            {
                no: 6,
                name: 'protocol_version',
                kind: 'enum',
                T: () => ['concordium.v2.ProtocolVersion', ProtocolVersion],
            },
        ]);
    }
};
var TokenomicsInfo_V0 = new TokenomicsInfo_V0$Type();
var TokenomicsInfo_V1$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.TokenomicsInfo.V1', [
            { no: 1, name: 'total_amount', kind: 'message', T: () => Amount },
            { no: 2, name: 'total_encrypted_amount', kind: 'message', T: () => Amount },
            { no: 3, name: 'baking_reward_account', kind: 'message', T: () => Amount },
            { no: 4, name: 'finalization_reward_account', kind: 'message', T: () => Amount },
            { no: 5, name: 'gas_account', kind: 'message', T: () => Amount },
            { no: 6, name: 'foundation_transaction_rewards', kind: 'message', T: () => Amount },
            { no: 7, name: 'next_payday_time', kind: 'message', T: () => Timestamp2 },
            { no: 8, name: 'next_payday_mint_rate', kind: 'message', T: () => MintRate },
            { no: 9, name: 'total_staked_capital', kind: 'message', T: () => Amount },
            {
                no: 10,
                name: 'protocol_version',
                kind: 'enum',
                T: () => ['concordium.v2.ProtocolVersion', ProtocolVersion],
            },
        ]);
    }
};
var TokenomicsInfo_V1 = new TokenomicsInfo_V1$Type();
var InvokeInstanceRequest$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.InvokeInstanceRequest', [
            { no: 1, name: 'block_hash', kind: 'message', T: () => BlockHashInput },
            { no: 2, name: 'invoker', kind: 'message', T: () => Address },
            { no: 3, name: 'instance', kind: 'message', T: () => ContractAddress2 },
            { no: 4, name: 'amount', kind: 'message', T: () => Amount },
            { no: 5, name: 'entrypoint', kind: 'message', T: () => ReceiveName2 },
            { no: 6, name: 'parameter', kind: 'message', T: () => Parameter2 },
            { no: 7, name: 'energy', kind: 'message', T: () => Energy2 },
        ]);
    }
};
var InvokeInstanceRequest = new InvokeInstanceRequest$Type();
var InvokeInstanceResponse$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.InvokeInstanceResponse', [
            { no: 1, name: 'success', kind: 'message', oneof: 'result', T: () => InvokeInstanceResponse_Success },
            { no: 2, name: 'failure', kind: 'message', oneof: 'result', T: () => InvokeInstanceResponse_Failure },
        ]);
    }
};
var InvokeInstanceResponse = new InvokeInstanceResponse$Type();
var InvokeInstanceResponse_Failure$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.InvokeInstanceResponse.Failure', [
            {
                no: 1,
                name: 'return_value',
                kind: 'scalar',
                opt: true,
                T: 12,
                /*ScalarType.BYTES*/
            },
            { no: 2, name: 'used_energy', kind: 'message', T: () => Energy2 },
            { no: 3, name: 'reason', kind: 'message', T: () => RejectReason },
        ]);
    }
};
var InvokeInstanceResponse_Failure = new InvokeInstanceResponse_Failure$Type();
var InvokeInstanceResponse_Success$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.InvokeInstanceResponse.Success', [
            {
                no: 1,
                name: 'return_value',
                kind: 'scalar',
                opt: true,
                T: 12,
                /*ScalarType.BYTES*/
            },
            { no: 2, name: 'used_energy', kind: 'message', T: () => Energy2 },
            { no: 3, name: 'effects', kind: 'message', repeat: 1, T: () => ContractTraceElement },
        ]);
    }
};
var InvokeInstanceResponse_Success = new InvokeInstanceResponse_Success$Type();
var GetPoolDelegatorsRequest$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.GetPoolDelegatorsRequest', [
            { no: 1, name: 'block_hash', kind: 'message', T: () => BlockHashInput },
            { no: 2, name: 'baker', kind: 'message', T: () => BakerId },
        ]);
    }
};
var GetPoolDelegatorsRequest = new GetPoolDelegatorsRequest$Type();
var DelegatorInfo$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.DelegatorInfo', [
            { no: 1, name: 'account', kind: 'message', T: () => AccountAddress2 },
            { no: 2, name: 'stake', kind: 'message', T: () => Amount },
            { no: 3, name: 'pending_change', kind: 'message', T: () => StakePendingChange },
        ]);
    }
};
var DelegatorInfo = new DelegatorInfo$Type();
var DelegatorRewardPeriodInfo$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.DelegatorRewardPeriodInfo', [
            { no: 1, name: 'account', kind: 'message', T: () => AccountAddress2 },
            { no: 2, name: 'stake', kind: 'message', T: () => Amount },
        ]);
    }
};
var DelegatorRewardPeriodInfo = new DelegatorRewardPeriodInfo$Type();
var Branch$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.Branch', [
            { no: 1, name: 'block_hash', kind: 'message', T: () => BlockHash2 },
            { no: 2, name: 'children', kind: 'message', repeat: 1, T: () => Branch },
        ]);
    }
};
var Branch = new Branch$Type();
var LeadershipElectionNonce$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.LeadershipElectionNonce', [
            {
                no: 1,
                name: 'value',
                kind: 'scalar',
                T: 12,
                /*ScalarType.BYTES*/
            },
        ]);
    }
};
var LeadershipElectionNonce = new LeadershipElectionNonce$Type();
var ElectionInfo$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.ElectionInfo', [
            { no: 1, name: 'election_difficulty', kind: 'message', T: () => ElectionDifficulty },
            { no: 2, name: 'election_nonce', kind: 'message', T: () => LeadershipElectionNonce },
            { no: 3, name: 'baker_election_info', kind: 'message', repeat: 1, T: () => ElectionInfo_Baker },
        ]);
    }
};
var ElectionInfo = new ElectionInfo$Type();
var ElectionInfo_Baker$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.ElectionInfo.Baker', [
            { no: 1, name: 'baker', kind: 'message', T: () => BakerId },
            { no: 2, name: 'account', kind: 'message', T: () => AccountAddress2 },
            {
                no: 3,
                name: 'lottery_power',
                kind: 'scalar',
                T: 1,
                /*ScalarType.DOUBLE*/
            },
        ]);
    }
};
var ElectionInfo_Baker = new ElectionInfo_Baker$Type();
var BlockSpecialEvent$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.BlockSpecialEvent', [
            {
                no: 1,
                name: 'baking_rewards',
                kind: 'message',
                oneof: 'event',
                T: () => BlockSpecialEvent_BakingRewards,
            },
            { no: 2, name: 'mint', kind: 'message', oneof: 'event', T: () => BlockSpecialEvent_Mint },
            {
                no: 3,
                name: 'finalization_rewards',
                kind: 'message',
                oneof: 'event',
                T: () => BlockSpecialEvent_FinalizationRewards,
            },
            { no: 4, name: 'block_reward', kind: 'message', oneof: 'event', T: () => BlockSpecialEvent_BlockReward },
            {
                no: 5,
                name: 'payday_foundation_reward',
                kind: 'message',
                oneof: 'event',
                T: () => BlockSpecialEvent_PaydayFoundationReward,
            },
            {
                no: 6,
                name: 'payday_account_reward',
                kind: 'message',
                oneof: 'event',
                T: () => BlockSpecialEvent_PaydayAccountReward,
            },
            {
                no: 7,
                name: 'block_accrue_reward',
                kind: 'message',
                oneof: 'event',
                T: () => BlockSpecialEvent_BlockAccrueReward,
            },
            {
                no: 8,
                name: 'payday_pool_reward',
                kind: 'message',
                oneof: 'event',
                T: () => BlockSpecialEvent_PaydayPoolReward,
            },
        ]);
    }
};
var BlockSpecialEvent = new BlockSpecialEvent$Type();
var BlockSpecialEvent_AccountAmounts$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.BlockSpecialEvent.AccountAmounts', [
            { no: 1, name: 'entries', kind: 'message', repeat: 1, T: () => BlockSpecialEvent_AccountAmounts_Entry },
        ]);
    }
};
var BlockSpecialEvent_AccountAmounts = new BlockSpecialEvent_AccountAmounts$Type();
var BlockSpecialEvent_AccountAmounts_Entry$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.BlockSpecialEvent.AccountAmounts.Entry', [
            { no: 1, name: 'account', kind: 'message', T: () => AccountAddress2 },
            { no: 2, name: 'amount', kind: 'message', T: () => Amount },
        ]);
    }
};
var BlockSpecialEvent_AccountAmounts_Entry = new BlockSpecialEvent_AccountAmounts_Entry$Type();
var BlockSpecialEvent_BakingRewards$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.BlockSpecialEvent.BakingRewards', [
            { no: 1, name: 'baker_rewards', kind: 'message', T: () => BlockSpecialEvent_AccountAmounts },
            { no: 2, name: 'remainder', kind: 'message', T: () => Amount },
        ]);
    }
};
var BlockSpecialEvent_BakingRewards = new BlockSpecialEvent_BakingRewards$Type();
var BlockSpecialEvent_Mint$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.BlockSpecialEvent.Mint', [
            { no: 1, name: 'mint_baking_reward', kind: 'message', T: () => Amount },
            { no: 2, name: 'mint_finalization_reward', kind: 'message', T: () => Amount },
            { no: 3, name: 'mint_platform_development_charge', kind: 'message', T: () => Amount },
            { no: 4, name: 'foundation_account', kind: 'message', T: () => AccountAddress2 },
        ]);
    }
};
var BlockSpecialEvent_Mint = new BlockSpecialEvent_Mint$Type();
var BlockSpecialEvent_FinalizationRewards$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.BlockSpecialEvent.FinalizationRewards', [
            { no: 1, name: 'finalization_rewards', kind: 'message', T: () => BlockSpecialEvent_AccountAmounts },
            { no: 2, name: 'remainder', kind: 'message', T: () => Amount },
        ]);
    }
};
var BlockSpecialEvent_FinalizationRewards = new BlockSpecialEvent_FinalizationRewards$Type();
var BlockSpecialEvent_BlockReward$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.BlockSpecialEvent.BlockReward', [
            { no: 1, name: 'transaction_fees', kind: 'message', T: () => Amount },
            { no: 2, name: 'old_gas_account', kind: 'message', T: () => Amount },
            { no: 3, name: 'new_gas_account', kind: 'message', T: () => Amount },
            { no: 4, name: 'baker_reward', kind: 'message', T: () => Amount },
            { no: 5, name: 'foundation_charge', kind: 'message', T: () => Amount },
            { no: 6, name: 'baker', kind: 'message', T: () => AccountAddress2 },
            { no: 7, name: 'foundation_account', kind: 'message', T: () => AccountAddress2 },
        ]);
    }
};
var BlockSpecialEvent_BlockReward = new BlockSpecialEvent_BlockReward$Type();
var BlockSpecialEvent_PaydayFoundationReward$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.BlockSpecialEvent.PaydayFoundationReward', [
            { no: 1, name: 'foundation_account', kind: 'message', T: () => AccountAddress2 },
            { no: 2, name: 'development_charge', kind: 'message', T: () => Amount },
        ]);
    }
};
var BlockSpecialEvent_PaydayFoundationReward = new BlockSpecialEvent_PaydayFoundationReward$Type();
var BlockSpecialEvent_PaydayAccountReward$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.BlockSpecialEvent.PaydayAccountReward', [
            { no: 1, name: 'account', kind: 'message', T: () => AccountAddress2 },
            { no: 2, name: 'transaction_fees', kind: 'message', T: () => Amount },
            { no: 3, name: 'baker_reward', kind: 'message', T: () => Amount },
            { no: 4, name: 'finalization_reward', kind: 'message', T: () => Amount },
        ]);
    }
};
var BlockSpecialEvent_PaydayAccountReward = new BlockSpecialEvent_PaydayAccountReward$Type();
var BlockSpecialEvent_BlockAccrueReward$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.BlockSpecialEvent.BlockAccrueReward', [
            { no: 1, name: 'transaction_fees', kind: 'message', T: () => Amount },
            { no: 2, name: 'old_gas_account', kind: 'message', T: () => Amount },
            { no: 3, name: 'new_gas_account', kind: 'message', T: () => Amount },
            { no: 4, name: 'baker_reward', kind: 'message', T: () => Amount },
            { no: 5, name: 'passive_reward', kind: 'message', T: () => Amount },
            { no: 6, name: 'foundation_charge', kind: 'message', T: () => Amount },
            { no: 7, name: 'baker', kind: 'message', T: () => BakerId },
        ]);
    }
};
var BlockSpecialEvent_BlockAccrueReward = new BlockSpecialEvent_BlockAccrueReward$Type();
var BlockSpecialEvent_PaydayPoolReward$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.BlockSpecialEvent.PaydayPoolReward', [
            { no: 1, name: 'pool_owner', kind: 'message', T: () => BakerId },
            { no: 2, name: 'transaction_fees', kind: 'message', T: () => Amount },
            { no: 3, name: 'baker_reward', kind: 'message', T: () => Amount },
            { no: 4, name: 'finalization_reward', kind: 'message', T: () => Amount },
        ]);
    }
};
var BlockSpecialEvent_PaydayPoolReward = new BlockSpecialEvent_PaydayPoolReward$Type();
var PendingUpdate$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.PendingUpdate', [
            { no: 1, name: 'effective_time', kind: 'message', T: () => TransactionTime },
            { no: 2, name: 'root_keys', kind: 'message', oneof: 'effect', T: () => HigherLevelKeys },
            { no: 3, name: 'level1_keys', kind: 'message', oneof: 'effect', T: () => HigherLevelKeys },
            { no: 4, name: 'level2_keys_cpv_0', kind: 'message', oneof: 'effect', T: () => AuthorizationsV0 },
            { no: 5, name: 'level2_keys_cpv_1', kind: 'message', oneof: 'effect', T: () => AuthorizationsV1 },
            { no: 6, name: 'protocol', kind: 'message', oneof: 'effect', T: () => ProtocolUpdate },
            { no: 7, name: 'election_difficulty', kind: 'message', oneof: 'effect', T: () => ElectionDifficulty },
            { no: 8, name: 'euro_per_energy', kind: 'message', oneof: 'effect', T: () => ExchangeRate },
            { no: 9, name: 'micro_ccd_per_euro', kind: 'message', oneof: 'effect', T: () => ExchangeRate },
            { no: 10, name: 'foundation_account', kind: 'message', oneof: 'effect', T: () => AccountAddress2 },
            {
                no: 11,
                name: 'mint_distribution_cpv_0',
                kind: 'message',
                oneof: 'effect',
                T: () => MintDistributionCpv0,
            },
            {
                no: 12,
                name: 'mint_distribution_cpv_1',
                kind: 'message',
                oneof: 'effect',
                T: () => MintDistributionCpv1,
            },
            {
                no: 13,
                name: 'transaction_fee_distribution',
                kind: 'message',
                oneof: 'effect',
                T: () => TransactionFeeDistribution,
            },
            { no: 14, name: 'gas_rewards', kind: 'message', oneof: 'effect', T: () => GasRewards },
            { no: 15, name: 'pool_parameters_cpv_0', kind: 'message', oneof: 'effect', T: () => BakerStakeThreshold },
            { no: 16, name: 'pool_parameters_cpv_1', kind: 'message', oneof: 'effect', T: () => PoolParametersCpv1 },
            { no: 17, name: 'add_anonymity_revoker', kind: 'message', oneof: 'effect', T: () => ArInfo },
            { no: 18, name: 'add_identity_provider', kind: 'message', oneof: 'effect', T: () => IpInfo },
            { no: 19, name: 'cooldown_parameters', kind: 'message', oneof: 'effect', T: () => CooldownParametersCpv1 },
            { no: 20, name: 'time_parameters', kind: 'message', oneof: 'effect', T: () => TimeParametersCpv1 },
            { no: 21, name: 'gas_rewards_cpv_2', kind: 'message', oneof: 'effect', T: () => GasRewardsCpv2 },
            { no: 22, name: 'timeout_parameters', kind: 'message', oneof: 'effect', T: () => TimeoutParameters },
            { no: 23, name: 'min_block_time', kind: 'message', oneof: 'effect', T: () => Duration2 },
            { no: 24, name: 'block_energy_limit', kind: 'message', oneof: 'effect', T: () => Energy2 },
            {
                no: 25,
                name: 'finalization_committee_parameters',
                kind: 'message',
                oneof: 'effect',
                T: () => FinalizationCommitteeParameters,
            },
        ]);
    }
};
var PendingUpdate = new PendingUpdate$Type();
var NextUpdateSequenceNumbers$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.NextUpdateSequenceNumbers', [
            { no: 1, name: 'root_keys', kind: 'message', T: () => SequenceNumber2 },
            { no: 2, name: 'level1_keys', kind: 'message', T: () => SequenceNumber2 },
            { no: 3, name: 'level2_keys', kind: 'message', T: () => SequenceNumber2 },
            { no: 4, name: 'protocol', kind: 'message', T: () => SequenceNumber2 },
            { no: 5, name: 'election_difficulty', kind: 'message', T: () => SequenceNumber2 },
            { no: 6, name: 'euro_per_energy', kind: 'message', T: () => SequenceNumber2 },
            { no: 7, name: 'micro_ccd_per_euro', kind: 'message', T: () => SequenceNumber2 },
            { no: 8, name: 'foundation_account', kind: 'message', T: () => SequenceNumber2 },
            { no: 9, name: 'mint_distribution', kind: 'message', T: () => SequenceNumber2 },
            { no: 10, name: 'transaction_fee_distribution', kind: 'message', T: () => SequenceNumber2 },
            { no: 11, name: 'gas_rewards', kind: 'message', T: () => SequenceNumber2 },
            { no: 12, name: 'pool_parameters', kind: 'message', T: () => SequenceNumber2 },
            { no: 13, name: 'add_anonymity_revoker', kind: 'message', T: () => SequenceNumber2 },
            { no: 14, name: 'add_identity_provider', kind: 'message', T: () => SequenceNumber2 },
            { no: 15, name: 'cooldown_parameters', kind: 'message', T: () => SequenceNumber2 },
            { no: 16, name: 'time_parameters', kind: 'message', T: () => SequenceNumber2 },
            { no: 17, name: 'timeout_parameters', kind: 'message', T: () => SequenceNumber2 },
            { no: 18, name: 'min_block_time', kind: 'message', T: () => SequenceNumber2 },
            { no: 19, name: 'block_energy_limit', kind: 'message', T: () => SequenceNumber2 },
            { no: 20, name: 'finalization_committee_parameters', kind: 'message', T: () => SequenceNumber2 },
        ]);
    }
};
var NextUpdateSequenceNumbers = new NextUpdateSequenceNumbers$Type();
var IpAddress$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.IpAddress', [
            {
                no: 1,
                name: 'value',
                kind: 'scalar',
                T: 9,
                /*ScalarType.STRING*/
            },
        ]);
    }
};
var IpAddress = new IpAddress$Type();
var Port$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.Port', [
            {
                no: 1,
                name: 'value',
                kind: 'scalar',
                T: 13,
                /*ScalarType.UINT32*/
            },
        ]);
    }
};
var Port = new Port$Type();
var IpSocketAddress$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.IpSocketAddress', [
            { no: 1, name: 'ip', kind: 'message', T: () => IpAddress },
            { no: 2, name: 'port', kind: 'message', T: () => Port },
        ]);
    }
};
var IpSocketAddress = new IpSocketAddress$Type();
var PeerId$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.PeerId', [
            {
                no: 1,
                name: 'value',
                kind: 'scalar',
                T: 9,
                /*ScalarType.STRING*/
            },
        ]);
    }
};
var PeerId = new PeerId$Type();
var BannedPeer$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.BannedPeer', [{ no: 1, name: 'ip_address', kind: 'message', T: () => IpAddress }]);
    }
};
var BannedPeer = new BannedPeer$Type();
var BannedPeers$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.BannedPeers', [{ no: 1, name: 'peers', kind: 'message', repeat: 1, T: () => BannedPeer }]);
    }
};
var BannedPeers = new BannedPeers$Type();
var PeerToBan$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.PeerToBan', [{ no: 1, name: 'ip_address', kind: 'message', T: () => IpAddress }]);
    }
};
var PeerToBan = new PeerToBan$Type();
var DumpRequest$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.DumpRequest', [
            {
                no: 1,
                name: 'file',
                kind: 'scalar',
                T: 9,
                /*ScalarType.STRING*/
            },
            {
                no: 2,
                name: 'raw',
                kind: 'scalar',
                T: 8,
                /*ScalarType.BOOL*/
            },
        ]);
    }
};
var DumpRequest = new DumpRequest$Type();
var PeersInfo$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.PeersInfo', [
            { no: 1, name: 'peers', kind: 'message', repeat: 1, T: () => PeersInfo_Peer },
        ]);
    }
};
var PeersInfo = new PeersInfo$Type();
var PeersInfo_Peer$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.PeersInfo.Peer', [
            { no: 1, name: 'peer_id', kind: 'message', T: () => PeerId },
            { no: 2, name: 'socket_address', kind: 'message', T: () => IpSocketAddress },
            { no: 3, name: 'network_stats', kind: 'message', T: () => PeersInfo_Peer_NetworkStats },
            { no: 4, name: 'bootstrapper', kind: 'message', oneof: 'consensusInfo', T: () => Empty },
            {
                no: 5,
                name: 'node_catchup_status',
                kind: 'enum',
                oneof: 'consensusInfo',
                T: () => ['concordium.v2.PeersInfo.Peer.CatchupStatus', PeersInfo_Peer_CatchupStatus],
            },
        ]);
    }
};
var PeersInfo_Peer = new PeersInfo_Peer$Type();
var PeersInfo_Peer_NetworkStats$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.PeersInfo.Peer.NetworkStats', [
            {
                no: 2,
                name: 'packets_sent',
                kind: 'scalar',
                T: 4,
                L: 0,
                /*LongType.BIGINT*/
            },
            {
                no: 3,
                name: 'packets_received',
                kind: 'scalar',
                T: 4,
                L: 0,
                /*LongType.BIGINT*/
            },
            {
                no: 4,
                name: 'latency',
                kind: 'scalar',
                T: 4,
                L: 0,
                /*LongType.BIGINT*/
            },
        ]);
    }
};
var PeersInfo_Peer_NetworkStats = new PeersInfo_Peer_NetworkStats$Type();
var NodeInfo$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.NodeInfo', [
            {
                no: 1,
                name: 'peer_version',
                kind: 'scalar',
                T: 9,
                /*ScalarType.STRING*/
            },
            { no: 3, name: 'local_time', kind: 'message', T: () => Timestamp2 },
            { no: 4, name: 'peer_uptime', kind: 'message', T: () => Duration2 },
            { no: 5, name: 'network_info', kind: 'message', T: () => NodeInfo_NetworkInfo },
            { no: 6, name: 'bootstrapper', kind: 'message', oneof: 'details', T: () => Empty },
            { no: 7, name: 'node', kind: 'message', oneof: 'details', T: () => NodeInfo_Node },
        ]);
    }
};
var NodeInfo = new NodeInfo$Type();
var NodeInfo_NetworkInfo$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.NodeInfo.NetworkInfo', [
            { no: 1, name: 'node_id', kind: 'message', T: () => PeerId },
            {
                no: 2,
                name: 'peer_total_sent',
                kind: 'scalar',
                T: 4,
                L: 0,
                /*LongType.BIGINT*/
            },
            {
                no: 3,
                name: 'peer_total_received',
                kind: 'scalar',
                T: 4,
                L: 0,
                /*LongType.BIGINT*/
            },
            {
                no: 4,
                name: 'avg_bps_in',
                kind: 'scalar',
                T: 4,
                L: 0,
                /*LongType.BIGINT*/
            },
            {
                no: 5,
                name: 'avg_bps_out',
                kind: 'scalar',
                T: 4,
                L: 0,
                /*LongType.BIGINT*/
            },
        ]);
    }
};
var NodeInfo_NetworkInfo = new NodeInfo_NetworkInfo$Type();
var NodeInfo_BakerConsensusInfo$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.NodeInfo.BakerConsensusInfo', [
            { no: 1, name: 'baker_id', kind: 'message', T: () => BakerId },
            {
                no: 2,
                name: 'passive_committee_info',
                kind: 'enum',
                oneof: 'status',
                T: () => [
                    'concordium.v2.NodeInfo.BakerConsensusInfo.PassiveCommitteeInfo',
                    NodeInfo_BakerConsensusInfo_PassiveCommitteeInfo,
                ],
            },
            {
                no: 3,
                name: 'active_baker_committee_info',
                kind: 'message',
                oneof: 'status',
                T: () => NodeInfo_BakerConsensusInfo_ActiveBakerCommitteeInfo,
            },
            {
                no: 4,
                name: 'active_finalizer_committee_info',
                kind: 'message',
                oneof: 'status',
                T: () => NodeInfo_BakerConsensusInfo_ActiveFinalizerCommitteeInfo,
            },
        ]);
    }
};
var NodeInfo_BakerConsensusInfo = new NodeInfo_BakerConsensusInfo$Type();
var NodeInfo_BakerConsensusInfo_ActiveBakerCommitteeInfo$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.NodeInfo.BakerConsensusInfo.ActiveBakerCommitteeInfo', []);
    }
};
var NodeInfo_BakerConsensusInfo_ActiveBakerCommitteeInfo =
    new NodeInfo_BakerConsensusInfo_ActiveBakerCommitteeInfo$Type();
var NodeInfo_BakerConsensusInfo_ActiveFinalizerCommitteeInfo$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.NodeInfo.BakerConsensusInfo.ActiveFinalizerCommitteeInfo', []);
    }
};
var NodeInfo_BakerConsensusInfo_ActiveFinalizerCommitteeInfo =
    new NodeInfo_BakerConsensusInfo_ActiveFinalizerCommitteeInfo$Type();
var NodeInfo_Node$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.NodeInfo.Node', [
            { no: 1, name: 'not_running', kind: 'message', oneof: 'consensusStatus', T: () => Empty },
            { no: 2, name: 'passive', kind: 'message', oneof: 'consensusStatus', T: () => Empty },
            { no: 3, name: 'active', kind: 'message', oneof: 'consensusStatus', T: () => NodeInfo_BakerConsensusInfo },
        ]);
    }
};
var NodeInfo_Node = new NodeInfo_Node$Type();
var SendBlockItemRequest$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.SendBlockItemRequest', [
            { no: 1, name: 'account_transaction', kind: 'message', oneof: 'blockItem', T: () => AccountTransaction },
            {
                no: 2,
                name: 'credential_deployment',
                kind: 'message',
                oneof: 'blockItem',
                T: () => CredentialDeployment,
            },
            { no: 3, name: 'update_instruction', kind: 'message', oneof: 'blockItem', T: () => UpdateInstruction },
        ]);
    }
};
var SendBlockItemRequest = new SendBlockItemRequest$Type();
var CredentialDeployment$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.CredentialDeployment', [
            { no: 1, name: 'message_expiry', kind: 'message', T: () => TransactionTime },
            {
                no: 2,
                name: 'raw_payload',
                kind: 'scalar',
                oneof: 'payload',
                T: 12,
                /*ScalarType.BYTES*/
            },
        ]);
    }
};
var CredentialDeployment = new CredentialDeployment$Type();
var Signature$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.Signature', [
            {
                no: 1,
                name: 'value',
                kind: 'scalar',
                T: 12,
                /*ScalarType.BYTES*/
            },
        ]);
    }
};
var Signature = new Signature$Type();
var SignatureMap$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.SignatureMap', [
            { no: 1, name: 'signatures', kind: 'map', K: 13, V: { kind: 'message', T: () => Signature } },
        ]);
    }
};
var SignatureMap = new SignatureMap$Type();
var AccountSignatureMap$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.AccountSignatureMap', [
            { no: 1, name: 'signatures', kind: 'map', K: 13, V: { kind: 'message', T: () => Signature } },
        ]);
    }
};
var AccountSignatureMap = new AccountSignatureMap$Type();
var AccountTransactionSignature$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.AccountTransactionSignature', [
            { no: 1, name: 'signatures', kind: 'map', K: 13, V: { kind: 'message', T: () => AccountSignatureMap } },
        ]);
    }
};
var AccountTransactionSignature = new AccountTransactionSignature$Type();
var AccountTransactionHeader$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.AccountTransactionHeader', [
            { no: 1, name: 'sender', kind: 'message', T: () => AccountAddress2 },
            { no: 2, name: 'sequence_number', kind: 'message', T: () => SequenceNumber2 },
            { no: 3, name: 'energy_amount', kind: 'message', T: () => Energy2 },
            { no: 5, name: 'expiry', kind: 'message', T: () => TransactionTime },
        ]);
    }
};
var AccountTransactionHeader = new AccountTransactionHeader$Type();
var InitContractPayload$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.InitContractPayload', [
            { no: 1, name: 'amount', kind: 'message', T: () => Amount },
            { no: 2, name: 'module_ref', kind: 'message', T: () => ModuleRef },
            { no: 3, name: 'init_name', kind: 'message', T: () => InitName2 },
            { no: 4, name: 'parameter', kind: 'message', T: () => Parameter2 },
        ]);
    }
};
var InitContractPayload = new InitContractPayload$Type();
var UpdateContractPayload$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.UpdateContractPayload', [
            { no: 1, name: 'amount', kind: 'message', T: () => Amount },
            { no: 2, name: 'address', kind: 'message', T: () => ContractAddress2 },
            { no: 3, name: 'receive_name', kind: 'message', T: () => ReceiveName2 },
            { no: 4, name: 'parameter', kind: 'message', T: () => Parameter2 },
        ]);
    }
};
var UpdateContractPayload = new UpdateContractPayload$Type();
var TransferPayload$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.TransferPayload', [
            { no: 1, name: 'amount', kind: 'message', T: () => Amount },
            { no: 2, name: 'receiver', kind: 'message', T: () => AccountAddress2 },
        ]);
    }
};
var TransferPayload = new TransferPayload$Type();
var TransferWithMemoPayload$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.TransferWithMemoPayload', [
            { no: 1, name: 'amount', kind: 'message', T: () => Amount },
            { no: 2, name: 'receiver', kind: 'message', T: () => AccountAddress2 },
            { no: 3, name: 'memo', kind: 'message', T: () => Memo },
        ]);
    }
};
var TransferWithMemoPayload = new TransferWithMemoPayload$Type();
var AccountTransactionPayload$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.AccountTransactionPayload', [
            {
                no: 1,
                name: 'raw_payload',
                kind: 'scalar',
                oneof: 'payload',
                T: 12,
                /*ScalarType.BYTES*/
            },
            { no: 2, name: 'deploy_module', kind: 'message', oneof: 'payload', T: () => VersionedModuleSource },
            { no: 3, name: 'init_contract', kind: 'message', oneof: 'payload', T: () => InitContractPayload },
            { no: 4, name: 'update_contract', kind: 'message', oneof: 'payload', T: () => UpdateContractPayload },
            { no: 5, name: 'transfer', kind: 'message', oneof: 'payload', T: () => TransferPayload },
            { no: 6, name: 'transfer_with_memo', kind: 'message', oneof: 'payload', T: () => TransferWithMemoPayload },
            { no: 7, name: 'register_data', kind: 'message', oneof: 'payload', T: () => RegisteredData },
        ]);
    }
};
var AccountTransactionPayload = new AccountTransactionPayload$Type();
var PreAccountTransaction$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.PreAccountTransaction', [
            { no: 1, name: 'header', kind: 'message', T: () => AccountTransactionHeader },
            { no: 2, name: 'payload', kind: 'message', T: () => AccountTransactionPayload },
        ]);
    }
};
var PreAccountTransaction = new PreAccountTransaction$Type();
var AccountTransaction$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.AccountTransaction', [
            { no: 1, name: 'signature', kind: 'message', T: () => AccountTransactionSignature },
            { no: 2, name: 'header', kind: 'message', T: () => AccountTransactionHeader },
            { no: 3, name: 'payload', kind: 'message', T: () => AccountTransactionPayload },
        ]);
    }
};
var AccountTransaction = new AccountTransaction$Type();
var UpdateInstructionHeader$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.UpdateInstructionHeader', [
            { no: 1, name: 'sequence_number', kind: 'message', T: () => UpdateSequenceNumber },
            { no: 2, name: 'effective_time', kind: 'message', T: () => TransactionTime },
            { no: 3, name: 'timeout', kind: 'message', T: () => TransactionTime },
        ]);
    }
};
var UpdateInstructionHeader = new UpdateInstructionHeader$Type();
var UpdateInstructionPayload$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.UpdateInstructionPayload', [
            {
                no: 3,
                name: 'raw_payload',
                kind: 'scalar',
                oneof: 'payload',
                T: 12,
                /*ScalarType.BYTES*/
            },
        ]);
    }
};
var UpdateInstructionPayload = new UpdateInstructionPayload$Type();
var UpdateInstruction$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.UpdateInstruction', [
            { no: 1, name: 'signatures', kind: 'message', T: () => SignatureMap },
            { no: 2, name: 'header', kind: 'message', T: () => UpdateInstructionHeader },
            { no: 3, name: 'payload', kind: 'message', T: () => UpdateInstructionPayload },
        ]);
    }
};
var UpdateInstruction = new UpdateInstruction$Type();
var AccountTransactionSignHash$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.AccountTransactionSignHash', [
            {
                no: 1,
                name: 'value',
                kind: 'scalar',
                T: 12,
                /*ScalarType.BYTES*/
            },
        ]);
    }
};
var AccountTransactionSignHash = new AccountTransactionSignHash$Type();
var CredentialsPerBlockLimit$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.CredentialsPerBlockLimit', [
            {
                no: 1,
                name: 'value',
                kind: 'scalar',
                T: 13,
                /*ScalarType.UINT32*/
            },
        ]);
    }
};
var CredentialsPerBlockLimit = new CredentialsPerBlockLimit$Type();
var ChainParametersV0$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.ChainParametersV0', [
            { no: 1, name: 'election_difficulty', kind: 'message', T: () => ElectionDifficulty },
            { no: 2, name: 'euro_per_energy', kind: 'message', T: () => ExchangeRate },
            { no: 3, name: 'micro_ccd_per_euro', kind: 'message', T: () => ExchangeRate },
            { no: 4, name: 'baker_cooldown_epochs', kind: 'message', T: () => Epoch },
            { no: 5, name: 'account_creation_limit', kind: 'message', T: () => CredentialsPerBlockLimit },
            { no: 6, name: 'mint_distribution', kind: 'message', T: () => MintDistributionCpv0 },
            { no: 7, name: 'transaction_fee_distribution', kind: 'message', T: () => TransactionFeeDistribution },
            { no: 8, name: 'gas_rewards', kind: 'message', T: () => GasRewards },
            { no: 9, name: 'foundation_account', kind: 'message', T: () => AccountAddress2 },
            { no: 10, name: 'minimum_threshold_for_baking', kind: 'message', T: () => Amount },
            { no: 11, name: 'root_keys', kind: 'message', T: () => HigherLevelKeys },
            { no: 12, name: 'level1_keys', kind: 'message', T: () => HigherLevelKeys },
            { no: 13, name: 'level2_keys', kind: 'message', T: () => AuthorizationsV0 },
        ]);
    }
};
var ChainParametersV0 = new ChainParametersV0$Type();
var ChainParametersV1$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.ChainParametersV1', [
            { no: 1, name: 'election_difficulty', kind: 'message', T: () => ElectionDifficulty },
            { no: 2, name: 'euro_per_energy', kind: 'message', T: () => ExchangeRate },
            { no: 3, name: 'micro_ccd_per_euro', kind: 'message', T: () => ExchangeRate },
            { no: 4, name: 'cooldown_parameters', kind: 'message', T: () => CooldownParametersCpv1 },
            { no: 5, name: 'time_parameters', kind: 'message', T: () => TimeParametersCpv1 },
            { no: 6, name: 'account_creation_limit', kind: 'message', T: () => CredentialsPerBlockLimit },
            { no: 7, name: 'mint_distribution', kind: 'message', T: () => MintDistributionCpv1 },
            { no: 8, name: 'transaction_fee_distribution', kind: 'message', T: () => TransactionFeeDistribution },
            { no: 9, name: 'gas_rewards', kind: 'message', T: () => GasRewards },
            { no: 10, name: 'foundation_account', kind: 'message', T: () => AccountAddress2 },
            { no: 11, name: 'pool_parameters', kind: 'message', T: () => PoolParametersCpv1 },
            { no: 12, name: 'root_keys', kind: 'message', T: () => HigherLevelKeys },
            { no: 13, name: 'level1_keys', kind: 'message', T: () => HigherLevelKeys },
            { no: 14, name: 'level2_keys', kind: 'message', T: () => AuthorizationsV1 },
        ]);
    }
};
var ChainParametersV1 = new ChainParametersV1$Type();
var ChainParametersV2$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.ChainParametersV2', [
            { no: 1, name: 'consensus_parameters', kind: 'message', T: () => ConsensusParametersV1 },
            { no: 2, name: 'euro_per_energy', kind: 'message', T: () => ExchangeRate },
            { no: 3, name: 'micro_ccd_per_euro', kind: 'message', T: () => ExchangeRate },
            { no: 4, name: 'cooldown_parameters', kind: 'message', T: () => CooldownParametersCpv1 },
            { no: 5, name: 'time_parameters', kind: 'message', T: () => TimeParametersCpv1 },
            { no: 6, name: 'account_creation_limit', kind: 'message', T: () => CredentialsPerBlockLimit },
            { no: 7, name: 'mint_distribution', kind: 'message', T: () => MintDistributionCpv1 },
            { no: 8, name: 'transaction_fee_distribution', kind: 'message', T: () => TransactionFeeDistribution },
            { no: 9, name: 'gas_rewards', kind: 'message', T: () => GasRewardsCpv2 },
            { no: 10, name: 'foundation_account', kind: 'message', T: () => AccountAddress2 },
            { no: 11, name: 'pool_parameters', kind: 'message', T: () => PoolParametersCpv1 },
            { no: 12, name: 'root_keys', kind: 'message', T: () => HigherLevelKeys },
            { no: 13, name: 'level1_keys', kind: 'message', T: () => HigherLevelKeys },
            { no: 14, name: 'level2_keys', kind: 'message', T: () => AuthorizationsV1 },
            {
                no: 15,
                name: 'finalization_committee_parameters',
                kind: 'message',
                T: () => FinalizationCommitteeParameters,
            },
        ]);
    }
};
var ChainParametersV2 = new ChainParametersV2$Type();
var ChainParameters$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.ChainParameters', [
            { no: 1, name: 'v0', kind: 'message', oneof: 'parameters', T: () => ChainParametersV0 },
            { no: 2, name: 'v1', kind: 'message', oneof: 'parameters', T: () => ChainParametersV1 },
            { no: 3, name: 'v2', kind: 'message', oneof: 'parameters', T: () => ChainParametersV2 },
        ]);
    }
};
var ChainParameters = new ChainParameters$Type();
var FinalizationSummaryParty$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.FinalizationSummaryParty', [
            { no: 1, name: 'baker', kind: 'message', T: () => BakerId },
            {
                no: 2,
                name: 'weight',
                kind: 'scalar',
                T: 4,
                L: 0,
                /*LongType.BIGINT*/
            },
            {
                no: 3,
                name: 'signed',
                kind: 'scalar',
                T: 8,
                /*ScalarType.BOOL*/
            },
        ]);
    }
};
var FinalizationSummaryParty = new FinalizationSummaryParty$Type();
var FinalizationIndex$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.FinalizationIndex', [
            {
                no: 1,
                name: 'value',
                kind: 'scalar',
                T: 4,
                L: 0,
                /*LongType.BIGINT*/
            },
        ]);
    }
};
var FinalizationIndex = new FinalizationIndex$Type();
var FinalizationSummary$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.FinalizationSummary', [
            { no: 1, name: 'block', kind: 'message', T: () => BlockHash2 },
            { no: 2, name: 'index', kind: 'message', T: () => FinalizationIndex },
            { no: 3, name: 'delay', kind: 'message', T: () => BlockHeight },
            { no: 4, name: 'finalizers', kind: 'message', repeat: 1, T: () => FinalizationSummaryParty },
        ]);
    }
};
var FinalizationSummary = new FinalizationSummary$Type();
var BlockFinalizationSummary$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.BlockFinalizationSummary', [
            { no: 1, name: 'none', kind: 'message', oneof: 'summary', T: () => Empty },
            { no: 2, name: 'record', kind: 'message', oneof: 'summary', T: () => FinalizationSummary },
        ]);
    }
};
var BlockFinalizationSummary = new BlockFinalizationSummary$Type();
var BlockItem$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.BlockItem', [
            { no: 1, name: 'hash', kind: 'message', T: () => TransactionHash2 },
            { no: 2, name: 'account_transaction', kind: 'message', oneof: 'blockItem', T: () => AccountTransaction },
            {
                no: 3,
                name: 'credential_deployment',
                kind: 'message',
                oneof: 'blockItem',
                T: () => CredentialDeployment,
            },
            { no: 4, name: 'update_instruction', kind: 'message', oneof: 'blockItem', T: () => UpdateInstruction },
        ]);
    }
};
var BlockItem = new BlockItem$Type();
var BakerRewardPeriodInfo$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.BakerRewardPeriodInfo', [
            { no: 1, name: 'baker', kind: 'message', T: () => BakerInfo },
            { no: 2, name: 'effective_stake', kind: 'message', T: () => Amount },
            { no: 3, name: 'commission_rates', kind: 'message', T: () => CommissionRates },
            { no: 4, name: 'equity_capital', kind: 'message', T: () => Amount },
            { no: 5, name: 'delegated_capital', kind: 'message', T: () => Amount },
            {
                no: 6,
                name: 'is_finalizer',
                kind: 'scalar',
                T: 8,
                /*ScalarType.BOOL*/
            },
        ]);
    }
};
var BakerRewardPeriodInfo = new BakerRewardPeriodInfo$Type();
var QuorumSignature$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.QuorumSignature', [
            {
                no: 1,
                name: 'value',
                kind: 'scalar',
                T: 12,
                /*ScalarType.BYTES*/
            },
        ]);
    }
};
var QuorumSignature = new QuorumSignature$Type();
var QuorumCertificate$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.QuorumCertificate', [
            { no: 1, name: 'block_hash', kind: 'message', T: () => BlockHash2 },
            { no: 2, name: 'round', kind: 'message', T: () => Round },
            { no: 3, name: 'epoch', kind: 'message', T: () => Epoch },
            { no: 4, name: 'aggregate_signature', kind: 'message', T: () => QuorumSignature },
            { no: 5, name: 'signatories', kind: 'message', repeat: 1, T: () => BakerId },
        ]);
    }
};
var QuorumCertificate = new QuorumCertificate$Type();
var FinalizerRound$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.FinalizerRound', [
            { no: 1, name: 'round', kind: 'message', T: () => Round },
            { no: 2, name: 'finalizers', kind: 'message', repeat: 1, T: () => BakerId },
        ]);
    }
};
var FinalizerRound = new FinalizerRound$Type();
var TimeoutSignature$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.TimeoutSignature', [
            {
                no: 1,
                name: 'value',
                kind: 'scalar',
                T: 12,
                /*ScalarType.BYTES*/
            },
        ]);
    }
};
var TimeoutSignature = new TimeoutSignature$Type();
var TimeoutCertificate$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.TimeoutCertificate', [
            { no: 1, name: 'round', kind: 'message', T: () => Round },
            { no: 2, name: 'min_epoch', kind: 'message', T: () => Epoch },
            { no: 3, name: 'qc_rounds_first_epoch', kind: 'message', repeat: 1, T: () => FinalizerRound },
            { no: 4, name: 'qc_rounds_second_epoch', kind: 'message', repeat: 1, T: () => FinalizerRound },
            { no: 5, name: 'aggregate_signature', kind: 'message', T: () => TimeoutSignature },
        ]);
    }
};
var TimeoutCertificate = new TimeoutCertificate$Type();
var SuccessorProof$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.SuccessorProof', [
            {
                no: 1,
                name: 'value',
                kind: 'scalar',
                T: 12,
                /*ScalarType.BYTES*/
            },
        ]);
    }
};
var SuccessorProof = new SuccessorProof$Type();
var EpochFinalizationEntry$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.EpochFinalizationEntry', [
            { no: 1, name: 'finalized_qc', kind: 'message', T: () => QuorumCertificate },
            { no: 2, name: 'successor_qc', kind: 'message', T: () => QuorumCertificate },
            { no: 3, name: 'successor_proof', kind: 'message', T: () => SuccessorProof },
        ]);
    }
};
var EpochFinalizationEntry = new EpochFinalizationEntry$Type();
var BlockCertificates$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.BlockCertificates', [
            { no: 1, name: 'quorum_certificate', kind: 'message', T: () => QuorumCertificate },
            { no: 2, name: 'timeout_certificate', kind: 'message', T: () => TimeoutCertificate },
            { no: 3, name: 'epoch_finalization_entry', kind: 'message', T: () => EpochFinalizationEntry },
        ]);
    }
};
var BlockCertificates = new BlockCertificates$Type();
var WinningBaker$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.WinningBaker', [
            { no: 1, name: 'round', kind: 'message', T: () => Round },
            { no: 2, name: 'winner', kind: 'message', T: () => BakerId },
            {
                no: 3,
                name: 'present',
                kind: 'scalar',
                T: 8,
                /*ScalarType.BOOL*/
            },
        ]);
    }
};
var WinningBaker = new WinningBaker$Type();
var DryRunRequest$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.DryRunRequest', [
            { no: 1, name: 'load_block_state', kind: 'message', oneof: 'request', T: () => BlockHashInput },
            { no: 2, name: 'state_query', kind: 'message', oneof: 'request', T: () => DryRunStateQuery },
            { no: 3, name: 'state_operation', kind: 'message', oneof: 'request', T: () => DryRunStateOperation },
        ]);
    }
};
var DryRunRequest = new DryRunRequest$Type();
var DryRunStateQuery$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.DryRunStateQuery', [
            { no: 1, name: 'get_account_info', kind: 'message', oneof: 'query', T: () => AccountIdentifierInput },
            { no: 2, name: 'get_instance_info', kind: 'message', oneof: 'query', T: () => ContractAddress2 },
            { no: 3, name: 'invoke_instance', kind: 'message', oneof: 'query', T: () => DryRunInvokeInstance },
        ]);
    }
};
var DryRunStateQuery = new DryRunStateQuery$Type();
var DryRunInvokeInstance$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.DryRunInvokeInstance', [
            { no: 1, name: 'invoker', kind: 'message', T: () => Address },
            { no: 2, name: 'instance', kind: 'message', T: () => ContractAddress2 },
            { no: 3, name: 'amount', kind: 'message', T: () => Amount },
            { no: 4, name: 'entrypoint', kind: 'message', T: () => ReceiveName2 },
            { no: 5, name: 'parameter', kind: 'message', T: () => Parameter2 },
            { no: 6, name: 'energy', kind: 'message', T: () => Energy2 },
        ]);
    }
};
var DryRunInvokeInstance = new DryRunInvokeInstance$Type();
var DryRunStateOperation$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.DryRunStateOperation', [
            { no: 1, name: 'set_timestamp', kind: 'message', oneof: 'operation', T: () => Timestamp2 },
            { no: 2, name: 'mint_to_account', kind: 'message', oneof: 'operation', T: () => DryRunMintToAccount },
            { no: 3, name: 'run_transaction', kind: 'message', oneof: 'operation', T: () => DryRunTransaction },
        ]);
    }
};
var DryRunStateOperation = new DryRunStateOperation$Type();
var DryRunMintToAccount$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.DryRunMintToAccount', [
            { no: 1, name: 'account', kind: 'message', T: () => AccountAddress2 },
            { no: 2, name: 'amount', kind: 'message', T: () => Amount },
        ]);
    }
};
var DryRunMintToAccount = new DryRunMintToAccount$Type();
var DryRunTransaction$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.DryRunTransaction', [
            { no: 1, name: 'sender', kind: 'message', T: () => AccountAddress2 },
            { no: 2, name: 'energy_amount', kind: 'message', T: () => Energy2 },
            { no: 3, name: 'payload', kind: 'message', T: () => AccountTransactionPayload },
            { no: 4, name: 'signatures', kind: 'message', repeat: 1, T: () => DryRunSignature },
        ]);
    }
};
var DryRunTransaction = new DryRunTransaction$Type();
var DryRunSignature$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.DryRunSignature', [
            {
                no: 1,
                name: 'credential',
                kind: 'scalar',
                T: 13,
                /*ScalarType.UINT32*/
            },
            {
                no: 2,
                name: 'key',
                kind: 'scalar',
                T: 13,
                /*ScalarType.UINT32*/
            },
        ]);
    }
};
var DryRunSignature = new DryRunSignature$Type();
var DryRunResponse$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.DryRunResponse', [
            { no: 1, name: 'error', kind: 'message', oneof: 'response', T: () => DryRunErrorResponse },
            { no: 2, name: 'success', kind: 'message', oneof: 'response', T: () => DryRunSuccessResponse },
            { no: 3, name: 'quota_remaining', kind: 'message', T: () => Energy2 },
        ]);
    }
};
var DryRunResponse = new DryRunResponse$Type();
var DryRunErrorResponse$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.DryRunErrorResponse', [
            { no: 1, name: 'no_state', kind: 'message', oneof: 'error', T: () => DryRunErrorResponse_NoState },
            {
                no: 2,
                name: 'block_not_found',
                kind: 'message',
                oneof: 'error',
                T: () => DryRunErrorResponse_BlockNotFound,
            },
            {
                no: 3,
                name: 'account_not_found',
                kind: 'message',
                oneof: 'error',
                T: () => DryRunErrorResponse_AccountNotFound,
            },
            {
                no: 4,
                name: 'instance_not_found',
                kind: 'message',
                oneof: 'error',
                T: () => DryRunErrorResponse_InstanceNotFound,
            },
            {
                no: 5,
                name: 'amount_over_limit',
                kind: 'message',
                oneof: 'error',
                T: () => DryRunErrorResponse_AmountOverLimit,
            },
            {
                no: 6,
                name: 'balance_insufficient',
                kind: 'message',
                oneof: 'error',
                T: () => DryRunErrorResponse_BalanceInsufficient,
            },
            {
                no: 8,
                name: 'energy_insufficient',
                kind: 'message',
                oneof: 'error',
                T: () => DryRunErrorResponse_EnergyInsufficient,
            },
            {
                no: 9,
                name: 'invoke_failed',
                kind: 'message',
                oneof: 'error',
                T: () => DryRunErrorResponse_InvokeFailure,
            },
        ]);
    }
};
var DryRunErrorResponse = new DryRunErrorResponse$Type();
var DryRunErrorResponse_NoState$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.DryRunErrorResponse.NoState', []);
    }
};
var DryRunErrorResponse_NoState = new DryRunErrorResponse_NoState$Type();
var DryRunErrorResponse_BlockNotFound$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.DryRunErrorResponse.BlockNotFound', []);
    }
};
var DryRunErrorResponse_BlockNotFound = new DryRunErrorResponse_BlockNotFound$Type();
var DryRunErrorResponse_AccountNotFound$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.DryRunErrorResponse.AccountNotFound', []);
    }
};
var DryRunErrorResponse_AccountNotFound = new DryRunErrorResponse_AccountNotFound$Type();
var DryRunErrorResponse_InstanceNotFound$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.DryRunErrorResponse.InstanceNotFound', []);
    }
};
var DryRunErrorResponse_InstanceNotFound = new DryRunErrorResponse_InstanceNotFound$Type();
var DryRunErrorResponse_AmountOverLimit$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.DryRunErrorResponse.AmountOverLimit', [
            { no: 1, name: 'amount_limit', kind: 'message', T: () => Amount },
        ]);
    }
};
var DryRunErrorResponse_AmountOverLimit = new DryRunErrorResponse_AmountOverLimit$Type();
var DryRunErrorResponse_BalanceInsufficient$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.DryRunErrorResponse.BalanceInsufficient', [
            { no: 1, name: 'required_amount', kind: 'message', T: () => Amount },
            { no: 2, name: 'available_amount', kind: 'message', T: () => Amount },
        ]);
    }
};
var DryRunErrorResponse_BalanceInsufficient = new DryRunErrorResponse_BalanceInsufficient$Type();
var DryRunErrorResponse_EnergyInsufficient$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.DryRunErrorResponse.EnergyInsufficient', [
            { no: 1, name: 'energy_required', kind: 'message', T: () => Energy2 },
        ]);
    }
};
var DryRunErrorResponse_EnergyInsufficient = new DryRunErrorResponse_EnergyInsufficient$Type();
var DryRunErrorResponse_InvokeFailure$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.DryRunErrorResponse.InvokeFailure', [
            {
                no: 1,
                name: 'return_value',
                kind: 'scalar',
                opt: true,
                T: 12,
                /*ScalarType.BYTES*/
            },
            { no: 2, name: 'used_energy', kind: 'message', T: () => Energy2 },
            { no: 3, name: 'reason', kind: 'message', T: () => RejectReason },
        ]);
    }
};
var DryRunErrorResponse_InvokeFailure = new DryRunErrorResponse_InvokeFailure$Type();
var DryRunSuccessResponse$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.DryRunSuccessResponse', [
            {
                no: 1,
                name: 'block_state_loaded',
                kind: 'message',
                oneof: 'response',
                T: () => DryRunSuccessResponse_BlockStateLoaded,
            },
            { no: 2, name: 'account_info', kind: 'message', oneof: 'response', T: () => AccountInfo },
            { no: 3, name: 'instance_info', kind: 'message', oneof: 'response', T: () => InstanceInfo },
            {
                no: 4,
                name: 'invoke_succeeded',
                kind: 'message',
                oneof: 'response',
                T: () => DryRunSuccessResponse_InvokeSuccess,
            },
            {
                no: 5,
                name: 'timestamp_set',
                kind: 'message',
                oneof: 'response',
                T: () => DryRunSuccessResponse_TimestampSet,
            },
            {
                no: 6,
                name: 'minted_to_account',
                kind: 'message',
                oneof: 'response',
                T: () => DryRunSuccessResponse_MintedToAccount,
            },
            {
                no: 7,
                name: 'transaction_executed',
                kind: 'message',
                oneof: 'response',
                T: () => DryRunSuccessResponse_TransactionExecuted,
            },
        ]);
    }
};
var DryRunSuccessResponse = new DryRunSuccessResponse$Type();
var DryRunSuccessResponse_BlockStateLoaded$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.DryRunSuccessResponse.BlockStateLoaded', [
            { no: 1, name: 'current_timestamp', kind: 'message', T: () => Timestamp2 },
            { no: 2, name: 'block_hash', kind: 'message', T: () => BlockHash2 },
            {
                no: 3,
                name: 'protocol_version',
                kind: 'enum',
                T: () => ['concordium.v2.ProtocolVersion', ProtocolVersion],
            },
        ]);
    }
};
var DryRunSuccessResponse_BlockStateLoaded = new DryRunSuccessResponse_BlockStateLoaded$Type();
var DryRunSuccessResponse_TimestampSet$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.DryRunSuccessResponse.TimestampSet', []);
    }
};
var DryRunSuccessResponse_TimestampSet = new DryRunSuccessResponse_TimestampSet$Type();
var DryRunSuccessResponse_MintedToAccount$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.DryRunSuccessResponse.MintedToAccount', []);
    }
};
var DryRunSuccessResponse_MintedToAccount = new DryRunSuccessResponse_MintedToAccount$Type();
var DryRunSuccessResponse_TransactionExecuted$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.DryRunSuccessResponse.TransactionExecuted', [
            { no: 1, name: 'energy_cost', kind: 'message', T: () => Energy2 },
            { no: 2, name: 'details', kind: 'message', T: () => AccountTransactionDetails },
            {
                no: 3,
                name: 'return_value',
                kind: 'scalar',
                opt: true,
                T: 12,
                /*ScalarType.BYTES*/
            },
        ]);
    }
};
var DryRunSuccessResponse_TransactionExecuted = new DryRunSuccessResponse_TransactionExecuted$Type();
var DryRunSuccessResponse_InvokeSuccess$Type = class extends MessageType {
    constructor() {
        super('concordium.v2.DryRunSuccessResponse.InvokeSuccess', [
            {
                no: 1,
                name: 'return_value',
                kind: 'scalar',
                opt: true,
                T: 12,
                /*ScalarType.BYTES*/
            },
            { no: 2, name: 'used_energy', kind: 'message', T: () => Energy2 },
            { no: 3, name: 'effects', kind: 'message', repeat: 1, T: () => ContractTraceElement },
        ]);
    }
};
var DryRunSuccessResponse_InvokeSuccess = new DryRunSuccessResponse_InvokeSuccess$Type();

// node_modules/@concordium/web-sdk/lib/esm/grpc-api/v2/concordium/service.js
var Queries = new ServiceType('concordium.v2.Queries', [
    { name: 'GetBlocks', serverStreaming: true, options: {}, I: Empty, O: ArrivedBlockInfo },
    { name: 'GetFinalizedBlocks', serverStreaming: true, options: {}, I: Empty, O: FinalizedBlockInfo },
    { name: 'GetAccountInfo', options: {}, I: AccountInfoRequest, O: AccountInfo },
    { name: 'GetAccountList', serverStreaming: true, options: {}, I: BlockHashInput, O: AccountAddress2 },
    { name: 'GetModuleList', serverStreaming: true, options: {}, I: BlockHashInput, O: ModuleRef },
    { name: 'GetAncestors', serverStreaming: true, options: {}, I: AncestorsRequest, O: BlockHash2 },
    { name: 'GetModuleSource', options: {}, I: ModuleSourceRequest, O: VersionedModuleSource },
    { name: 'GetInstanceList', serverStreaming: true, options: {}, I: BlockHashInput, O: ContractAddress2 },
    { name: 'GetInstanceInfo', options: {}, I: InstanceInfoRequest, O: InstanceInfo },
    { name: 'GetInstanceState', serverStreaming: true, options: {}, I: InstanceInfoRequest, O: InstanceStateKVPair },
    { name: 'InstanceStateLookup', options: {}, I: InstanceStateLookupRequest, O: InstanceStateValueAtKey },
    { name: 'GetNextAccountSequenceNumber', options: {}, I: AccountAddress2, O: NextAccountSequenceNumber },
    { name: 'GetConsensusInfo', options: {}, I: Empty, O: ConsensusInfo },
    { name: 'GetBlockItemStatus', options: {}, I: TransactionHash2, O: BlockItemStatus },
    { name: 'GetCryptographicParameters', options: {}, I: BlockHashInput, O: CryptographicParameters },
    { name: 'GetBlockInfo', options: {}, I: BlockHashInput, O: BlockInfo },
    { name: 'GetBakerList', serverStreaming: true, options: {}, I: BlockHashInput, O: BakerId },
    { name: 'GetPoolInfo', options: {}, I: PoolInfoRequest, O: PoolInfoResponse },
    { name: 'GetPassiveDelegationInfo', options: {}, I: BlockHashInput, O: PassiveDelegationInfo },
    { name: 'GetBlocksAtHeight', options: {}, I: BlocksAtHeightRequest, O: BlocksAtHeightResponse },
    { name: 'GetTokenomicsInfo', options: {}, I: BlockHashInput, O: TokenomicsInfo },
    { name: 'InvokeInstance', options: {}, I: InvokeInstanceRequest, O: InvokeInstanceResponse },
    { name: 'GetPoolDelegators', serverStreaming: true, options: {}, I: GetPoolDelegatorsRequest, O: DelegatorInfo },
    {
        name: 'GetPoolDelegatorsRewardPeriod',
        serverStreaming: true,
        options: {},
        I: GetPoolDelegatorsRequest,
        O: DelegatorRewardPeriodInfo,
    },
    { name: 'GetPassiveDelegators', serverStreaming: true, options: {}, I: BlockHashInput, O: DelegatorInfo },
    {
        name: 'GetPassiveDelegatorsRewardPeriod',
        serverStreaming: true,
        options: {},
        I: BlockHashInput,
        O: DelegatorRewardPeriodInfo,
    },
    { name: 'GetBranches', options: {}, I: Empty, O: Branch },
    { name: 'GetElectionInfo', options: {}, I: BlockHashInput, O: ElectionInfo },
    { name: 'GetIdentityProviders', serverStreaming: true, options: {}, I: BlockHashInput, O: IpInfo },
    { name: 'GetAnonymityRevokers', serverStreaming: true, options: {}, I: BlockHashInput, O: ArInfo },
    {
        name: 'GetAccountNonFinalizedTransactions',
        serverStreaming: true,
        options: {},
        I: AccountAddress2,
        O: TransactionHash2,
    },
    { name: 'GetBlockTransactionEvents', serverStreaming: true, options: {}, I: BlockHashInput, O: BlockItemSummary },
    { name: 'GetBlockSpecialEvents', serverStreaming: true, options: {}, I: BlockHashInput, O: BlockSpecialEvent },
    { name: 'GetBlockPendingUpdates', serverStreaming: true, options: {}, I: BlockHashInput, O: PendingUpdate },
    { name: 'GetNextUpdateSequenceNumbers', options: {}, I: BlockHashInput, O: NextUpdateSequenceNumbers },
    { name: 'GetBakerEarliestWinTime', options: {}, I: BakerId, O: Timestamp2 },
    { name: 'Shutdown', options: {}, I: Empty, O: Empty },
    { name: 'PeerConnect', options: {}, I: IpSocketAddress, O: Empty },
    { name: 'PeerDisconnect', options: {}, I: IpSocketAddress, O: Empty },
    { name: 'GetBannedPeers', options: {}, I: Empty, O: BannedPeers },
    { name: 'BanPeer', options: {}, I: PeerToBan, O: Empty },
    { name: 'UnbanPeer', options: {}, I: BannedPeer, O: Empty },
    { name: 'DumpStart', options: {}, I: DumpRequest, O: Empty },
    { name: 'DumpStop', options: {}, I: Empty, O: Empty },
    { name: 'GetPeersInfo', options: {}, I: Empty, O: PeersInfo },
    { name: 'GetNodeInfo', options: {}, I: Empty, O: NodeInfo },
    { name: 'SendBlockItem', options: {}, I: SendBlockItemRequest, O: TransactionHash2 },
    { name: 'GetAccountTransactionSignHash', options: {}, I: PreAccountTransaction, O: AccountTransactionSignHash },
    { name: 'GetBlockChainParameters', options: {}, I: BlockHashInput, O: ChainParameters },
    { name: 'GetBlockFinalizationSummary', options: {}, I: BlockHashInput, O: BlockFinalizationSummary },
    { name: 'GetBlockItems', serverStreaming: true, options: {}, I: BlockHashInput, O: BlockItem },
    { name: 'GetBakersRewardPeriod', serverStreaming: true, options: {}, I: BlockHashInput, O: BakerRewardPeriodInfo },
    { name: 'GetBlockCertificates', options: {}, I: BlockHashInput, O: BlockCertificates },
    { name: 'GetWinningBakersEpoch', serverStreaming: true, options: {}, I: EpochRequest, O: WinningBaker },
    { name: 'GetFirstBlockEpoch', options: {}, I: EpochRequest, O: BlockHash2 },
    { name: 'DryRun', serverStreaming: true, clientStreaming: true, options: {}, I: DryRunRequest, O: DryRunResponse },
]);

// node_modules/@concordium/web-sdk/lib/esm/grpc-api/v2/concordium/service.client.js
var QueriesClient = class {
    constructor(_transport) {
        this._transport = _transport;
        this.typeName = Queries.typeName;
        this.methods = Queries.methods;
        this.options = Queries.options;
    }
    /**
     * Return a stream of blocks that arrive from the time the query is made onward.
     * This can be used to listen for incoming blocks.
     *
     * @generated from protobuf rpc: GetBlocks(concordium.v2.Empty) returns (stream concordium.v2.ArrivedBlockInfo);
     */
    getBlocks(input, options) {
        const method = this.methods[0],
            opt = this._transport.mergeOptions(options);
        return stackIntercept('serverStreaming', this._transport, method, opt, input);
    }
    /**
     * Return a stream of blocks that are finalized from the time the query is
     * made onward. This can be used to listen for newly finalized blocks. Note
     * that there is no guarantee that blocks will not be skipped if the client is
     * too slow in processing the stream, however blocks will always be sent by
     * increasing block height.
     *
     * @generated from protobuf rpc: GetFinalizedBlocks(concordium.v2.Empty) returns (stream concordium.v2.FinalizedBlockInfo);
     */
    getFinalizedBlocks(input, options) {
        const method = this.methods[1],
            opt = this._transport.mergeOptions(options);
        return stackIntercept('serverStreaming', this._transport, method, opt, input);
    }
    /**
     * Retrieve the information about the given account in the given block.
     *
     * @generated from protobuf rpc: GetAccountInfo(concordium.v2.AccountInfoRequest) returns (concordium.v2.AccountInfo);
     */
    getAccountInfo(input, options) {
        const method = this.methods[2],
            opt = this._transport.mergeOptions(options);
        return stackIntercept('unary', this._transport, method, opt, input);
    }
    /**
     * Retrieve the list of accounts that exist at the end of the given block.
     *
     * @generated from protobuf rpc: GetAccountList(concordium.v2.BlockHashInput) returns (stream concordium.v2.AccountAddress);
     */
    getAccountList(input, options) {
        const method = this.methods[3],
            opt = this._transport.mergeOptions(options);
        return stackIntercept('serverStreaming', this._transport, method, opt, input);
    }
    /**
     * Get a list of all smart contract modules. The stream will end
     * when all modules that exist in the state at the end of the given
     * block have been returned.
     *
     * @generated from protobuf rpc: GetModuleList(concordium.v2.BlockHashInput) returns (stream concordium.v2.ModuleRef);
     */
    getModuleList(input, options) {
        const method = this.methods[4],
            opt = this._transport.mergeOptions(options);
        return stackIntercept('serverStreaming', this._transport, method, opt, input);
    }
    /**
     * Get a stream of ancestors for the provided block.
     * Starting with the provided block itself, moving backwards until no more
     * ancestors or the requested number of ancestors has been returned.
     *
     * @generated from protobuf rpc: GetAncestors(concordium.v2.AncestorsRequest) returns (stream concordium.v2.BlockHash);
     */
    getAncestors(input, options) {
        const method = this.methods[5],
            opt = this._transport.mergeOptions(options);
        return stackIntercept('serverStreaming', this._transport, method, opt, input);
    }
    /**
     * Get the source of a smart contract module.
     *
     * @generated from protobuf rpc: GetModuleSource(concordium.v2.ModuleSourceRequest) returns (concordium.v2.VersionedModuleSource);
     */
    getModuleSource(input, options) {
        const method = this.methods[6],
            opt = this._transport.mergeOptions(options);
        return stackIntercept('unary', this._transport, method, opt, input);
    }
    /**
     * Get a list of addresses for all smart contract instances. The stream
     * will end when all instances that exist in the state at the end of the
     * given block has been returned.
     *
     * @generated from protobuf rpc: GetInstanceList(concordium.v2.BlockHashInput) returns (stream concordium.v2.ContractAddress);
     */
    getInstanceList(input, options) {
        const method = this.methods[7],
            opt = this._transport.mergeOptions(options);
        return stackIntercept('serverStreaming', this._transport, method, opt, input);
    }
    /**
     * Get info about a smart contract instance as it appears at the end of the
     * given block.
     *
     * @generated from protobuf rpc: GetInstanceInfo(concordium.v2.InstanceInfoRequest) returns (concordium.v2.InstanceInfo);
     */
    getInstanceInfo(input, options) {
        const method = this.methods[8],
            opt = this._transport.mergeOptions(options);
        return stackIntercept('unary', this._transport, method, opt, input);
    }
    /**
     * Get the exact state of a specific contract instance, streamed as a list of
     * key-value pairs. The list is streamed in lexicographic order of keys.
     *
     * @generated from protobuf rpc: GetInstanceState(concordium.v2.InstanceInfoRequest) returns (stream concordium.v2.InstanceStateKVPair);
     */
    getInstanceState(input, options) {
        const method = this.methods[9],
            opt = this._transport.mergeOptions(options);
        return stackIntercept('serverStreaming', this._transport, method, opt, input);
    }
    /**
     * Get the value at a specific key of a contract state. In contrast to
     * `GetInstanceState` this is more efficient, but requires the user to know
     * the specific key to look for.
     *
     * @generated from protobuf rpc: InstanceStateLookup(concordium.v2.InstanceStateLookupRequest) returns (concordium.v2.InstanceStateValueAtKey);
     */
    instanceStateLookup(input, options) {
        const method = this.methods[10],
            opt = this._transport.mergeOptions(options);
        return stackIntercept('unary', this._transport, method, opt, input);
    }
    /**
     * Get the best guess as to what the next account sequence number should be.
     * If all account transactions are finalized then this information is reliable.
     * Otherwise this is the best guess, assuming all other transactions will be
     * committed to blocks and eventually finalized.
     *
     * @generated from protobuf rpc: GetNextAccountSequenceNumber(concordium.v2.AccountAddress) returns (concordium.v2.NextAccountSequenceNumber);
     */
    getNextAccountSequenceNumber(input, options) {
        const method = this.methods[11],
            opt = this._transport.mergeOptions(options);
        return stackIntercept('unary', this._transport, method, opt, input);
    }
    /**
     * Get information about the current state of consensus.
     *
     * @generated from protobuf rpc: GetConsensusInfo(concordium.v2.Empty) returns (concordium.v2.ConsensusInfo);
     */
    getConsensusInfo(input, options) {
        const method = this.methods[12],
            opt = this._transport.mergeOptions(options);
        return stackIntercept('unary', this._transport, method, opt, input);
    }
    /**
     * Get the status of and information about a specific block item (transaction).
     *
     * @generated from protobuf rpc: GetBlockItemStatus(concordium.v2.TransactionHash) returns (concordium.v2.BlockItemStatus);
     */
    getBlockItemStatus(input, options) {
        const method = this.methods[13],
            opt = this._transport.mergeOptions(options);
        return stackIntercept('unary', this._transport, method, opt, input);
    }
    /**
     * Get the cryptographic parameters in a given block.
     *
     * @generated from protobuf rpc: GetCryptographicParameters(concordium.v2.BlockHashInput) returns (concordium.v2.CryptographicParameters);
     */
    getCryptographicParameters(input, options) {
        const method = this.methods[14],
            opt = this._transport.mergeOptions(options);
        return stackIntercept('unary', this._transport, method, opt, input);
    }
    /**
     * Get information, such as height, timings, and transaction counts for the given block.
     *
     * @generated from protobuf rpc: GetBlockInfo(concordium.v2.BlockHashInput) returns (concordium.v2.BlockInfo);
     */
    getBlockInfo(input, options) {
        const method = this.methods[15],
            opt = this._transport.mergeOptions(options);
        return stackIntercept('unary', this._transport, method, opt, input);
    }
    /**
     * Get all the bakers at the end of the given block.
     *
     * @generated from protobuf rpc: GetBakerList(concordium.v2.BlockHashInput) returns (stream concordium.v2.BakerId);
     */
    getBakerList(input, options) {
        const method = this.methods[16],
            opt = this._transport.mergeOptions(options);
        return stackIntercept('serverStreaming', this._transport, method, opt, input);
    }
    /**
     * Get information about a given pool at the end of a given block.
     *
     * @generated from protobuf rpc: GetPoolInfo(concordium.v2.PoolInfoRequest) returns (concordium.v2.PoolInfoResponse);
     */
    getPoolInfo(input, options) {
        const method = this.methods[17],
            opt = this._transport.mergeOptions(options);
        return stackIntercept('unary', this._transport, method, opt, input);
    }
    /**
     * Get information about the passive delegators at the end of a given block.
     *
     * @generated from protobuf rpc: GetPassiveDelegationInfo(concordium.v2.BlockHashInput) returns (concordium.v2.PassiveDelegationInfo);
     */
    getPassiveDelegationInfo(input, options) {
        const method = this.methods[18],
            opt = this._transport.mergeOptions(options);
        return stackIntercept('unary', this._transport, method, opt, input);
    }
    /**
     * Get a list of live blocks at a given height.
     *
     * @generated from protobuf rpc: GetBlocksAtHeight(concordium.v2.BlocksAtHeightRequest) returns (concordium.v2.BlocksAtHeightResponse);
     */
    getBlocksAtHeight(input, options) {
        const method = this.methods[19],
            opt = this._transport.mergeOptions(options);
        return stackIntercept('unary', this._transport, method, opt, input);
    }
    /**
     * Get information about tokenomics at the end of a given block.
     *
     * @generated from protobuf rpc: GetTokenomicsInfo(concordium.v2.BlockHashInput) returns (concordium.v2.TokenomicsInfo);
     */
    getTokenomicsInfo(input, options) {
        const method = this.methods[20],
            opt = this._transport.mergeOptions(options);
        return stackIntercept('unary', this._transport, method, opt, input);
    }
    /**
     * Run the smart contract entrypoint in a given context and in the state at
     * the end of the given block.
     *
     * @generated from protobuf rpc: InvokeInstance(concordium.v2.InvokeInstanceRequest) returns (concordium.v2.InvokeInstanceResponse);
     */
    invokeInstance(input, options) {
        const method = this.methods[21],
            opt = this._transport.mergeOptions(options);
        return stackIntercept('unary', this._transport, method, opt, input);
    }
    /**
     * Get the registered delegators of a given pool at the end of a given block.
     * In contrast to the `GetPoolDelegatorsRewardPeriod` which returns delegators
     * that are fixed for the reward period of the block, this endpoint returns the
     * list of delegators that are registered in the block. Any changes to delegators
     * are immediately visible in this list.
     * The stream will end when all the delegators has been returned.
     *
     * @generated from protobuf rpc: GetPoolDelegators(concordium.v2.GetPoolDelegatorsRequest) returns (stream concordium.v2.DelegatorInfo);
     */
    getPoolDelegators(input, options) {
        const method = this.methods[22],
            opt = this._transport.mergeOptions(options);
        return stackIntercept('serverStreaming', this._transport, method, opt, input);
    }
    /**
     * Get the fixed delegators of a given pool for the reward period of the given block.
     * In contracts to the `GetPoolDelegators` which returns delegators registered
     * for the given block, this endpoint returns the fixed delegators contributing
     * stake in the reward period containing the given block.
     * The stream will end when all the delegators has been returned.
     *
     * @generated from protobuf rpc: GetPoolDelegatorsRewardPeriod(concordium.v2.GetPoolDelegatorsRequest) returns (stream concordium.v2.DelegatorRewardPeriodInfo);
     */
    getPoolDelegatorsRewardPeriod(input, options) {
        const method = this.methods[23],
            opt = this._transport.mergeOptions(options);
        return stackIntercept('serverStreaming', this._transport, method, opt, input);
    }
    /**
     * Get the registered passive delegators at the end of a given block.
     * In contrast to the `GetPassiveDelegatorsRewardPeriod` which returns delegators
     * that are fixed for the reward period of the block, this endpoint returns the
     * list of delegators that are registered in the block. Any changes to delegators
     * are immediately visible in this list.
     * The stream will end when all the delegators has been returned.
     *
     * @generated from protobuf rpc: GetPassiveDelegators(concordium.v2.BlockHashInput) returns (stream concordium.v2.DelegatorInfo);
     */
    getPassiveDelegators(input, options) {
        const method = this.methods[24],
            opt = this._transport.mergeOptions(options);
        return stackIntercept('serverStreaming', this._transport, method, opt, input);
    }
    /**
     * Get the fixed passive delegators for the reward period of the given block.
     * In contracts to the `GetPassiveDelegators` which returns delegators registered
     * for the given block, this endpoint returns the fixed delegators contributing
     * stake in the reward period containing the given block.
     * The stream will end when all the delegators has been returned.
     *
     * @generated from protobuf rpc: GetPassiveDelegatorsRewardPeriod(concordium.v2.BlockHashInput) returns (stream concordium.v2.DelegatorRewardPeriodInfo);
     */
    getPassiveDelegatorsRewardPeriod(input, options) {
        const method = this.methods[25],
            opt = this._transport.mergeOptions(options);
        return stackIntercept('serverStreaming', this._transport, method, opt, input);
    }
    /**
     * Get the current branches of blocks starting from and including the last finalized block.
     *
     * @generated from protobuf rpc: GetBranches(concordium.v2.Empty) returns (concordium.v2.Branch);
     */
    getBranches(input, options) {
        const method = this.methods[26],
            opt = this._transport.mergeOptions(options);
        return stackIntercept('unary', this._transport, method, opt, input);
    }
    /**
     * Get information related to the baker election for a particular block.
     *
     * @generated from protobuf rpc: GetElectionInfo(concordium.v2.BlockHashInput) returns (concordium.v2.ElectionInfo);
     */
    getElectionInfo(input, options) {
        const method = this.methods[27],
            opt = this._transport.mergeOptions(options);
        return stackIntercept('unary', this._transport, method, opt, input);
    }
    /**
     * Get the identity providers registered as of the end of a given block.
     * The stream will end when all the identity providers have been returned.
     *
     * @generated from protobuf rpc: GetIdentityProviders(concordium.v2.BlockHashInput) returns (stream concordium.v2.IpInfo);
     */
    getIdentityProviders(input, options) {
        const method = this.methods[28],
            opt = this._transport.mergeOptions(options);
        return stackIntercept('serverStreaming', this._transport, method, opt, input);
    }
    /**
     * Get the anonymity revokers registered as of the end of a given block.
     * The stream will end when all the anonymity revokers have been returned.
     *
     * @generated from protobuf rpc: GetAnonymityRevokers(concordium.v2.BlockHashInput) returns (stream concordium.v2.ArInfo);
     */
    getAnonymityRevokers(input, options) {
        const method = this.methods[29],
            opt = this._transport.mergeOptions(options);
        return stackIntercept('serverStreaming', this._transport, method, opt, input);
    }
    /**
     * Get a list of non-finalized transaction hashes for a given account. This
     * endpoint is not expected to return a large amount of data in most cases,
     * but in bad network condtions it might. The stream will end when all the
     * non-finalized transaction hashes have been returned.
     *
     * @generated from protobuf rpc: GetAccountNonFinalizedTransactions(concordium.v2.AccountAddress) returns (stream concordium.v2.TransactionHash);
     */
    getAccountNonFinalizedTransactions(input, options) {
        const method = this.methods[30],
            opt = this._transport.mergeOptions(options);
        return stackIntercept('serverStreaming', this._transport, method, opt, input);
    }
    /**
     * Get a list of transaction events in a given block.
     * The stream will end when all the transaction events for a given block have been returned.
     *
     * @generated from protobuf rpc: GetBlockTransactionEvents(concordium.v2.BlockHashInput) returns (stream concordium.v2.BlockItemSummary);
     */
    getBlockTransactionEvents(input, options) {
        const method = this.methods[31],
            opt = this._transport.mergeOptions(options);
        return stackIntercept('serverStreaming', this._transport, method, opt, input);
    }
    /**
     * Get a list of special events in a given block. These are events generated
     * by the protocol, such as minting and reward payouts. They are not directly
     * generated by any transaction. The stream will end when all the special
     * events for a given block have been returned.
     *
     * @generated from protobuf rpc: GetBlockSpecialEvents(concordium.v2.BlockHashInput) returns (stream concordium.v2.BlockSpecialEvent);
     */
    getBlockSpecialEvents(input, options) {
        const method = this.methods[32],
            opt = this._transport.mergeOptions(options);
        return stackIntercept('serverStreaming', this._transport, method, opt, input);
    }
    /**
     * Get the pending updates to chain parameters at the end of a given block.
     * The stream will end when all the pending updates for a given block have been returned.
     *
     * @generated from protobuf rpc: GetBlockPendingUpdates(concordium.v2.BlockHashInput) returns (stream concordium.v2.PendingUpdate);
     */
    getBlockPendingUpdates(input, options) {
        const method = this.methods[33],
            opt = this._transport.mergeOptions(options);
        return stackIntercept('serverStreaming', this._transport, method, opt, input);
    }
    /**
     * Get next available sequence numbers for updating chain parameters after a given block.
     *
     * @generated from protobuf rpc: GetNextUpdateSequenceNumbers(concordium.v2.BlockHashInput) returns (concordium.v2.NextUpdateSequenceNumbers);
     */
    getNextUpdateSequenceNumbers(input, options) {
        const method = this.methods[34],
            opt = this._transport.mergeOptions(options);
        return stackIntercept('unary', this._transport, method, opt, input);
    }
    /**
     * Get the projected earliest time at which a particular baker will be required to bake a block.
     * If the current consensus version is 0, this returns the status 'Unavailable', as the endpoint
     * is only supported by consensus version 1.
     *
     * If the baker is not a baker for the current reward period, this returns a timestamp at the
     * start of the next reward period. If the baker is a baker for the current reward period, the
     * earliest win time is projected from the current round forward, assuming that each round after
     * the last finalized round will take the minimum block time. (If blocks take longer, or timeouts
     * occur, the actual time may be later, and the reported time in subsequent queries may reflect
     * this.) At the end of an epoch (or if the baker is not projected to bake before the end of the
     * epoch) the earliest win time for a (current) baker will be projected as the start of the next
     * epoch. This is because the seed for the leader election is updated at the epoch boundary, and
     * so the winners cannot be predicted beyond that. Note that in some circumstances the returned
     * timestamp can be in the past, especially at the end of an epoch.
     *
     * @generated from protobuf rpc: GetBakerEarliestWinTime(concordium.v2.BakerId) returns (concordium.v2.Timestamp);
     */
    getBakerEarliestWinTime(input, options) {
        const method = this.methods[35],
            opt = this._transport.mergeOptions(options);
        return stackIntercept('unary', this._transport, method, opt, input);
    }
    /**
     * Shut down the node.
     * Return a GRPC error if the shutdown failed.
     *
     * @generated from protobuf rpc: Shutdown(concordium.v2.Empty) returns (concordium.v2.Empty);
     */
    shutdown(input, options) {
        const method = this.methods[36],
            opt = this._transport.mergeOptions(options);
        return stackIntercept('unary', this._transport, method, opt, input);
    }
    /**
     * Suggest to a peer to connect to the submitted peer details.
     * This, if successful, adds the peer to the list of given addresses.
     * Otherwise return a GRPC error.
     * Note. The peer might not be connected to instantly, in that case
     * the node will try to establish the connection in near future. This
     * function returns a GRPC status 'Ok' in this case.
     *
     * @generated from protobuf rpc: PeerConnect(concordium.v2.IpSocketAddress) returns (concordium.v2.Empty);
     */
    peerConnect(input, options) {
        const method = this.methods[37],
            opt = this._transport.mergeOptions(options);
        return stackIntercept('unary', this._transport, method, opt, input);
    }
    /**
     * Disconnect from the peer and remove them from the given addresses list
     * if they are on it. Return if the request was processed successfully.
     * Otherwise return a GRPC error.
     *
     * @generated from protobuf rpc: PeerDisconnect(concordium.v2.IpSocketAddress) returns (concordium.v2.Empty);
     */
    peerDisconnect(input, options) {
        const method = this.methods[38],
            opt = this._transport.mergeOptions(options);
        return stackIntercept('unary', this._transport, method, opt, input);
    }
    /**
     * Get a list of banned peers.
     *
     * @generated from protobuf rpc: GetBannedPeers(concordium.v2.Empty) returns (concordium.v2.BannedPeers);
     */
    getBannedPeers(input, options) {
        const method = this.methods[39],
            opt = this._transport.mergeOptions(options);
        return stackIntercept('unary', this._transport, method, opt, input);
    }
    /**
     * Ban the given peer.
     * Returns a GRPC error if the action failed.
     *
     * @generated from protobuf rpc: BanPeer(concordium.v2.PeerToBan) returns (concordium.v2.Empty);
     */
    banPeer(input, options) {
        const method = this.methods[40],
            opt = this._transport.mergeOptions(options);
        return stackIntercept('unary', this._transport, method, opt, input);
    }
    /**
     * Unban the banned peer.
     * Returns a GRPC error if the action failed.
     *
     * @generated from protobuf rpc: UnbanPeer(concordium.v2.BannedPeer) returns (concordium.v2.Empty);
     */
    unbanPeer(input, options) {
        const method = this.methods[41],
            opt = this._transport.mergeOptions(options);
        return stackIntercept('unary', this._transport, method, opt, input);
    }
    /**
     * Start dumping packages into the specified file.
     * Only enabled if the node was built with the `network_dump` feature.
     * Returns a GRPC error if the network dump failed to start.
     *
     * @generated from protobuf rpc: DumpStart(concordium.v2.DumpRequest) returns (concordium.v2.Empty);
     */
    dumpStart(input, options) {
        const method = this.methods[42],
            opt = this._transport.mergeOptions(options);
        return stackIntercept('unary', this._transport, method, opt, input);
    }
    /**
     * Stop dumping packages.
     * Only enabled if the node was built with the `network_dump` feature.
     * Returns a GRPC error if the network dump failed to be stopped.
     *
     * @generated from protobuf rpc: DumpStop(concordium.v2.Empty) returns (concordium.v2.Empty);
     */
    dumpStop(input, options) {
        const method = this.methods[43],
            opt = this._transport.mergeOptions(options);
        return stackIntercept('unary', this._transport, method, opt, input);
    }
    /**
     * / Get a list of the peers that the node is connected to
     * / and assoicated network related information for each peer.
     *
     * @generated from protobuf rpc: GetPeersInfo(concordium.v2.Empty) returns (concordium.v2.PeersInfo);
     */
    getPeersInfo(input, options) {
        const method = this.methods[44],
            opt = this._transport.mergeOptions(options);
        return stackIntercept('unary', this._transport, method, opt, input);
    }
    /**
     * Get information about the node.
     * The `NodeInfo` includes information of
     * * Meta information such as the, version of the node, type of the node, uptime and the local time of the node.
     * * NetworkInfo which yields data such as the node id, packets sent/received,
     *   average bytes per second sent/received.
     * * ConsensusInfo. The `ConsensusInfo` returned depends on if the node supports
     *   the protocol on chain and whether the node is configured as a baker or not.
     *
     * @generated from protobuf rpc: GetNodeInfo(concordium.v2.Empty) returns (concordium.v2.NodeInfo);
     */
    getNodeInfo(input, options) {
        const method = this.methods[45],
            opt = this._transport.mergeOptions(options);
        return stackIntercept('unary', this._transport, method, opt, input);
    }
    /**
     * Send a block item. A block item is either an `AccountTransaction`, which is
     * a transaction signed and paid for by an account, a `CredentialDeployment`,
     * which creates a new account, or `UpdateInstruction`, which is an
     * instruction to change some parameters of the chain. Update instructions can
     * only be sent by the governance committee.
     *
     * Returns a hash of the block item, which can be used with
     * `GetBlockItemStatus`.
     *
     * @generated from protobuf rpc: SendBlockItem(concordium.v2.SendBlockItemRequest) returns (concordium.v2.TransactionHash);
     */
    sendBlockItem(input, options) {
        const method = this.methods[46],
            opt = this._transport.mergeOptions(options);
        return stackIntercept('unary', this._transport, method, opt, input);
    }
    /**
     * Get the hash to be signed for an account transaction. The hash returned
     * should be signed and the signatures included as an
     * AccountTransactionSignature when calling `SendBlockItem`. This is provided as
     * a convenience to support cases where the right SDK is not available for
     * interacting with the node. If an SDK is available then it is strongly
     * recommended to compute this hash off-line using it. That reduces the trust
     * in the node, removes networking failure modes, and will perform better.
     *
     * @generated from protobuf rpc: GetAccountTransactionSignHash(concordium.v2.PreAccountTransaction) returns (concordium.v2.AccountTransactionSignHash);
     */
    getAccountTransactionSignHash(input, options) {
        const method = this.methods[47],
            opt = this._transport.mergeOptions(options);
        return stackIntercept('unary', this._transport, method, opt, input);
    }
    /**
     * Get the values of chain parameters in effect in the given block.
     *
     * @generated from protobuf rpc: GetBlockChainParameters(concordium.v2.BlockHashInput) returns (concordium.v2.ChainParameters);
     */
    getBlockChainParameters(input, options) {
        const method = this.methods[48],
            opt = this._transport.mergeOptions(options);
        return stackIntercept('unary', this._transport, method, opt, input);
    }
    /**
     * Get the summary of the finalization data in a given block.
     *
     * @generated from protobuf rpc: GetBlockFinalizationSummary(concordium.v2.BlockHashInput) returns (concordium.v2.BlockFinalizationSummary);
     */
    getBlockFinalizationSummary(input, options) {
        const method = this.methods[49],
            opt = this._transport.mergeOptions(options);
        return stackIntercept('unary', this._transport, method, opt, input);
    }
    /**
     * Get the items of a block.
     *
     * @generated from protobuf rpc: GetBlockItems(concordium.v2.BlockHashInput) returns (stream concordium.v2.BlockItem);
     */
    getBlockItems(input, options) {
        const method = this.methods[50],
            opt = this._transport.mergeOptions(options);
        return stackIntercept('serverStreaming', this._transport, method, opt, input);
    }
    /**
     * Get all bakers in the reward period of a block.
     * This endpoint is only supported for protocol version 6 and onwards.
     * If the protocol does not support the endpoint then an  'IllegalArgument' error is returned.
     *
     * @generated from protobuf rpc: GetBakersRewardPeriod(concordium.v2.BlockHashInput) returns (stream concordium.v2.BakerRewardPeriodInfo);
     */
    getBakersRewardPeriod(input, options) {
        const method = this.methods[51],
            opt = this._transport.mergeOptions(options);
        return stackIntercept('serverStreaming', this._transport, method, opt, input);
    }
    /**
     * For a non-genesis block, this returns the quorum certificate, a timeout
     * certificate (if present) and epoch finalization entry (if present).
     * Note that, if the block being pointed to is not a product of ConcordiumBFT,
     * then the response will be a grpc error (invalid argument).
     * If the endpoint is not enabled by the node, then an 'unimplemented' error
     * will be returned.
     *
     * @generated from protobuf rpc: GetBlockCertificates(concordium.v2.BlockHashInput) returns (concordium.v2.BlockCertificates);
     */
    getBlockCertificates(input, options) {
        const method = this.methods[52],
            opt = this._transport.mergeOptions(options);
        return stackIntercept('unary', this._transport, method, opt, input);
    }
    /**
     * Get the list of bakers that won the lottery in a particular historical epoch (i.e. the
     * last finalized block is in a later epoch). This lists the winners for each round in the
     * epoch, starting from the round after the last block in the previous epoch, running to
     * the round before the first block in the next epoch. It also indicates if a block in each
     * round was included in the finalized chain.
     *
     * The following error cases are possible:
     *  * `NOT_FOUND` if the query specifies an unknown block.
     *  * `UNAVAILABLE` if the query is for an epoch that is not finalized in the current genesis
     * /    index, or is for a future genesis index.
     *  * `INVALID_ARGUMENT` if the query is for an epoch that is not finalized for a past genesis
     *    index.
     *  * `INVALID_ARGUMENT` if the query is for a genesis index at consensus version 0.
     *  * `INVALID_ARGUMENT` if the input `EpochRequest` is malformed.
     *  * `UNIMPLEMENTED` if the endpoint is disabled on the node.
     *
     * @generated from protobuf rpc: GetWinningBakersEpoch(concordium.v2.EpochRequest) returns (stream concordium.v2.WinningBaker);
     */
    getWinningBakersEpoch(input, options) {
        const method = this.methods[53],
            opt = this._transport.mergeOptions(options);
        return stackIntercept('serverStreaming', this._transport, method, opt, input);
    }
    /**
     * Get the block hash of the first finalized block in a specified epoch.
     *
     * The following error cases are possible:
     *  * `NOT_FOUND` if the query specifies an unknown block.
     *  * `UNAVAILABLE` if the query is for an epoch that is not finalized in the current genesis
     *    index, or is for a future genesis index.
     *  * `INVALID_ARGUMENT` if the query is for an epoch with no finalized blocks for a past genesis
     *    index.
     *  * `INVALID_ARGUMENT` if the input `EpochRequest` is malformed.
     *  * `UNIMPLEMENTED` if the endpoint is disabled on the node.
     *
     * @generated from protobuf rpc: GetFirstBlockEpoch(concordium.v2.EpochRequest) returns (concordium.v2.BlockHash);
     */
    getFirstBlockEpoch(input, options) {
        const method = this.methods[54],
            opt = this._transport.mergeOptions(options);
        return stackIntercept('unary', this._transport, method, opt, input);
    }
    /**
     * Dry run a series of transactions and operations on a state derived from a specified block.
     * The server should send a single `DryRunResponse` for each `DryRunRequest` received, unless
     * the call fails with an error status code. If a request produces a `DryRunErrorResponse`, then
     * the server will still process subsequent requests, just as if the request causing the error
     * did not happen.
     *
     * The first request should be `load_block_at_state` to determine the block state that will be
     * used for the dry run.
     *
     * The server associates each request with an energy cost, and limits the total energy that may
     * be expended in a single invocation of `DryRun`. This limit is reported as `quota` in the
     * initial metadata returned by the server. If executing an operation exceeds the limit,
     * the server terminates the session with `RESOURCE_EXHAUSTED`.
     *
     * The server also imposes a timeout for a dry-run session to complete. The server reports
     * the timeout duration in milliseconds in the initial metadata field `timeout`. If the session
     * is not completed before the timeout elapses, the server terminates the session with
     * `DEADLINE_EXCEEDED`.
     *
     * The following error cases are possible:
     *  * `INVALID_ARGUMENT` if any `DryRunRequest` is malformed.
     *  * `RESOURCE_EXHAUSTED` if the energy quota is exceeded.
     *  * `DEADLINE_EXCEEDED` if the session does not complete before the server-imposed timeout.
     *  * `RESOURCE_EXHAUSTED` if the server is not currently accepting new `DryRun` sessions.
     *    (The server may impose a limit on the number of concurrent sessions.)
     *  * `INTERNAL` if an interal server error occurs. This should not happen, and likely indicates
     *    a bug.
     *  * `UNIMPLEMENTED` if the endpoint is disabled on the node.
     *
     * @generated from protobuf rpc: DryRun(stream concordium.v2.DryRunRequest) returns (stream concordium.v2.DryRunResponse);
     */
    dryRun(options) {
        const method = this.methods[55],
            opt = this._transport.mergeOptions(options);
        return stackIntercept('duplex', this._transport, method, opt);
    }
};

// node_modules/@concordium/web-sdk/lib/esm/grpc-api/v2/concordium/health.js
var NodeHealthRequest$Type = class extends MessageType {
    constructor() {
        super('concordium.health.NodeHealthRequest', []);
    }
};
var NodeHealthRequest = new NodeHealthRequest$Type();
var NodeHealthResponse$Type = class extends MessageType {
    constructor() {
        super('concordium.health.NodeHealthResponse', []);
    }
};
var NodeHealthResponse = new NodeHealthResponse$Type();
var Health = new ServiceType('concordium.health.Health', [
    { name: 'Check', options: {}, I: NodeHealthRequest, O: NodeHealthResponse },
]);

// node_modules/@concordium/web-sdk/lib/esm/grpc-api/v2/concordium/health.client.js
var HealthClient = class {
    constructor(_transport) {
        this._transport = _transport;
        this.typeName = Health.typeName;
        this.methods = Health.methods;
        this.options = Health.options;
    }
    /**
     * Check the health of the node. By necessity this involves a number of
     * heuristics since in a distributed network we have to rely on the local
     * information only and we don't have authoritative data on, e.g., last
     * finalized block.
     *
     * In particular, a node that is not caught up to the head of the chain is not
     * healthy.
     *
     * If possible the client should use other queries to get a more fine-grained
     * understanding of the node health. However this endpoint should provide a
     * reasonable default and is usable in cases where an automatic check is
     * performed that does not allow for configuration, such as in load-balancers.
     *
     * @generated from protobuf rpc: Check(concordium.health.NodeHealthRequest) returns (concordium.health.NodeHealthResponse);
     */
    check(input, options) {
        const method = this.methods[0],
            opt = this._transport.mergeOptions(options);
        return stackIntercept('unary', this._transport, method, opt, input);
    }
};

// node_modules/@concordium/web-sdk/lib/esm/grpc/translation.js
var import_buffer25 = __toESM(require_buffer(), 1);
var import_bs58check2 = __toESM(require_bs58check(), 1);
function unwrapToHex(bytes2) {
    return import_buffer25.Buffer.from(unwrap(bytes2)).toString('hex');
}
function unwrapValToHex(x) {
    return unwrapToHex(unwrap(x).value);
}
function unwrapToBase58(address) {
    return import_bs58check2.default.encode(
        import_buffer25.Buffer.concat([import_buffer25.Buffer.of(1), unwrap(address == null ? void 0 : address.value)])
    );
}
function trRelease(release) {
    return {
        timestamp: trTimestamp(release.timestamp),
        amount: fromProto2(unwrap(release.amount)),
        transactions: release.transactions.map(unwrapValToHex),
    };
}
function trNewRelease(release) {
    return {
        timestamp: trTimestamp(release.timestamp),
        amount: fromProto2(unwrap(release.amount)),
    };
}
function trDate(ym) {
    return String(ym.year) + String(ym.month).padStart(2, '0');
}
function trAttKey(attributeKey) {
    return AttributesKeys[attributeKey];
}
function trCommits(cmm) {
    return {
        cmmPrf: unwrapValToHex(cmm.prf),
        cmmCredCounter: unwrapValToHex(cmm.credCounter),
        cmmIdCredSecSharingCoeff: cmm.idCredSecSharingCoeff.map(unwrapValToHex),
        cmmAttributes: mapRecord(cmm.attributes, unwrapValToHex, trAttKey),
        cmmMaxAccounts: unwrapValToHex(cmm.maxAccounts),
    };
}
function trVerifyKey(verifyKey) {
    if (verifyKey.key.oneofKind === 'ed25519Key') {
        return {
            schemeId: 'Ed25519',
            verifyKey: unwrapToHex(verifyKey.key.ed25519Key),
        };
    } else {
        throw Error('AccountVerifyKey was expected to be of type "ed25519Key", but found' + verifyKey.key.oneofKind);
    }
}
function trCredKeys(credKeys) {
    var _a;
    return {
        threshold: unwrap((_a = credKeys.threshold) == null ? void 0 : _a.value),
        keys: mapRecord(credKeys.keys, trVerifyKey),
    };
}
function trChainArData(chainArData) {
    return {
        encIdCredPubShare: unwrapToHex(chainArData.encIdCredPubShare),
    };
}
function trCommissionRates(rates) {
    return {
        transactionCommission: trAmountFraction(rates == null ? void 0 : rates.transaction),
        bakingCommission: trAmountFraction(rates == null ? void 0 : rates.baking),
        finalizationCommission: trAmountFraction(rates == null ? void 0 : rates.finalization),
    };
}
function trCred(cred) {
    var _a, _b, _c, _d, _e;
    const crd = cred.credentialValues;
    if (crd === void 0) {
        throw Error('CredentialValues were undefined.');
    }
    const isNormal = crd.oneofKind === 'normal';
    const credVals = isNormal ? crd.normal : crd.initial;
    const policy = {
        validTo: trDate(unwrap((_a = credVals.policy) == null ? void 0 : _a.validTo)),
        createdAt: trDate(unwrap((_b = credVals.policy) == null ? void 0 : _b.createdAt)),
        revealedAttributes: mapRecord((_c = credVals.policy) == null ? void 0 : _c.attributes, unwrapToHex, trAttKey),
    };
    const commonValues = {
        ipIdentity: unwrap((_d = credVals.ipId) == null ? void 0 : _d.value),
        credentialPublicKeys: trCredKeys(unwrap(credVals.keys)),
        policy,
    };
    let value;
    if (isNormal) {
        const deploymentValues = {
            ...commonValues,
            credId: unwrapValToHex(credVals.credId),
            revocationThreshold: unwrap((_e = credVals.arThreshold) == null ? void 0 : _e.value),
            arData: mapRecord(credVals.arData, trChainArData, String),
            commitments: trCommits(unwrap(credVals.commitments)),
        };
        value = {
            type: 'normal',
            contents: deploymentValues,
        };
    } else {
        const deploymentValues = {
            ...commonValues,
            regId: unwrapValToHex(credVals.credId),
        };
        value = {
            type: 'initial',
            contents: deploymentValues,
        };
    }
    return {
        v: 0,
        value,
    };
}
function trDelegatorTarget(target) {
    if (target.target.oneofKind === 'passive') {
        return {
            delegateType: DelegationTargetType.PassiveDelegation,
        };
    } else if (target.target.oneofKind === 'baker') {
        return {
            delegateType: DelegationTargetType.Baker,
            bakerId: target.target.baker.value,
        };
    } else {
        throw Error(
            'DelegatorTarget expected to be of type "passive" or "baker", but found ' + target.target.oneofKind
        );
    }
}
function trTimestamp(timestamp) {
    return new Date(Number(unwrap(timestamp == null ? void 0 : timestamp.value)));
}
function trPendingChange(pendingChange) {
    var _a;
    const change = unwrap(pendingChange == null ? void 0 : pendingChange.change);
    if (change.oneofKind === 'reduce') {
        return {
            newStake: unwrap((_a = change.reduce.newStake) == null ? void 0 : _a.value),
            effectiveTime: trTimestamp(change.reduce.effectiveTime),
            change: StakePendingChangeType.ReduceStake,
        };
    } else if (change.oneofKind === 'remove') {
        return {
            effectiveTime: trTimestamp(change.remove),
            change: StakePendingChangeType.RemoveStake,
        };
    } else {
        throw Error('PendingChange expected to be of type "reduce" or "remove", but found ' + change.oneofKind);
    }
}
function trDelegator(deleg) {
    return {
        restakeEarnings: deleg.restakeEarnings,
        stakedAmount: fromProto2(unwrap(deleg.stakedAmount)),
        delegationTarget: trDelegatorTarget(unwrap(deleg.target)),
        // Set the following value if deleg.pendingChange is set to true
        ...(deleg.pendingChange && {
            pendingChange: trPendingChange(deleg.pendingChange),
        }),
    };
}
function trAmountFraction(amount) {
    return unwrap(amount == null ? void 0 : amount.partsPerHundredThousand) / 1e5;
}
function trOpenStatus(openStatus) {
    switch (unwrap(openStatus)) {
        case OpenStatus2.OPEN_FOR_ALL:
            return OpenStatusText.OpenForAll;
        case OpenStatus2.CLOSED_FOR_NEW:
            return OpenStatusText.ClosedForNew;
        case OpenStatus2.CLOSED_FOR_ALL:
            return OpenStatusText.ClosedForAll;
    }
}
function trBaker(baker) {
    var _a, _b, _c, _d, _e;
    const bakerInfo2 = baker.bakerInfo;
    const v0 = {
        version: 0,
        restakeEarnings: baker.restakeEarnings,
        bakerId: unwrap((_a = bakerInfo2 == null ? void 0 : bakerInfo2.bakerId) == null ? void 0 : _a.value),
        bakerAggregationVerifyKey: unwrapValToHex(bakerInfo2 == null ? void 0 : bakerInfo2.aggregationKey),
        bakerElectionVerifyKey: unwrapValToHex((_b = baker.bakerInfo) == null ? void 0 : _b.electionKey),
        bakerSignatureVerifyKey: unwrapValToHex(bakerInfo2 == null ? void 0 : bakerInfo2.signatureKey),
        stakedAmount: fromProto2(unwrap(baker.stakedAmount)),
        // Set the following value if baker.pendingChange is set to true
        ...(baker.pendingChange && {
            pendingChange: trPendingChange(baker.pendingChange),
        }),
    };
    if (baker.poolInfo === void 0) {
        return v0;
    }
    const bakerPoolInfo2 = {
        openStatus: trOpenStatus((_c = baker.poolInfo) == null ? void 0 : _c.openStatus),
        metadataUrl: unwrap((_d = baker.poolInfo) == null ? void 0 : _d.url),
        commissionRates: trCommissionRates((_e = baker.poolInfo) == null ? void 0 : _e.commissionRates),
    };
    return {
        ...v0,
        version: 1,
        bakerPoolInfo: bakerPoolInfo2,
    };
}
function trHigherLevelKeysUpdate(update) {
    var _a;
    return {
        keys: update.keys.map(trUpdatePublicKey),
        threshold: unwrap((_a = update.threshold) == null ? void 0 : _a.value),
    };
}
function translateChainParametersCommon(params) {
    var _a, _b, _c;
    return {
        euroPerEnergy: unwrap((_a = params.euroPerEnergy) == null ? void 0 : _a.value),
        microGTUPerEuro: unwrap((_b = params.microCcdPerEuro) == null ? void 0 : _b.value),
        accountCreationLimit: unwrap((_c = params.accountCreationLimit) == null ? void 0 : _c.value),
        foundationAccount: fromProto(unwrap(params.foundationAccount)),
        level1Keys: trHigherLevelKeysUpdate(unwrap(params.level1Keys)),
        rootKeys: trHigherLevelKeysUpdate(unwrap(params.rootKeys)),
    };
}
function translateCommissionRange(range) {
    return {
        min: trAmountFraction(range == null ? void 0 : range.min),
        max: trAmountFraction(range == null ? void 0 : range.max),
    };
}
function translateRewardParametersCommon(params) {
    const feeDistribution = params.transactionFeeDistribution;
    return {
        transactionFeeDistribution: {
            baker: trAmountFraction(feeDistribution == null ? void 0 : feeDistribution.baker),
            gasAccount: trAmountFraction(feeDistribution == null ? void 0 : feeDistribution.gasAccount),
        },
    };
}
function transPoolPendingChange(change) {
    var _a;
    switch ((_a = change == null ? void 0 : change.change) == null ? void 0 : _a.oneofKind) {
        case 'reduce': {
            return {
                pendingChangeType: BakerPoolPendingChangeType.ReduceBakerCapital,
                // TODO ensure units are aligned
                effectiveTime: trTimestamp(change.change.reduce.effectiveTime),
                bakerEquityCapital: fromProto2(unwrap(change.change.reduce.reducedEquityCapital)),
            };
        }
        case 'remove': {
            return {
                pendingChangeType: BakerPoolPendingChangeType.RemovePool,
                effectiveTime: trTimestamp(change.change.remove.effectiveTime),
            };
        }
        default:
            return {
                pendingChangeType: BakerPoolPendingChangeType.NoChange,
            };
    }
}
function transPoolInfo(info) {
    return {
        openStatus: trOpenStatus(info.openStatus),
        metadataUrl: info.url,
        commissionRates: trCommissionRates(info.commissionRates),
    };
}
function transPaydayStatus(status) {
    if (!status) {
        return null;
    }
    return {
        blocksBaked: status.blocksBaked,
        finalizationLive: status.finalizationLive,
        transactionFeesEarned: fromProto2(unwrap(status.transactionFeesEarned)),
        effectiveStake: fromProto2(unwrap(status.effectiveStake)),
        lotteryPower: status.lotteryPower,
        bakerEquityCapital: fromProto2(unwrap(status.bakerEquityCapital)),
        delegatedCapital: fromProto2(unwrap(status.delegatedCapital)),
        commissionRates: trCommissionRates(status.commissionRates),
    };
}
function accountInfo(acc) {
    var _a, _b, _c, _d, _e, _f, _g, _h, _i, _j, _k, _l;
    const aggAmount =
        (_b = (_a = acc.encryptedBalance) == null ? void 0 : _a.aggregatedAmount) == null ? void 0 : _b.value;
    const numAggregated = (_c = acc.encryptedBalance) == null ? void 0 : _c.numAggregated;
    const encryptedAmount = {
        selfAmount: unwrapValToHex((_d = acc.encryptedBalance) == null ? void 0 : _d.selfAmount),
        startIndex: unwrap((_e = acc.encryptedBalance) == null ? void 0 : _e.startIndex),
        incomingAmounts: unwrap((_f = acc.encryptedBalance) == null ? void 0 : _f.incomingAmounts).map(unwrapValToHex),
        // Set the following values if they are not undefined
        ...(numAggregated && { numAggregated }),
        ...(aggAmount && { aggregatedAmount: unwrapToHex(aggAmount) }),
    };
    const releaseSchedule = {
        total: fromProto2(unwrap((_g = acc.schedule) == null ? void 0 : _g.total)),
        schedule: unwrap((_h = acc.schedule) == null ? void 0 : _h.schedules).map(trRelease),
    };
    const accInfoCommon = {
        type: AccountInfoType.Simple,
        accountAddress: fromProto(unwrap(acc.address)),
        accountNonce: fromProto7(unwrap(acc.sequenceNumber)),
        accountAmount: fromProto2(unwrap(acc.amount)),
        accountIndex: unwrap((_i = acc.index) == null ? void 0 : _i.value),
        accountThreshold: unwrap((_j = acc.threshold) == null ? void 0 : _j.value),
        accountEncryptionKey: unwrapValToHex(acc.encryptionKey),
        accountEncryptedAmount: encryptedAmount,
        accountReleaseSchedule: releaseSchedule,
        accountCredentials: mapRecord(acc.creds, trCred),
    };
    if (((_k = acc.stake) == null ? void 0 : _k.stakingInfo.oneofKind) === 'delegator') {
        return {
            ...accInfoCommon,
            type: AccountInfoType.Delegator,
            accountDelegation: trDelegator(acc.stake.stakingInfo.delegator),
        };
    } else if (((_l = acc.stake) == null ? void 0 : _l.stakingInfo.oneofKind) === 'baker') {
        return {
            ...accInfoCommon,
            type: AccountInfoType.Baker,
            accountBaker: trBaker(acc.stake.stakingInfo.baker),
        };
    } else {
        return accInfoCommon;
    }
}
function nextAccountSequenceNumber(nasn) {
    return {
        nonce: fromProto7(unwrap(nasn.sequenceNumber)),
        allFinal: nasn.allFinal,
    };
}
function cryptographicParameters(cp) {
    return {
        onChainCommitmentKey: unwrapToHex(cp.onChainCommitmentKey),
        bulletproofGenerators: unwrapToHex(cp.bulletproofGenerators),
        genesisString: cp.genesisString,
    };
}
function trChainParametersV0(v0) {
    var _a, _b, _c, _d, _e, _f, _g, _h, _i;
    const common = translateChainParametersCommon(v0);
    const commonRewardParameters = translateRewardParametersCommon(v0);
    return {
        ...common,
        version: 0,
        level2Keys: trAuthorizationsV0(unwrap(v0.level2Keys)),
        electionDifficulty: trAmountFraction((_a = v0.electionDifficulty) == null ? void 0 : _a.value),
        bakerCooldownEpochs: unwrap((_b = v0.bakerCooldownEpochs) == null ? void 0 : _b.value),
        minimumThresholdForBaking: fromProto2(unwrap(v0.minimumThresholdForBaking)),
        rewardParameters: {
            version: 0,
            ...commonRewardParameters,
            gASRewards: {
                version: 0,
                baker: trAmountFraction((_c = v0.gasRewards) == null ? void 0 : _c.baker),
                finalizationProof: trAmountFraction((_d = v0.gasRewards) == null ? void 0 : _d.finalizationProof),
                accountCreation: trAmountFraction((_e = v0.gasRewards) == null ? void 0 : _e.accountCreation),
                chainUpdate: trAmountFraction((_f = v0.gasRewards) == null ? void 0 : _f.chainUpdate),
            },
            mintDistribution: {
                version: 0,
                bakingReward: trAmountFraction((_g = v0.mintDistribution) == null ? void 0 : _g.bakingReward),
                finalizationReward: trAmountFraction(
                    (_h = v0.mintDistribution) == null ? void 0 : _h.finalizationReward
                ),
                mintPerSlot: trMintRate((_i = v0.mintDistribution) == null ? void 0 : _i.mintPerSlot),
            },
        },
    };
}
function trChainParametersV1(params) {
    var _a,
        _b,
        _c,
        _d,
        _e,
        _f,
        _g,
        _h,
        _i,
        _j,
        _k,
        _l,
        _m,
        _n,
        _o,
        _p,
        _q,
        _r,
        _s,
        _t,
        _u,
        _v,
        _w,
        _x,
        _y,
        _z,
        _A,
        _B,
        _C;
    const common = translateChainParametersCommon(params);
    const commonRewardParameters = translateRewardParametersCommon(params);
    return {
        ...common,
        version: 1,
        level2Keys: trAuthorizationsV1(unwrap(params.level2Keys)),
        electionDifficulty: trAmountFraction((_a = params.electionDifficulty) == null ? void 0 : _a.value),
        rewardPeriodLength: unwrap(
            (_d =
                (_c = (_b = params.timeParameters) == null ? void 0 : _b.rewardPeriodLength) == null
                    ? void 0
                    : _c.value) == null
                ? void 0
                : _d.value
        ),
        mintPerPayday: trMintRate((_e = params.timeParameters) == null ? void 0 : _e.mintPerPayday),
        delegatorCooldown: unwrap(
            (_g = (_f = params.cooldownParameters) == null ? void 0 : _f.delegatorCooldown) == null ? void 0 : _g.value
        ),
        poolOwnerCooldown: unwrap(
            (_i = (_h = params.cooldownParameters) == null ? void 0 : _h.poolOwnerCooldown) == null ? void 0 : _i.value
        ),
        passiveFinalizationCommission: trAmountFraction(
            (_j = params.poolParameters) == null ? void 0 : _j.passiveFinalizationCommission
        ),
        passiveBakingCommission: trAmountFraction(
            (_k = params.poolParameters) == null ? void 0 : _k.passiveBakingCommission
        ),
        passiveTransactionCommission: trAmountFraction(
            (_l = params.poolParameters) == null ? void 0 : _l.passiveTransactionCommission
        ),
        finalizationCommissionRange: translateCommissionRange(
            (_n = (_m = params.poolParameters) == null ? void 0 : _m.commissionBounds) == null
                ? void 0
                : _n.finalization
        ),
        bakingCommissionRange: translateCommissionRange(
            (_p = (_o = params.poolParameters) == null ? void 0 : _o.commissionBounds) == null ? void 0 : _p.baking
        ),
        transactionCommissionRange: translateCommissionRange(
            (_r = (_q = params.poolParameters) == null ? void 0 : _q.commissionBounds) == null ? void 0 : _r.transaction
        ),
        minimumEquityCapital: fromProto2(
            unwrap((_s = params.poolParameters) == null ? void 0 : _s.minimumEquityCapital)
        ),
        capitalBound: trAmountFraction(
            (_u = (_t = params.poolParameters) == null ? void 0 : _t.capitalBound) == null ? void 0 : _u.value
        ),
        leverageBound: unwrap(
            (_w = (_v = params.poolParameters) == null ? void 0 : _v.leverageBound) == null ? void 0 : _w.value
        ),
        rewardParameters: {
            ...commonRewardParameters,
            version: 1,
            gASRewards: {
                version: 0,
                baker: trAmountFraction((_x = params.gasRewards) == null ? void 0 : _x.baker),
                finalizationProof: trAmountFraction((_y = params.gasRewards) == null ? void 0 : _y.finalizationProof),
                accountCreation: trAmountFraction((_z = params.gasRewards) == null ? void 0 : _z.accountCreation),
                chainUpdate: trAmountFraction((_A = params.gasRewards) == null ? void 0 : _A.chainUpdate),
            },
            mintDistribution: {
                version: 1,
                bakingReward: trAmountFraction((_B = params.mintDistribution) == null ? void 0 : _B.bakingReward),
                finalizationReward: trAmountFraction(
                    (_C = params.mintDistribution) == null ? void 0 : _C.finalizationReward
                ),
            },
        },
    };
}
function trChainParametersV2(params) {
    var _a,
        _b,
        _c,
        _d,
        _e,
        _f,
        _g,
        _h,
        _i,
        _j,
        _k,
        _l,
        _m,
        _n,
        _o,
        _p,
        _q,
        _r,
        _s,
        _t,
        _u,
        _v,
        _w,
        _x,
        _y,
        _z,
        _A,
        _B,
        _C,
        _D,
        _E,
        _F,
        _G,
        _H,
        _I,
        _J,
        _K,
        _L;
    const common = translateChainParametersCommon(params);
    const commonRewardParameters = translateRewardParametersCommon(params);
    return {
        ...common,
        version: 2,
        level2Keys: trAuthorizationsV1(unwrap(params.level2Keys)),
        rewardPeriodLength: unwrap(
            (_c =
                (_b = (_a = params.timeParameters) == null ? void 0 : _a.rewardPeriodLength) == null
                    ? void 0
                    : _b.value) == null
                ? void 0
                : _c.value
        ),
        mintPerPayday: trMintRate((_d = params.timeParameters) == null ? void 0 : _d.mintPerPayday),
        delegatorCooldown: unwrap(
            (_f = (_e = params.cooldownParameters) == null ? void 0 : _e.delegatorCooldown) == null ? void 0 : _f.value
        ),
        poolOwnerCooldown: unwrap(
            (_h = (_g = params.cooldownParameters) == null ? void 0 : _g.poolOwnerCooldown) == null ? void 0 : _h.value
        ),
        passiveFinalizationCommission: trAmountFraction(
            (_i = params.poolParameters) == null ? void 0 : _i.passiveFinalizationCommission
        ),
        passiveBakingCommission: trAmountFraction(
            (_j = params.poolParameters) == null ? void 0 : _j.passiveBakingCommission
        ),
        passiveTransactionCommission: trAmountFraction(
            (_k = params.poolParameters) == null ? void 0 : _k.passiveTransactionCommission
        ),
        finalizationCommissionRange: translateCommissionRange(
            (_m = (_l = params.poolParameters) == null ? void 0 : _l.commissionBounds) == null
                ? void 0
                : _m.finalization
        ),
        bakingCommissionRange: translateCommissionRange(
            (_o = (_n = params.poolParameters) == null ? void 0 : _n.commissionBounds) == null ? void 0 : _o.baking
        ),
        transactionCommissionRange: translateCommissionRange(
            (_q = (_p = params.poolParameters) == null ? void 0 : _p.commissionBounds) == null ? void 0 : _q.transaction
        ),
        minimumEquityCapital: fromProto2(
            unwrap((_r = params.poolParameters) == null ? void 0 : _r.minimumEquityCapital)
        ),
        capitalBound: trAmountFraction(
            (_t = (_s = params.poolParameters) == null ? void 0 : _s.capitalBound) == null ? void 0 : _t.value
        ),
        leverageBound: unwrap(
            (_v = (_u = params.poolParameters) == null ? void 0 : _u.leverageBound) == null ? void 0 : _v.value
        ),
        rewardParameters: {
            ...commonRewardParameters,
            version: 2,
            gASRewards: {
                version: 1,
                baker: trAmountFraction((_w = params.gasRewards) == null ? void 0 : _w.baker),
                accountCreation: trAmountFraction((_x = params.gasRewards) == null ? void 0 : _x.accountCreation),
                chainUpdate: trAmountFraction((_y = params.gasRewards) == null ? void 0 : _y.chainUpdate),
            },
            mintDistribution: {
                version: 1,
                bakingReward: trAmountFraction((_z = params.mintDistribution) == null ? void 0 : _z.bakingReward),
                finalizationReward: trAmountFraction(
                    (_A = params.mintDistribution) == null ? void 0 : _A.finalizationReward
                ),
            },
        },
        timeoutBase: fromProto14(
            unwrap(
                (_C = (_B = params.consensusParameters) == null ? void 0 : _B.timeoutParameters) == null
                    ? void 0
                    : _C.timeoutBase
            )
        ),
        timeoutDecrease: unwrap(
            (_E = (_D = params.consensusParameters) == null ? void 0 : _D.timeoutParameters) == null
                ? void 0
                : _E.timeoutDecrease
        ),
        timeoutIncrease: unwrap(
            (_G = (_F = params.consensusParameters) == null ? void 0 : _F.timeoutParameters) == null
                ? void 0
                : _G.timeoutIncrease
        ),
        minBlockTime: fromProto14(unwrap((_H = params.consensusParameters) == null ? void 0 : _H.minBlockTime)),
        blockEnergyLimit: fromProto5(unwrap((_I = params.consensusParameters) == null ? void 0 : _I.blockEnergyLimit)),
        finalizerRelativeStakeThreshold: trAmountFraction(
            (_J = params.finalizationCommitteeParameters) == null ? void 0 : _J.finalizerRelativeStakeThreshold
        ),
        minimumFinalizers: unwrap(
            (_K = params.finalizationCommitteeParameters) == null ? void 0 : _K.minimumFinalizers
        ),
        maximumFinalizers: unwrap(
            (_L = params.finalizationCommitteeParameters) == null ? void 0 : _L.maximumFinalizers
        ),
    };
}
function blockChainParameters(params) {
    switch (params.parameters.oneofKind) {
        case 'v2': {
            return trChainParametersV2(params.parameters.v2);
        }
        case 'v1': {
            return trChainParametersV1(params.parameters.v1);
        }
        case 'v0': {
            return trChainParametersV0(params.parameters.v0);
        }
        default:
            throw new Error('Missing chain parameters');
    }
}
function bakerPoolInfo(info) {
    var _a;
    return {
        poolType: PoolStatusType.BakerPool,
        bakerId: unwrap((_a = info.baker) == null ? void 0 : _a.value),
        bakerAddress: fromProto(unwrap(info.address)),
        bakerEquityCapital: fromProto2(unwrap(info.equityCapital)),
        delegatedCapital: fromProto2(unwrap(info.delegatedCapital)),
        delegatedCapitalCap: fromProto2(unwrap(info.delegatedCapitalCap)),
        poolInfo: transPoolInfo(unwrap(info == null ? void 0 : info.poolInfo)),
        bakerStakePendingChange: transPoolPendingChange(info.equityPendingChange),
        currentPaydayStatus: transPaydayStatus(info.currentPaydayInfo),
        allPoolTotalCapital: fromProto2(unwrap(info.allPoolTotalCapital)),
    };
}
function passiveDelegationInfo(info) {
    return {
        poolType: PoolStatusType.PassiveDelegation,
        delegatedCapital: fromProto2(unwrap(info.delegatedCapital)),
        commissionRates: trCommissionRates(info.commissionRates),
        currentPaydayTransactionFeesEarned: fromProto2(unwrap(info.currentPaydayTransactionFeesEarned)),
        currentPaydayDelegatedCapital: fromProto2(unwrap(info.currentPaydayDelegatedCapital)),
        allPoolTotalCapital: fromProto2(unwrap(info.allPoolTotalCapital)),
    };
}
function translateProtocolVersion(pv) {
    return BigInt(pv + 1);
}
function tokenomicsInfo(info) {
    switch (info.tokenomics.oneofKind) {
        case 'v0': {
            const v0 = info.tokenomics.v0;
            return {
                version: 0,
                protocolVersion: translateProtocolVersion(v0.protocolVersion),
                totalAmount: fromProto2(unwrap(v0.totalAmount)),
                totalEncryptedAmount: fromProto2(unwrap(v0.totalEncryptedAmount)),
                bakingRewardAccount: fromProto2(unwrap(v0.bakingRewardAccount)),
                finalizationRewardAccount: fromProto2(unwrap(v0.finalizationRewardAccount)),
                gasAccount: fromProto2(unwrap(v0.gasAccount)),
            };
        }
        case 'v1': {
            const v1 = info.tokenomics.v1;
            return {
                version: 1,
                protocolVersion: translateProtocolVersion(v1.protocolVersion),
                totalAmount: fromProto2(unwrap(v1.totalAmount)),
                totalEncryptedAmount: fromProto2(unwrap(v1.totalEncryptedAmount)),
                bakingRewardAccount: fromProto2(unwrap(v1.bakingRewardAccount)),
                finalizationRewardAccount: fromProto2(unwrap(v1.finalizationRewardAccount)),
                gasAccount: fromProto2(unwrap(v1.gasAccount)),
                foundationTransactionRewards: fromProto2(unwrap(v1.foundationTransactionRewards)),
                nextPaydayTime: trTimestamp(v1.nextPaydayTime),
                nextPaydayMintRate: unwrap(v1.nextPaydayMintRate),
                totalStakedCapital: fromProto2(unwrap(v1.totalStakedCapital)),
            };
        }
        case void 0:
            throw new Error('Missing tokenomics info');
    }
}
function consensusInfo(ci) {
    var _a, _b, _c, _d, _e;
    const common = {
        bestBlock: fromProto11(unwrap(ci.bestBlock)),
        genesisBlock: fromProto11(unwrap(ci.genesisBlock)),
        currentEraGenesisBlock: fromProto11(unwrap(ci.currentEraGenesisBlock)),
        lastFinalizedBlock: fromProto11(unwrap(ci.lastFinalizedBlock)),
        epochDuration: fromProto14(unwrap(ci.epochDuration)),
        bestBlockHeight: unwrap((_a = ci.bestBlockHeight) == null ? void 0 : _a.value),
        lastFinalizedBlockHeight: unwrap((_b = ci.lastFinalizedBlockHeight) == null ? void 0 : _b.value),
        finalizationCount: BigInt(unwrap(ci.finalizationCount)),
        blocksVerifiedCount: BigInt(unwrap(ci.blocksVerifiedCount)),
        blocksReceivedCount: BigInt(unwrap(ci.blocksReceivedCount)),
        blockArriveLatencyEMA: unwrap(ci.blockArriveLatencyEma),
        blockArriveLatencyEMSD: unwrap(ci.blockArriveLatencyEmsd),
        blockReceiveLatencyEMA: unwrap(ci.blockReceiveLatencyEma),
        blockReceiveLatencyEMSD: unwrap(ci.blockReceiveLatencyEmsd),
        transactionsPerBlockEMA: unwrap(ci.transactionsPerBlockEma),
        transactionsPerBlockEMSD: unwrap(ci.transactionsPerBlockEmsd),
        genesisTime: trTimestamp(ci.genesisTime),
        currentEraGenesisTime: trTimestamp(ci.currentEraGenesisTime),
        genesisIndex: unwrap((_c = ci.genesisIndex) == null ? void 0 : _c.value),
        protocolVersion: translateProtocolVersion(unwrap(ci.protocolVersion)),
        // Only include the following if they are not undefined
        ...(ci.blockReceivePeriodEma && {
            blockReceivePeriodEMA: ci.blockReceivePeriodEma,
        }),
        ...(ci.blockReceivePeriodEmsd && {
            blockReceivePeriodEMSD: ci.blockReceivePeriodEmsd,
        }),
        ...(ci.blockArrivePeriodEma && {
            blockArrivePeriodEMA: ci.blockArrivePeriodEma,
        }),
        ...(ci.blockArrivePeriodEmsd && {
            blockArrivePeriodEMSD: ci.blockArrivePeriodEmsd,
        }),
        ...(ci.finalizationPeriodEma && {
            blockArrivePeriodEMA: ci.blockArrivePeriodEma,
        }),
        ...(ci.finalizationPeriodEmsd && {
            blockArrivePeriodEMSD: ci.blockArrivePeriodEmsd,
        }),
        ...(ci.blockLastReceivedTime && {
            blockLastReceivedTime: trTimestamp(ci.blockLastReceivedTime),
        }),
        ...(ci.blockLastArrivedTime && {
            blockLastArrivedTime: trTimestamp(ci.blockLastArrivedTime),
        }),
        ...(ci.lastFinalizedTime && {
            lastFinalizedTime: trTimestamp(ci.lastFinalizedTime),
        }),
    };
    if (ci.protocolVersion < ProtocolVersion.PROTOCOL_VERSION_6) {
        const ci0 = {
            ...common,
            version: 0,
            slotDuration: fromProto14(unwrap(ci.slotDuration)),
        };
        return ci0;
    }
    const ci1 = {
        ...common,
        version: 1,
        concordiumBFTStatus: {
            currentTimeoutDuration: fromProto14(unwrap(ci.currentTimeoutDuration)),
            currentRound: unwrap((_d = ci.currentRound) == null ? void 0 : _d.value),
            currentEpoch: unwrap((_e = ci.currentEpoch) == null ? void 0 : _e.value),
            triggerBlockTime: trTimestamp(ci.triggerBlockTime),
        },
    };
    return ci1;
}
function trAddress(address) {
    if (address.type.oneofKind === 'account') {
        return {
            type: 'AddressAccount',
            address: fromProto(unwrap(address.type.account)),
        };
    } else if (address.type.oneofKind === 'contract') {
        return {
            type: 'AddressContract',
            address: fromProto9(address.type.contract),
        };
    } else {
        throw Error('Invalid address encountered!');
    }
}
function trContractTraceElement(contractTraceElement) {
    const element = contractTraceElement.element;
    switch (element.oneofKind) {
        case 'updated':
            return {
                tag: TransactionEventTag.Updated,
                contractVersion: element.updated.contractVersion,
                address: fromProto9(unwrap(element.updated.address)),
                instigator: trAddress(unwrap(element.updated.instigator)),
                amount: fromProto2(unwrap(element.updated.amount)),
                message: fromProto4(unwrap(element.updated.parameter)),
                receiveName: fromProto3(unwrap(element.updated.receiveName)),
                events: element.updated.events.map(fromProto15),
            };
        case 'transferred':
            return {
                tag: TransactionEventTag.Transferred,
                from: fromProto9(unwrap(element.transferred.sender)),
                amount: fromProto2(unwrap(element.transferred.amount)),
                to: fromProto(unwrap(element.transferred.receiver)),
            };
        case 'interrupted':
            return {
                tag: TransactionEventTag.Interrupted,
                address: fromProto9(unwrap(element.interrupted.address)),
                events: element.interrupted.events.map(fromProto15),
            };
        case 'resumed':
            return {
                tag: TransactionEventTag.Resumed,
                address: fromProto9(unwrap(element.resumed.address)),
                success: unwrap(element.resumed.success),
            };
        case 'upgraded':
            return {
                tag: TransactionEventTag.Upgraded,
                address: fromProto9(unwrap(element.upgraded.address)),
                from: unwrapValToHex(element.upgraded.from),
                to: unwrapValToHex(element.upgraded.to),
            };
        default:
            throw Error('Invalid ContractTraceElement received, not able to translate to Transaction Event!');
    }
}
function trBakerEvent(bakerEvent, account) {
    var _a, _b, _c, _d, _e, _f, _g, _h, _i, _j;
    const event = bakerEvent.event;
    switch (event.oneofKind) {
        case 'bakerAdded': {
            const keysEvent = event.bakerAdded.keysEvent;
            return {
                tag: TransactionEventTag.BakerAdded,
                bakerId: unwrap((_a = keysEvent == null ? void 0 : keysEvent.bakerId) == null ? void 0 : _a.value),
                account: fromProto(unwrap(keysEvent == null ? void 0 : keysEvent.account)),
                signKey: unwrapValToHex(keysEvent == null ? void 0 : keysEvent.signKey),
                electionKey: unwrapValToHex(keysEvent == null ? void 0 : keysEvent.electionKey),
                aggregationKey: unwrapValToHex(keysEvent == null ? void 0 : keysEvent.aggregationKey),
                stake: fromProto2(unwrap(event.bakerAdded.stake)),
                restakeEarnings: unwrap(event.bakerAdded.restakeEarnings),
            };
        }
        case 'bakerRemoved':
            return {
                tag: TransactionEventTag.BakerRemoved,
                bakerId: unwrap(event.bakerRemoved.value),
                account,
            };
        case 'bakerStakeIncreased':
            return {
                tag: TransactionEventTag.BakerStakeIncreased,
                bakerId: unwrap((_b = event.bakerStakeIncreased.bakerId) == null ? void 0 : _b.value),
                newStake: fromProto2(unwrap(event.bakerStakeIncreased.newStake)),
                account,
            };
        case 'bakerStakeDecreased':
            return {
                tag: TransactionEventTag.BakerStakeDecreased,
                bakerId: unwrap((_c = event.bakerStakeDecreased.bakerId) == null ? void 0 : _c.value),
                newStake: fromProto2(unwrap(event.bakerStakeDecreased.newStake)),
                account,
            };
        case 'bakerRestakeEarningsUpdated': {
            const update = event.bakerRestakeEarningsUpdated;
            return {
                tag: TransactionEventTag.BakerSetRestakeEarnings,
                bakerId: unwrap((_d = update.bakerId) == null ? void 0 : _d.value),
                restakeEarnings: unwrap(update.restakeEarnings),
                account,
            };
        }
        case 'bakerKeysUpdated':
            return {
                tag: TransactionEventTag.BakerKeysUpdated,
                bakerId: unwrap((_e = event.bakerKeysUpdated.bakerId) == null ? void 0 : _e.value),
                account: fromProto(unwrap(event.bakerKeysUpdated.account)),
                signKey: unwrapValToHex(event.bakerKeysUpdated.signKey),
                electionKey: unwrapValToHex(event.bakerKeysUpdated.electionKey),
                aggregationKey: unwrapValToHex(event.bakerKeysUpdated.aggregationKey),
            };
        case 'bakerSetOpenStatus': {
            const setOpenStatus = event.bakerSetOpenStatus;
            return {
                tag: TransactionEventTag.BakerSetOpenStatus,
                bakerId: unwrap((_f = setOpenStatus.bakerId) == null ? void 0 : _f.value),
                openStatus: trOpenStatus(setOpenStatus.openStatus),
                account,
            };
        }
        case 'bakerSetMetadataUrl': {
            const setURL = event.bakerSetMetadataUrl;
            return {
                tag: TransactionEventTag.BakerSetMetadataURL,
                bakerId: unwrap((_g = setURL.bakerId) == null ? void 0 : _g.value),
                metadataURL: setURL.url,
                account,
            };
        }
        case 'bakerSetTransactionFeeCommission': {
            const transferFeeComm = event.bakerSetTransactionFeeCommission;
            const amount = transferFeeComm.transactionFeeCommission;
            return {
                tag: TransactionEventTag.BakerSetTransactionFeeCommission,
                bakerId: unwrap((_h = transferFeeComm.bakerId) == null ? void 0 : _h.value),
                transactionFeeCommission: trAmountFraction(amount),
                account,
            };
        }
        case 'bakerSetBakingRewardCommission': {
            const rewardComm = event.bakerSetBakingRewardCommission;
            const amount = rewardComm.bakingRewardCommission;
            return {
                tag: TransactionEventTag.BakerSetBakingRewardCommission,
                bakerId: unwrap((_i = rewardComm.bakerId) == null ? void 0 : _i.value),
                bakingRewardCommission: trAmountFraction(amount),
                account,
            };
        }
        case 'bakerSetFinalizationRewardCommission': {
            const rewardComm = event.bakerSetFinalizationRewardCommission;
            const amount = rewardComm.finalizationRewardCommission;
            return {
                tag: TransactionEventTag.BakerSetFinalizationRewardCommission,
                bakerId: unwrap((_j = rewardComm.bakerId) == null ? void 0 : _j.value),
                finalizationRewardCommission: trAmountFraction(amount),
                account,
            };
        }
        case void 0:
            throw Error('Failed translating BakerEvent, encountered undefined');
    }
}
function trDelegTarget(delegationTarget) {
    const target = delegationTarget == null ? void 0 : delegationTarget.target;
    if ((target == null ? void 0 : target.oneofKind) === 'baker') {
        return {
            delegateType: DelegationTargetType.Baker,
            bakerId: Number(unwrap(target.baker.value)),
        };
    } else if ((target == null ? void 0 : target.oneofKind) === 'passive') {
        return {
            delegateType: DelegationTargetType.PassiveDelegation,
        };
    } else {
        throw 'Failed translating DelegationTarget, encountered undefined';
    }
}
function trDelegationEvent(delegationEvent, account) {
    var _a, _b, _c, _d, _e, _f, _g, _h, _i, _j;
    const event = delegationEvent.event;
    switch (event.oneofKind) {
        case 'delegationStakeIncreased': {
            const stakeIncr = event.delegationStakeIncreased;
            return {
                tag: TransactionEventTag.DelegationStakeIncreased,
                delegatorId: unwrap(
                    (_b = (_a = stakeIncr.delegatorId) == null ? void 0 : _a.id) == null ? void 0 : _b.value
                ),
                newStake: fromProto2(unwrap(stakeIncr.newStake)),
                account,
            };
        }
        case 'delegationStakeDecreased': {
            const stakeDecr = event.delegationStakeDecreased;
            return {
                tag: TransactionEventTag.DelegationStakeDecreased,
                delegatorId: unwrap(
                    (_d = (_c = stakeDecr.delegatorId) == null ? void 0 : _c.id) == null ? void 0 : _d.value
                ),
                newStake: fromProto2(unwrap(stakeDecr.newStake)),
                account,
            };
        }
        case 'delegationSetRestakeEarnings': {
            const restake = event.delegationSetRestakeEarnings;
            return {
                tag: TransactionEventTag.DelegationSetRestakeEarnings,
                delegatorId: unwrap(
                    (_f = (_e = restake.delegatorId) == null ? void 0 : _e.id) == null ? void 0 : _f.value
                ),
                restakeEarnings: unwrap(restake.restakeEarnings),
                account,
            };
        }
        case 'delegationSetDelegationTarget': {
            const target = event.delegationSetDelegationTarget;
            return {
                tag: TransactionEventTag.DelegationSetDelegationTarget,
                delegatorId: unwrap(
                    (_h = (_g = target.delegatorId) == null ? void 0 : _g.id) == null ? void 0 : _h.value
                ),
                delegationTarget: trDelegTarget(target.delegationTarget),
                account,
            };
        }
        case 'delegationAdded':
            return {
                tag: TransactionEventTag.DelegationAdded,
                delegatorId: unwrap((_i = event.delegationAdded.id) == null ? void 0 : _i.value),
                account,
            };
        case 'delegationRemoved':
            return {
                tag: TransactionEventTag.DelegationRemoved,
                delegatorId: unwrap((_j = event.delegationRemoved.id) == null ? void 0 : _j.value),
                account,
            };
        default:
            throw Error('Unrecognized event type. This should be impossible.');
    }
}
function trRejectReason(rejectReason) {
    function simpleReason(tag) {
        return {
            tag: RejectReasonTag[tag],
        };
    }
    const reason = unwrap(rejectReason == null ? void 0 : rejectReason.reason);
    const Tag = RejectReasonTag;
    switch (reason.oneofKind) {
        case 'moduleNotWf':
            return simpleReason(Tag.ModuleNotWF);
        case 'runtimeFailure':
            return simpleReason(Tag.RuntimeFailure);
        case 'serializationFailure':
            return simpleReason(Tag.SerializationFailure);
        case 'outOfEnergy':
            return simpleReason(Tag.OutOfEnergy);
        case 'invalidProof':
            return simpleReason(Tag.InvalidProof);
        case 'insufficientBalanceForBakerStake':
            return simpleReason(Tag.InsufficientBalanceForBakerStake);
        case 'stakeUnderMinimumThresholdForBaking':
            return simpleReason(Tag.StakeUnderMinimumThresholdForBaking);
        case 'bakerInCooldown':
            return simpleReason(Tag.BakerInCooldown);
        case 'nonExistentCredentialId':
            return simpleReason(Tag.NonExistentCredentialID);
        case 'keyIndexAlreadyInUse':
            return simpleReason(Tag.KeyIndexAlreadyInUse);
        case 'invalidAccountThreshold':
            return simpleReason(Tag.InvalidAccountThreshold);
        case 'invalidCredentialKeySignThreshold':
            return simpleReason(Tag.InvalidCredentialKeySignThreshold);
        case 'invalidEncryptedAmountTransferProof':
            return simpleReason(Tag.InvalidEncryptedAmountTransferProof);
        case 'invalidTransferToPublicProof':
            return simpleReason(Tag.InvalidTransferToPublicProof);
        case 'invalidIndexOnEncryptedTransfer':
            return simpleReason(Tag.InvalidIndexOnEncryptedTransfer);
        case 'zeroScheduledAmount':
            return simpleReason(Tag.ZeroScheduledAmount);
        case 'nonIncreasingSchedule':
            return simpleReason(Tag.NonIncreasingSchedule);
        case 'firstScheduledReleaseExpired':
            return simpleReason(Tag.FirstScheduledReleaseExpired);
        case 'invalidCredentials':
            return simpleReason(Tag.InvalidCredentials);
        case 'removeFirstCredential':
            return simpleReason(Tag.RemoveFirstCredential);
        case 'credentialHolderDidNotSign':
            return simpleReason(Tag.CredentialHolderDidNotSign);
        case 'notAllowedMultipleCredentials':
            return simpleReason(Tag.NotAllowedMultipleCredentials);
        case 'notAllowedToReceiveEncrypted':
            return simpleReason(Tag.NotAllowedToReceiveEncrypted);
        case 'notAllowedToHandleEncrypted':
            return simpleReason(Tag.NotAllowedToHandleEncrypted);
        case 'missingBakerAddParameters':
            return simpleReason(Tag.MissingBakerAddParameters);
        case 'finalizationRewardCommissionNotInRange':
            return simpleReason(Tag.FinalizationRewardCommissionNotInRange);
        case 'bakingRewardCommissionNotInRange':
            return simpleReason(Tag.BakingRewardCommissionNotInRange);
        case 'transactionFeeCommissionNotInRange':
            return simpleReason(Tag.TransactionFeeCommissionNotInRange);
        case 'alreadyADelegator':
            return simpleReason(Tag.AlreadyADelegator);
        case 'insufficientBalanceForDelegationStake':
            return simpleReason(Tag.InsufficientBalanceForDelegationStake);
        case 'missingDelegationAddParameters':
            return simpleReason(Tag.MissingDelegationAddParameters);
        case 'insufficientDelegationStake':
            return simpleReason(Tag.InsufficientDelegationStake);
        case 'delegatorInCooldown':
            return simpleReason(Tag.DelegatorInCooldown);
        case 'stakeOverMaximumThresholdForPool':
            return simpleReason(Tag.StakeOverMaximumThresholdForPool);
        case 'poolWouldBecomeOverDelegated':
            return simpleReason(Tag.PoolWouldBecomeOverDelegated);
        case 'poolClosed':
            return simpleReason(Tag.PoolClosed);
        case 'moduleHashAlreadyExists':
            return {
                tag: Tag.ModuleHashAlreadyExists,
                contents: unwrapValToHex(reason.moduleHashAlreadyExists),
            };
        case 'invalidAccountReference':
            return {
                tag: Tag.InvalidAccountReference,
                contents: unwrapToBase58(reason.invalidAccountReference),
            };
        case 'invalidInitMethod':
            return {
                tag: Tag.InvalidInitMethod,
                contents: {
                    moduleRef: fromProto6(unwrap(reason.invalidInitMethod.moduleRef)),
                    initName: fromProto12(unwrap(reason.invalidInitMethod.initName)),
                },
            };
        case 'invalidReceiveMethod':
            return {
                tag: Tag.InvalidReceiveMethod,
                contents: {
                    moduleRef: fromProto6(unwrap(reason.invalidReceiveMethod.moduleRef)),
                    receiveName: fromProto3(unwrap(reason.invalidReceiveMethod.receiveName)),
                },
            };
        case 'invalidModuleReference':
            return {
                tag: Tag.InvalidModuleReference,
                contents: unwrapValToHex(reason.invalidModuleReference),
            };
        case 'invalidContractAddress':
            return {
                tag: Tag.InvalidContractAddress,
                contents: fromProto9(reason.invalidContractAddress),
            };
        case 'amountTooLarge':
            return {
                tag: Tag.AmountTooLarge,
                contents: {
                    address: trAddress(unwrap(reason.amountTooLarge.address)),
                    amount: fromProto2(unwrap(reason.amountTooLarge.amount)),
                },
            };
        case 'rejectedInit':
            return {
                tag: Tag.RejectedInit,
                rejectReason: reason.rejectedInit.rejectReason,
            };
        case 'rejectedReceive':
            return {
                tag: Tag.RejectedReceive,
                contractAddress: fromProto9(unwrap(reason.rejectedReceive.contractAddress)),
                receiveName: fromProto3(unwrap(reason.rejectedReceive.receiveName)),
                rejectReason: unwrap(reason.rejectedReceive.rejectReason),
                parameter: fromProto4(unwrap(reason.rejectedReceive.parameter)),
            };
        case 'alreadyABaker':
            return {
                tag: Tag.AlreadyABaker,
                contents: unwrap(reason.alreadyABaker.value),
            };
        case 'notABaker':
            return {
                tag: Tag.NotABaker,
                contents: unwrapToBase58(reason.notABaker),
            };
        case 'duplicateAggregationKey':
            return {
                tag: Tag.DuplicateAggregationKey,
                contents: unwrapValToHex(reason.duplicateAggregationKey),
            };
        case 'encryptedAmountSelfTransfer':
            return {
                tag: Tag.EncryptedAmountSelfTransfer,
                contents: unwrapToBase58(reason.encryptedAmountSelfTransfer),
            };
        case 'scheduledSelfTransfer':
            return {
                tag: Tag.ScheduledSelfTransfer,
                contents: unwrapToBase58(reason.scheduledSelfTransfer),
            };
        case 'duplicateCredIds':
            return {
                tag: Tag.DuplicateCredIDs,
                contents: reason.duplicateCredIds.ids.map(unwrapValToHex),
            };
        case 'nonExistentCredIds':
            return {
                tag: Tag.NonExistentCredIDs,
                contents: reason.nonExistentCredIds.ids.map(unwrapValToHex),
            };
        case 'notADelegator':
            return {
                tag: Tag.NotADelegator,
                contents: unwrapToBase58(reason.notADelegator),
            };
        case 'delegationTargetNotABaker':
            return {
                tag: Tag.DelegationTargetNotABaker,
                contents: unwrap(reason.delegationTargetNotABaker.value),
            };
        case void 0:
            throw Error('Failed translating RejectReason, encountered undefined value');
    }
}
function trMintRate(mintRate) {
    return (
        unwrap(mintRate == null ? void 0 : mintRate.mantissa) *
        10 ** (-1 * unwrap(mintRate == null ? void 0 : mintRate.exponent))
    );
}
function trProtocolUpdate(update) {
    return {
        updateType: UpdateType.Protocol,
        update: {
            message: update.message,
            specificationHash: unwrapValToHex(update.specificationHash),
            specificationUrl: update.specificationUrl,
            specificationAuxiliaryData: unwrapToHex(update.specificationAuxiliaryData),
        },
    };
}
function trElectionDifficultyUpdate(elecDiff) {
    return {
        updateType: UpdateType.ElectionDifficulty,
        update: {
            electionDifficulty: trAmountFraction(elecDiff.value),
        },
    };
}
function trEuroPerEnergyUpdate(exchangeRate) {
    return {
        updateType: UpdateType.EuroPerEnergy,
        update: unwrap(exchangeRate.value),
    };
}
function trMicroCcdPerEuroUpdate(exchangeRate) {
    return {
        updateType: UpdateType.MicroGtuPerEuro,
        update: unwrap(exchangeRate.value),
    };
}
function trFoundationAccountUpdate(account) {
    return {
        updateType: UpdateType.FoundationAccount,
        update: {
            address: unwrapToBase58(account),
        },
    };
}
function trTransactionFeeDistributionUpdate(transFeeDist) {
    return {
        updateType: UpdateType.TransactionFeeDistribution,
        update: {
            baker: trAmountFraction(transFeeDist.baker),
            gasAccount: trAmountFraction(transFeeDist.gasAccount),
        },
    };
}
function trGasRewardsUpdate(gasRewards) {
    return {
        updateType: UpdateType.GasRewards,
        update: {
            version: 0,
            baker: trAmountFraction(gasRewards.baker),
            accountCreation: trAmountFraction(gasRewards.accountCreation),
            chainUpdate: trAmountFraction(gasRewards.accountCreation),
            finalizationProof: trAmountFraction(gasRewards.finalizationProof),
        },
    };
}
function trGasRewardsCpv2Update(gasRewards) {
    return {
        updateType: UpdateType.GasRewardsCpv2,
        update: {
            version: 1,
            baker: trAmountFraction(gasRewards.baker),
            accountCreation: trAmountFraction(gasRewards.accountCreation),
            chainUpdate: trAmountFraction(gasRewards.accountCreation),
        },
    };
}
function trBakerStakeThresholdUpdate(bakerStakeThreshold) {
    var _a;
    return {
        updateType: UpdateType.BakerStakeThreshold,
        update: {
            threshold: unwrap((_a = bakerStakeThreshold.bakerStakeThreshold) == null ? void 0 : _a.value),
        },
    };
}
function trPoolParametersCpv1Update(poolParams) {
    var _a, _b, _c, _d, _e;
    return {
        updateType: UpdateType.PoolParameters,
        update: {
            passiveCommissions: {
                transactionCommission: trAmountFraction(poolParams.passiveTransactionCommission),
                bakingCommission: trAmountFraction(poolParams.passiveBakingCommission),
                finalizationCommission: trAmountFraction(poolParams.passiveFinalizationCommission),
            },
            commissionBounds: {
                transactionFeeCommission: trCommissionRange(
                    (_a = poolParams.commissionBounds) == null ? void 0 : _a.transaction
                ),
                bakingRewardCommission: trCommissionRange(
                    (_b = poolParams.commissionBounds) == null ? void 0 : _b.baking
                ),
                finalizationRewardCommission: trCommissionRange(
                    (_c = poolParams.commissionBounds) == null ? void 0 : _c.finalization
                ),
            },
            minimumEquityCapital: fromProto2(unwrap(poolParams.minimumEquityCapital)),
            capitalBound: trAmountFraction((_d = poolParams.capitalBound) == null ? void 0 : _d.value),
            leverageBound: unwrap((_e = poolParams.leverageBound) == null ? void 0 : _e.value),
        },
    };
}
function trAddAnonymityRevokerUpdate(ar) {
    return {
        updateType: UpdateType.AddAnonymityRevoker,
        update: arInfo(ar),
    };
}
function trAddIdentityProviderUpdate(ip) {
    return {
        updateType: UpdateType.AddIdentityProvider,
        update: ipInfo(ip),
    };
}
function trCooldownParametersCpv1Update(cooldownParams) {
    var _a, _b;
    return {
        updateType: UpdateType.CooldownParameters,
        update: {
            poolOwnerCooldown: unwrap((_a = cooldownParams.poolOwnerCooldown) == null ? void 0 : _a.value),
            delegatorCooldown: unwrap((_b = cooldownParams.delegatorCooldown) == null ? void 0 : _b.value),
        },
    };
}
function trTimeParametersCpv1Update(timeParams) {
    var _a, _b;
    return {
        updateType: UpdateType.TimeParameters,
        update: {
            rewardPeriodLength: unwrap(
                (_b = (_a = timeParams.rewardPeriodLength) == null ? void 0 : _a.value) == null ? void 0 : _b.value
            ),
            mintRatePerPayday: unwrap(timeParams.mintPerPayday),
        },
    };
}
function trTimeoutParameteresUpdate(timeout) {
    return {
        updateType: UpdateType.TimeoutParameters,
        update: {
            timeoutBase: fromProto14(unwrap(timeout.timeoutBase)),
            timeoutDecrease: unwrap(timeout.timeoutDecrease),
            timeoutIncrease: unwrap(timeout.timeoutIncrease),
        },
    };
}
function trMinBlockTimeUpdate(duration) {
    return {
        updateType: UpdateType.MinBlockTime,
        update: fromProto14(duration),
    };
}
function trBlockEnergyLimitUpdate(energy) {
    return {
        updateType: UpdateType.BlockEnergyLimit,
        update: fromProto5(energy),
    };
}
function trFinalizationCommitteeParametersUpdate(params) {
    return {
        updateType: UpdateType.FinalizationCommitteeParameters,
        update: {
            finalizerRelativeStakeThreshold: trAmountFraction(params.finalizerRelativeStakeThreshold),
            minimumFinalizers: params.minimumFinalizers,
            maximumFinalizers: params.maximumFinalizers,
        },
    };
}
function trMintDistributionCpv0Update(mintDist) {
    return {
        updateType: UpdateType.MintDistribution,
        update: {
            version: 0,
            bakingReward: trAmountFraction(mintDist.bakingReward),
            finalizationReward: trAmountFraction(mintDist.finalizationReward),
            mintPerSlot: trMintRate(mintDist.mintPerSlot),
        },
    };
}
function trMintDistributionCpv1Update(mintDist) {
    return {
        updateType: UpdateType.MintDistribution,
        update: {
            version: 1,
            bakingReward: trAmountFraction(mintDist.bakingReward),
            finalizationReward: trAmountFraction(mintDist.finalizationReward),
        },
    };
}
function pendingUpdate(pendingUpdate2) {
    return {
        effectiveTime: fromProto13(unwrap(pendingUpdate2.effectiveTime)),
        effect: trPendingUpdateEffect(pendingUpdate2),
    };
}
function trPendingUpdateEffect(pendingUpdate2) {
    var _a, _b;
    const effect = pendingUpdate2.effect;
    switch (effect.oneofKind) {
        case 'protocol':
            return trProtocolUpdate(effect.protocol);
        case 'electionDifficulty':
            return trElectionDifficultyUpdate(effect.electionDifficulty);
        case 'euroPerEnergy':
            return trEuroPerEnergyUpdate(effect.euroPerEnergy);
        case 'microCcdPerEuro':
            return trMicroCcdPerEuroUpdate(effect.microCcdPerEuro);
        case 'foundationAccount':
            return trFoundationAccountUpdate(effect.foundationAccount);
        case 'transactionFeeDistribution':
            return trTransactionFeeDistributionUpdate(effect.transactionFeeDistribution);
        case 'gasRewards':
            return trGasRewardsUpdate(effect.gasRewards);
        case 'poolParametersCpv0':
            return trBakerStakeThresholdUpdate(effect.poolParametersCpv0);
        case 'poolParametersCpv1':
            return trPoolParametersCpv1Update(effect.poolParametersCpv1);
        case 'addAnonymityRevoker':
            return trAddAnonymityRevokerUpdate(effect.addAnonymityRevoker);
        case 'addIdentityProvider':
            return trAddIdentityProviderUpdate(effect.addIdentityProvider);
        case 'cooldownParameters':
            return trCooldownParametersCpv1Update(effect.cooldownParameters);
        case 'timeParameters':
            return trTimeParametersCpv1Update(effect.timeParameters);
        case 'mintDistributionCpv0':
            return trMintDistributionCpv0Update(effect.mintDistributionCpv0);
        case 'mintDistributionCpv1':
            return trMintDistributionCpv1Update(effect.mintDistributionCpv1);
        case 'gasRewardsCpv2':
            return trGasRewardsCpv2Update(effect.gasRewardsCpv2);
        case 'timeoutParameters':
            return trTimeoutParameteresUpdate(effect.timeoutParameters);
        case 'minBlockTime':
            return trMinBlockTimeUpdate(effect.minBlockTime);
        case 'blockEnergyLimit':
            return trBlockEnergyLimitUpdate(effect.blockEnergyLimit);
        case 'finalizationCommitteeParameters':
            return trFinalizationCommitteeParametersUpdate(effect.finalizationCommitteeParameters);
        case 'rootKeys':
            return {
                updateType: UpdateType.HigherLevelKeyUpdate,
                update: {
                    typeOfUpdate: HigherLevelKeyUpdateType.RootKeysUpdate,
                    updateKeys: effect.rootKeys.keys.map(trUpdatePublicKey),
                    threshold: unwrap((_a = effect.rootKeys.threshold) == null ? void 0 : _a.value),
                },
            };
        case 'level1Keys':
            return {
                updateType: UpdateType.HigherLevelKeyUpdate,
                update: {
                    typeOfUpdate: HigherLevelKeyUpdateType.Level1KeysUpdate,
                    updateKeys: effect.level1Keys.keys.map(trUpdatePublicKey),
                    threshold: unwrap((_b = effect.level1Keys.threshold) == null ? void 0 : _b.value),
                },
            };
        case 'level2KeysCpv0':
            return {
                updateType: UpdateType.AuthorizationKeysUpdate,
                update: {
                    typeOfUpdate: AuthorizationKeysUpdateType.Level2KeysUpdate,
                    updatePayload: trAuthorizationsV0(effect.level2KeysCpv0),
                },
            };
        case 'level2KeysCpv1':
            return {
                updateType: UpdateType.AuthorizationKeysUpdate,
                update: {
                    typeOfUpdate: AuthorizationKeysUpdateType.Level2KeysUpdateV1,
                    updatePayload: trAuthorizationsV1(effect.level2KeysCpv1),
                },
            };
        case void 0:
            throw Error('Unexpected missing pending update');
        default:
            throw Error(`Unsupported update: ${effect}`);
    }
}
function trUpdatePayload(updatePayload) {
    const payload = updatePayload == null ? void 0 : updatePayload.payload;
    switch (payload == null ? void 0 : payload.oneofKind) {
        case 'protocolUpdate':
            return trProtocolUpdate(payload.protocolUpdate);
        case 'electionDifficultyUpdate':
            return trElectionDifficultyUpdate(payload.electionDifficultyUpdate);
        case 'euroPerEnergyUpdate':
            return trEuroPerEnergyUpdate(payload.euroPerEnergyUpdate);
        case 'microCcdPerEuroUpdate':
            return trMicroCcdPerEuroUpdate(payload.microCcdPerEuroUpdate);
        case 'foundationAccountUpdate':
            return trFoundationAccountUpdate(payload.foundationAccountUpdate);
        case 'mintDistributionUpdate':
            return trMintDistributionCpv1Update(payload.mintDistributionUpdate);
        case 'transactionFeeDistributionUpdate':
            return trTransactionFeeDistributionUpdate(payload.transactionFeeDistributionUpdate);
        case 'gasRewardsUpdate':
            return trGasRewardsUpdate(payload.gasRewardsUpdate);
        case 'bakerStakeThresholdUpdate':
            return trBakerStakeThresholdUpdate(payload.bakerStakeThresholdUpdate);
        case 'addAnonymityRevokerUpdate':
            return trAddAnonymityRevokerUpdate(payload.addAnonymityRevokerUpdate);
        case 'addIdentityProviderUpdate':
            return trAddIdentityProviderUpdate(payload.addIdentityProviderUpdate);
        case 'cooldownParametersCpv1Update':
            return trCooldownParametersCpv1Update(payload.cooldownParametersCpv1Update);
        case 'poolParametersCpv1Update':
            return trPoolParametersCpv1Update(payload.poolParametersCpv1Update);
        case 'timeParametersCpv1Update':
            return trTimeParametersCpv1Update(payload.timeParametersCpv1Update);
        case 'mintDistributionCpv1Update':
            return trMintDistributionCpv1Update(payload.mintDistributionCpv1Update);
        case 'gasRewardsCpv2Update':
            return trGasRewardsCpv2Update(payload.gasRewardsCpv2Update);
        case 'timeoutParametersUpdate':
            return trTimeoutParameteresUpdate(payload.timeoutParametersUpdate);
        case 'minBlockTimeUpdate':
            return trMinBlockTimeUpdate(payload.minBlockTimeUpdate);
        case 'blockEnergyLimitUpdate':
            return trBlockEnergyLimitUpdate(payload.blockEnergyLimitUpdate);
        case 'finalizationCommitteeParametersUpdate':
            return trFinalizationCommitteeParametersUpdate(payload.finalizationCommitteeParametersUpdate);
        case 'rootUpdate': {
            const rootUpdate = payload.rootUpdate;
            const keyUpdate = trKeyUpdate(rootUpdate);
            return {
                updateType: UpdateType.Root,
                update: keyUpdate,
            };
        }
        case 'level1Update': {
            const lvl1Update = payload.level1Update;
            const keyUpdate = trKeyUpdate(lvl1Update);
            return {
                updateType: UpdateType.Level1,
                update: keyUpdate,
            };
        }
        case void 0:
            throw new Error('Unexpected missing update payload');
        default:
            throw Error(`Unsupported update payload type: ${payload}`);
    }
}
function trCommissionRange(range) {
    return {
        min: trAmountFraction(range == null ? void 0 : range.min),
        max: trAmountFraction(range == null ? void 0 : range.max),
    };
}
function trUpdatePublicKey(key) {
    return {
        schemeId: 'Ed25519',
        verifyKey: unwrapValToHex(key),
    };
}
function trAccessStructure(auths) {
    var _a;
    return {
        authorizedKeys: unwrap(auths).accessPublicKeys.map((key) => key.value),
        threshold: unwrap((_a = auths == null ? void 0 : auths.accessThreshold) == null ? void 0 : _a.value),
    };
}
function trKeyUpdate(keyUpdate) {
    var _a, _b;
    switch (keyUpdate.updateType.oneofKind) {
        case 'rootKeysUpdate': {
            const update = keyUpdate.updateType.rootKeysUpdate;
            return {
                typeOfUpdate: HigherLevelKeyUpdateType.RootKeysUpdate,
                updateKeys: update.keys.map(trUpdatePublicKey),
                threshold: unwrap((_a = update.threshold) == null ? void 0 : _a.value),
            };
        }
        case 'level1KeysUpdate': {
            const update = keyUpdate.updateType.level1KeysUpdate;
            return {
                typeOfUpdate: HigherLevelKeyUpdateType.Level1KeysUpdate,
                updateKeys: update.keys.map(trUpdatePublicKey),
                threshold: unwrap((_b = update.threshold) == null ? void 0 : _b.value),
            };
        }
        case 'level2KeysUpdateV0': {
            const update = keyUpdate.updateType.level2KeysUpdateV0;
            return {
                typeOfUpdate: AuthorizationKeysUpdateType.Level2KeysUpdate,
                updatePayload: trAuthorizationsV0(update),
            };
        }
        case 'level2KeysUpdateV1': {
            const update = keyUpdate.updateType.level2KeysUpdateV1;
            const v0 = unwrap(update.v0);
            return {
                typeOfUpdate: AuthorizationKeysUpdateType.Level2KeysUpdateV1,
                updatePayload: {
                    ...trAuthorizationsV0(v0),
                    version: 1,
                    cooldownParameters: trAccessStructure(update.parameterCooldown),
                    timeParameters: trAccessStructure(update.parameterTime),
                },
            };
        }
        case void 0:
            throw new Error('Unexpected missing update type');
    }
}
function trAuthorizationsV0(auths) {
    return {
        version: 0,
        keys: auths.keys.map(trUpdatePublicKey),
        addIdentityProvider: trAccessStructure(auths.addIdentityProvider),
        addAnonymityRevoker: trAccessStructure(auths.addAnonymityRevoker),
        emergency: trAccessStructure(auths.emergency),
        electionDifficulty: trAccessStructure(auths.parameterConsensus),
        euroPerEnergy: trAccessStructure(auths.parameterEuroPerEnergy),
        foundationAccount: trAccessStructure(auths.parameterFoundationAccount),
        microGTUPerEuro: trAccessStructure(auths.parameterMicroCCDPerEuro),
        paramGASRewards: trAccessStructure(auths.parameterGasRewards),
        mintDistribution: trAccessStructure(auths.parameterMintDistribution),
        transactionFeeDistribution: trAccessStructure(auths.parameterTransactionFeeDistribution),
        poolParameters: trAccessStructure(auths.poolParameters),
        protocol: trAccessStructure(auths.protocol),
    };
}
function trAuthorizationsV1(auths) {
    return {
        ...trAuthorizationsV0(unwrap(auths.v0)),
        version: 1,
        cooldownParameters: trAccessStructure(auths.parameterCooldown),
        timeParameters: trAccessStructure(auths.parameterTime),
    };
}
function trMemoEvent(memo) {
    return {
        tag: TransactionEventTag.TransferMemo,
        memo: unwrapValToHex(memo),
    };
}
function trTransactionType(type) {
    switch (type) {
        case TransactionType.DEPLOY_MODULE:
            return TransactionKindString.DeployModule;
        case TransactionType.INIT_CONTRACT:
            return TransactionKindString.InitContract;
        case TransactionType.UPDATE:
            return TransactionKindString.Update;
        case TransactionType.TRANSFER:
            return TransactionKindString.Transfer;
        case TransactionType.ADD_BAKER:
            return TransactionKindString.AddBaker;
        case TransactionType.REMOVE_BAKER:
            return TransactionKindString.RemoveBaker;
        case TransactionType.UPDATE_BAKER_STAKE:
            return TransactionKindString.UpdateBakerStake;
        case TransactionType.UPDATE_BAKER_RESTAKE_EARNINGS:
            return TransactionKindString.UpdateBakerRestakeEarnings;
        case TransactionType.UPDATE_BAKER_KEYS:
            return TransactionKindString.UpdateBakerKeys;
        case TransactionType.UPDATE_CREDENTIAL_KEYS:
            return TransactionKindString.UpdateCredentialKeys;
        case TransactionType.ENCRYPTED_AMOUNT_TRANSFER:
            return TransactionKindString.EncryptedAmountTransfer;
        case TransactionType.TRANSFER_TO_ENCRYPTED:
            return TransactionKindString.TransferToEncrypted;
        case TransactionType.TRANSFER_TO_PUBLIC:
            return TransactionKindString.TransferToPublic;
        case TransactionType.TRANSFER_WITH_SCHEDULE:
            return TransactionKindString.TransferWithSchedule;
        case TransactionType.UPDATE_CREDENTIALS:
            return TransactionKindString.UpdateCredentials;
        case TransactionType.REGISTER_DATA:
            return TransactionKindString.RegisterData;
        case TransactionType.TRANSFER_WITH_MEMO:
            return TransactionKindString.TransferWithMemo;
        case TransactionType.ENCRYPTED_AMOUNT_TRANSFER_WITH_MEMO:
            return TransactionKindString.EncryptedAmountTransferWithMemo;
        case TransactionType.TRANSFER_WITH_SCHEDULE_AND_MEMO:
            return TransactionKindString.TransferWithScheduleAndMemo;
        case TransactionType.CONFIGURE_BAKER:
            return TransactionKindString.ConfigureBaker;
        case TransactionType.CONFIGURE_DELEGATION:
            return TransactionKindString.ConfigureDelegation;
        case void 0:
            return void 0;
    }
}
function trAccountTransactionSummary(details, baseBlockItemSummary) {
    var _a, _b, _c, _d, _e, _f, _g, _h, _i, _j, _k, _l, _m, _n;
    const base = {
        ...baseBlockItemSummary,
        type: TransactionSummaryType.AccountTransaction,
        cost: unwrap((_a = details.cost) == null ? void 0 : _a.value),
        sender: fromProto(unwrap(details.sender)),
    };
    const effect = unwrap((_b = details.effects) == null ? void 0 : _b.effect);
    switch (effect.oneofKind) {
        case 'none':
            return {
                ...base,
                transactionType: TransactionKindString.Failed,
                failedTransactionType: trTransactionType(effect.none.transactionType),
                rejectReason: trRejectReason(effect.none.rejectReason),
            };
        case 'moduleDeployed': {
            const event = {
                tag: TransactionEventTag.ModuleDeployed,
                contents: unwrapValToHex(effect.moduleDeployed),
            };
            return {
                ...base,
                transactionType: TransactionKindString.DeployModule,
                moduleDeployed: event,
            };
        }
        case 'contractInitialized': {
            const contractInit = effect.contractInitialized;
            const event = {
                tag: TransactionEventTag.ContractInitialized,
                address: fromProto9(unwrap(contractInit.address)),
                amount: fromProto2(unwrap(contractInit.amount)),
                initName: fromProto12(unwrap(contractInit.initName)),
                events: unwrap(contractInit.events.map(unwrapValToHex)),
                contractVersion: unwrap(contractInit.contractVersion),
                ref: unwrapValToHex(contractInit.originRef),
            };
            return {
                ...base,
                transactionType: TransactionKindString.InitContract,
                contractInitialized: event,
            };
        }
        case 'contractUpdateIssued':
            return {
                ...base,
                transactionType: TransactionKindString.Update,
                events: effect.contractUpdateIssued.effects.map(trContractTraceElement),
            };
        case 'accountTransfer': {
            const transfer = {
                tag: TransactionEventTag.Transferred,
                amount: fromProto2(unwrap(effect.accountTransfer.amount)),
                to: fromProto(unwrap(effect.accountTransfer.receiver)),
            };
            if (effect.accountTransfer.memo) {
                return {
                    ...base,
                    transactionType: TransactionKindString.TransferWithMemo,
                    transfer,
                    memo: trMemoEvent(effect.accountTransfer.memo),
                };
            } else {
                return {
                    ...base,
                    transactionType: TransactionKindString.Transfer,
                    transfer,
                };
            }
        }
        case 'bakerAdded':
            return {
                ...base,
                transactionType: TransactionKindString.AddBaker,
                bakerAdded: trBakerEvent(
                    {
                        event: effect,
                    },
                    base.sender
                ),
            };
        case 'bakerRemoved':
            return {
                ...base,
                transactionType: TransactionKindString.RemoveBaker,
                bakerRemoved: trBakerEvent(
                    {
                        event: effect,
                    },
                    base.sender
                ),
            };
        case 'bakerRestakeEarningsUpdated':
            return {
                ...base,
                transactionType: TransactionKindString.UpdateBakerRestakeEarnings,
                bakerRestakeEarningsUpdated: trBakerEvent(
                    {
                        event: effect,
                    },
                    base.sender
                ),
            };
        case 'bakerKeysUpdated':
            return {
                ...base,
                transactionType: TransactionKindString.UpdateBakerKeys,
                bakerKeysUpdated: trBakerEvent(
                    {
                        event: effect,
                    },
                    base.sender
                ),
            };
        case 'bakerStakeUpdated': {
            const increased = (_c = effect.bakerStakeUpdated.update) == null ? void 0 : _c.increased;
            const update = effect.bakerStakeUpdated.update;
            const event = {
                tag: increased ? TransactionEventTag.BakerStakeIncreased : TransactionEventTag.BakerStakeDecreased,
                bakerId: unwrap((_d = update == null ? void 0 : update.bakerId) == null ? void 0 : _d.value),
                newStake: fromProto2(unwrap(update == null ? void 0 : update.newStake)),
                account: base.sender,
            };
            return {
                ...base,
                transactionType: TransactionKindString.UpdateBakerStake,
                bakerStakeChanged: event,
            };
        }
        case 'encryptedAmountTransferred': {
            const transfer = effect.encryptedAmountTransferred;
            const removed = {
                tag: TransactionEventTag.EncryptedAmountsRemoved,
                inputAmount: unwrapValToHex((_e = transfer.removed) == null ? void 0 : _e.inputAmount),
                newAmount: unwrapValToHex((_f = transfer.removed) == null ? void 0 : _f.newAmount),
                upToIndex: Number(unwrap((_g = transfer.removed) == null ? void 0 : _g.upToIndex)),
                account: base.sender,
            };
            const added = {
                tag: TransactionEventTag.NewEncryptedAmount,
                account: fromProto(unwrap((_h = transfer.added) == null ? void 0 : _h.receiver)),
                newIndex: Number(unwrap((_i = transfer.added) == null ? void 0 : _i.newIndex)),
                encryptedAmount: unwrapValToHex((_j = transfer.added) == null ? void 0 : _j.encryptedAmount),
            };
            if (transfer.memo) {
                return {
                    ...base,
                    transactionType: TransactionKindString.EncryptedAmountTransferWithMemo,
                    removed,
                    added,
                    memo: trMemoEvent(transfer.memo),
                };
            } else {
                return {
                    ...base,
                    transactionType: TransactionKindString.EncryptedAmountTransfer,
                    removed,
                    added,
                };
            }
        }
        case 'transferredToEncrypted': {
            const transfer = effect.transferredToEncrypted;
            const added = {
                tag: TransactionEventTag.EncryptedSelfAmountAdded,
                account: fromProto(unwrap(transfer.account)),
                amount: fromProto2(unwrap(transfer.amount)),
                newAmount: unwrapValToHex(transfer.newAmount),
            };
            return {
                ...base,
                transactionType: TransactionKindString.TransferToEncrypted,
                added,
            };
        }
        case 'transferredToPublic': {
            const transfer = effect.transferredToPublic;
            const removed = {
                tag: TransactionEventTag.EncryptedAmountsRemoved,
                account: base.sender,
                inputAmount: unwrapValToHex((_k = transfer.removed) == null ? void 0 : _k.inputAmount),
                newAmount: unwrapValToHex((_l = transfer.removed) == null ? void 0 : _l.newAmount),
                upToIndex: Number(unwrap((_m = transfer.removed) == null ? void 0 : _m.upToIndex)),
            };
            const added = {
                tag: TransactionEventTag.AmountAddedByDecryption,
                account: base.sender,
                amount: fromProto2(unwrap(transfer.amount)),
            };
            return {
                ...base,
                transactionType: TransactionKindString.TransferToPublic,
                removed,
                added,
            };
        }
        case 'transferredWithSchedule': {
            const transfer = effect.transferredWithSchedule;
            const event = {
                tag: TransactionEventTag.TransferredWithSchedule,
                to: fromProto(unwrap(transfer.receiver)),
                amount: transfer.amount.map(trNewRelease),
            };
            if (transfer.memo) {
                return {
                    ...base,
                    transactionType: TransactionKindString.TransferWithScheduleAndMemo,
                    transfer: event,
                    memo: trMemoEvent(transfer.memo),
                };
            } else {
                return {
                    ...base,
                    transactionType: TransactionKindString.TransferWithSchedule,
                    event,
                };
            }
        }
        case 'credentialKeysUpdated': {
            const event = {
                tag: TransactionEventTag.CredentialKeysUpdated,
                credId: unwrapValToHex(effect.credentialKeysUpdated),
            };
            return {
                ...base,
                transactionType: TransactionKindString.UpdateCredentialKeys,
                keysUpdated: event,
            };
        }
        case 'credentialsUpdated': {
            const update = effect.credentialsUpdated;
            const event = {
                tag: TransactionEventTag.CredentialsUpdated,
                newCredIds: update.newCredIds.map(unwrapValToHex),
                removedCredIds: update.removedCredIds.map(unwrapValToHex),
                newThreshold: unwrap((_n = update.newThreshold) == null ? void 0 : _n.value),
                account: base.sender,
            };
            return {
                ...base,
                transactionType: TransactionKindString.UpdateCredentials,
                credentialsUpdated: event,
            };
        }
        case 'dataRegistered': {
            const event = {
                tag: TransactionEventTag.DataRegistered,
                data: unwrapValToHex(effect.dataRegistered),
            };
            return {
                ...base,
                transactionType: TransactionKindString.RegisterData,
                dataRegistered: event,
            };
        }
        case 'bakerConfigured':
            return {
                ...base,
                transactionType: TransactionKindString.ConfigureBaker,
                events: effect.bakerConfigured.events.map((event) => trBakerEvent(event, base.sender)),
            };
        case 'delegationConfigured':
            return {
                ...base,
                transactionType: TransactionKindString.ConfigureDelegation,
                events: effect.delegationConfigured.events.map((x) => trDelegationEvent(x, base.sender)),
            };
        case void 0:
            throw Error('Failed translating AccountTransactionEffects, encountered undefined value');
    }
}
function blockItemSummary(summary) {
    var _a, _b;
    const base = {
        index: unwrap((_a = summary.index) == null ? void 0 : _a.value),
        energyCost: fromProto5(unwrap(summary.energyCost)),
        hash: fromProto10(unwrap(summary.hash)),
    };
    if (summary.details.oneofKind === 'accountTransaction') {
        return trAccountTransactionSummary(summary.details.accountTransaction, base);
    } else if (summary.details.oneofKind === 'accountCreation') {
        return {
            type: TransactionSummaryType.AccountCreation,
            ...base,
            credentialType:
                summary.details.accountCreation.credentialType === CredentialType.INITIAL ? 'initial' : 'normal',
            address: fromProto(unwrap(summary.details.accountCreation.address)),
            regId: unwrapValToHex(summary.details.accountCreation.regId),
        };
    } else if (summary.details.oneofKind === 'update') {
        return {
            type: TransactionSummaryType.UpdateTransaction,
            ...base,
            effectiveTime: unwrap((_b = summary.details.update.effectiveTime) == null ? void 0 : _b.value),
            payload: trUpdatePayload(summary.details.update.payload),
        };
    } else {
        throw Error('Invalid BlockItemSummary encountered!');
    }
}
function trBlockItemSummaryInBlock(summary) {
    return {
        blockHash: fromProto11(unwrap(summary.blockHash)),
        summary: blockItemSummary(unwrap(summary.outcome)),
    };
}
function blockItemStatus(itemStatus) {
    switch (itemStatus.status.oneofKind) {
        case 'received':
            return {
                status: TransactionStatusEnum.Received,
            };
        case 'committed':
            return {
                status: TransactionStatusEnum.Committed,
                outcomes: itemStatus.status.committed.outcomes.map(trBlockItemSummaryInBlock),
            };
        case 'finalized':
            return {
                status: TransactionStatusEnum.Finalized,
                outcome: trBlockItemSummaryInBlock(unwrap(itemStatus.status.finalized.outcome)),
            };
        default:
            throw Error('BlockItemStatus was undefined!');
    }
}
function invokeInstanceResponse(invokeResponse) {
    switch (invokeResponse.result.oneofKind) {
        case 'failure':
            return {
                tag: 'failure',
                usedEnergy: fromProto5(unwrap(invokeResponse.result.failure.usedEnergy)),
                reason: trRejectReason(invokeResponse.result.failure.reason),
                returnValue:
                    invokeResponse.result.failure.returnValue === void 0
                        ? void 0
                        : fromBuffer4(invokeResponse.result.failure.returnValue),
            };
        case 'success': {
            const result = invokeResponse.result.success;
            return {
                tag: 'success',
                usedEnergy: fromProto5(unwrap(result.usedEnergy)),
                returnValue: result.returnValue === void 0 ? void 0 : fromBuffer4(result.returnValue),
                events: result.effects.map(trContractTraceElement),
            };
        }
        default:
            throw Error('BlockItemStatus was undefined!');
    }
}
function trInstanceInfoCommon(info) {
    var _a;
    return {
        amount: fromProto2(unwrap(info.amount)),
        sourceModule: fromProto6(unwrap(info.sourceModule)),
        owner: fromBuffer(unwrap((_a = info.owner) == null ? void 0 : _a.value)),
        methods: info.methods.map(fromProto3),
        name: fromProto12(unwrap(info.name)),
    };
}
function instanceInfo(instanceInfo2) {
    var _a;
    switch (instanceInfo2.version.oneofKind) {
        case 'v0':
            return {
                ...trInstanceInfoCommon(instanceInfo2.version.v0),
                version: 0,
                model: import_buffer25.Buffer.from(
                    unwrap((_a = instanceInfo2.version.v0.model) == null ? void 0 : _a.value)
                ),
            };
        case 'v1':
            return {
                ...trInstanceInfoCommon(instanceInfo2.version.v1),
                version: 1,
            };
        default:
            throw Error('InstanceInfo was undefined');
    }
}
function commonBlockInfo(blockInfo2) {
    var _a;
    return {
        hash: fromProto11(unwrap(blockInfo2.hash)),
        height: unwrap((_a = blockInfo2.height) == null ? void 0 : _a.value),
    };
}
function instanceStateKVPair(state) {
    return {
        key: unwrapToHex(state.key),
        value: unwrapToHex(state.value),
    };
}
function ipInfo(ip) {
    var _a;
    return {
        ipIdentity: unwrap((_a = ip.identity) == null ? void 0 : _a.value),
        ipDescription: unwrap(ip.description),
        ipVerifyKey: unwrapValToHex(ip.verifyKey),
        ipCdiVerifyKey: unwrapValToHex(ip.cdiVerifyKey),
    };
}
function arInfo(ar) {
    var _a;
    return {
        arIdentity: unwrap((_a = ar.identity) == null ? void 0 : _a.value),
        arDescription: unwrap(ar.description),
        arPublicKey: unwrapValToHex(ar.publicKey),
    };
}
function blockInfo(blockInfo2) {
    var _a, _b, _c, _d, _e, _f, _g;
    const common = {
        blockParent: fromProto11(unwrap(blockInfo2.parentBlock)),
        blockHash: fromProto11(unwrap(blockInfo2.hash)),
        blockStateHash: unwrapValToHex(blockInfo2.stateHash),
        blockLastFinalized: fromProto11(unwrap(blockInfo2.lastFinalizedBlock)),
        blockHeight: unwrap((_a = blockInfo2.height) == null ? void 0 : _a.value),
        blockBaker: (_b = blockInfo2.baker) == null ? void 0 : _b.value,
        blockArriveTime: trTimestamp(blockInfo2.arriveTime),
        blockReceiveTime: trTimestamp(blockInfo2.receiveTime),
        blockSlotTime: trTimestamp(blockInfo2.slotTime),
        finalized: blockInfo2.finalized,
        transactionCount: BigInt(blockInfo2.transactionCount),
        transactionsSize: BigInt(blockInfo2.transactionsSize),
        transactionEnergyCost: fromProto5(unwrap(blockInfo2.transactionsEnergyCost)),
        genesisIndex: unwrap((_c = blockInfo2.genesisIndex) == null ? void 0 : _c.value),
        eraBlockHeight: Number(unwrap((_d = blockInfo2.eraBlockHeight) == null ? void 0 : _d.value)),
        protocolVersion: translateProtocolVersion(blockInfo2.protocolVersion),
    };
    if (blockInfo2.protocolVersion < ProtocolVersion.PROTOCOL_VERSION_6) {
        const bi0 = {
            ...common,
            version: 0,
            blockSlot: unwrap((_e = blockInfo2.slotNumber) == null ? void 0 : _e.value),
        };
        return bi0;
    }
    const bi1 = {
        ...common,
        version: 1,
        round: unwrap((_f = blockInfo2.round) == null ? void 0 : _f.value),
        epoch: unwrap((_g = blockInfo2.epoch) == null ? void 0 : _g.value),
    };
    return bi1;
}
function delegatorInfo(delegatorInfo2) {
    return {
        account: fromProto(unwrap(delegatorInfo2.account)),
        stake: fromProto2(unwrap(delegatorInfo2.stake)),
        ...(delegatorInfo2.pendingChange && {
            pendingChange: trPendingChange(delegatorInfo2.pendingChange),
        }),
    };
}
function branch(branchV2) {
    return {
        blockHash: fromProto11(unwrap(branchV2.blockHash)),
        children: branchV2.children.map(branch),
    };
}
function trBakerElectionInfo(bakerElectionInfo) {
    var _a;
    return {
        baker: unwrap((_a = bakerElectionInfo.baker) == null ? void 0 : _a.value),
        account: fromProto(unwrap(bakerElectionInfo.account)),
        lotteryPower: bakerElectionInfo.lotteryPower,
    };
}
function electionInfo(electionInfo2) {
    var _a;
    const common = {
        electionNonce: unwrapValToHex(electionInfo2.electionNonce),
        bakerElectionInfo: electionInfo2.bakerElectionInfo.map(trBakerElectionInfo),
    };
    if (electionInfo2.electionDifficulty === void 0) {
        return {
            ...common,
            version: 1,
        };
    }
    return {
        ...common,
        version: 0,
        electionDifficulty: trAmountFraction((_a = electionInfo2.electionDifficulty) == null ? void 0 : _a.value),
    };
}
function nextUpdateSequenceNumbers(nextNums) {
    var _a, _b, _c, _d, _e, _f, _g, _h, _i, _j, _k, _l, _m, _n, _o, _p, _q, _r, _s, _t;
    return {
        rootKeys: unwrap((_a = nextNums.rootKeys) == null ? void 0 : _a.value),
        level1Keys: unwrap((_b = nextNums.level1Keys) == null ? void 0 : _b.value),
        level2Keys: unwrap((_c = nextNums.level2Keys) == null ? void 0 : _c.value),
        protocol: unwrap((_d = nextNums.protocol) == null ? void 0 : _d.value),
        electionDifficulty: unwrap((_e = nextNums.electionDifficulty) == null ? void 0 : _e.value),
        euroPerEnergy: unwrap((_f = nextNums.euroPerEnergy) == null ? void 0 : _f.value),
        microCcdPerEuro: unwrap((_g = nextNums.microCcdPerEuro) == null ? void 0 : _g.value),
        foundationAccount: unwrap((_h = nextNums.foundationAccount) == null ? void 0 : _h.value),
        mintDistribution: unwrap((_i = nextNums.mintDistribution) == null ? void 0 : _i.value),
        transactionFeeDistribution: unwrap((_j = nextNums.transactionFeeDistribution) == null ? void 0 : _j.value),
        gasRewards: unwrap((_k = nextNums.gasRewards) == null ? void 0 : _k.value),
        poolParameters: unwrap((_l = nextNums.poolParameters) == null ? void 0 : _l.value),
        addAnonymityRevoker: unwrap((_m = nextNums.addAnonymityRevoker) == null ? void 0 : _m.value),
        addIdentityProvider: unwrap((_n = nextNums.addIdentityProvider) == null ? void 0 : _n.value),
        cooldownParameters: unwrap((_o = nextNums.cooldownParameters) == null ? void 0 : _o.value),
        timeParameters: unwrap((_p = nextNums.timeParameters) == null ? void 0 : _p.value),
        timeoutParameters: unwrap((_q = nextNums.timeoutParameters) == null ? void 0 : _q.value),
        minBlockTime: unwrap((_r = nextNums.minBlockTime) == null ? void 0 : _r.value),
        blockEnergyLimit: unwrap((_s = nextNums.blockEnergyLimit) == null ? void 0 : _s.value),
        finalizationCommiteeParameters: unwrap(
            (_t = nextNums.finalizationCommitteeParameters) == null ? void 0 : _t.value
        ),
    };
}
function trPassiveCommitteeInfo(passiveCommitteeInfo) {
    const passiveCommitteeInfoV2 = NodeInfo_BakerConsensusInfo_PassiveCommitteeInfo;
    switch (passiveCommitteeInfo) {
        case passiveCommitteeInfoV2.NOT_IN_COMMITTEE:
            return PassiveCommitteeInfo.NotInCommittee;
        case passiveCommitteeInfoV2.ADDED_BUT_NOT_ACTIVE_IN_COMMITTEE:
            return PassiveCommitteeInfo.AddedButNotActiveInCommittee;
        case passiveCommitteeInfoV2.ADDED_BUT_WRONG_KEYS:
            return PassiveCommitteeInfo.AddedButWrongKeys;
    }
}
function trBakerConsensusInfoStatus(consensusInfo2) {
    if (consensusInfo2.status.oneofKind === 'passiveCommitteeInfo') {
        return {
            tag: 'passiveCommitteeInfo',
            passiveCommitteeInfo: trPassiveCommitteeInfo(consensusInfo2.status.passiveCommitteeInfo),
        };
    } else if (consensusInfo2.status.oneofKind === 'activeBakerCommitteeInfo') {
        return {
            tag: 'activeBakerCommitteeInfo',
        };
    } else if (consensusInfo2.status.oneofKind === 'activeFinalizerCommitteeInfo') {
        return {
            tag: 'activeFinalizerCommitteeInfo',
        };
    } else {
        throw Error('Error translating NodeInfoConsensusStatus: unexpected undefined');
    }
}
function trNetworkInfo(networkInfo) {
    var _a;
    return {
        nodeId: unwrap((_a = networkInfo == null ? void 0 : networkInfo.nodeId) == null ? void 0 : _a.value),
        peerTotalSent: unwrap(networkInfo == null ? void 0 : networkInfo.peerTotalSent),
        peerTotalReceived: unwrap(networkInfo == null ? void 0 : networkInfo.peerTotalReceived),
        avgBpsIn: unwrap(networkInfo == null ? void 0 : networkInfo.avgBpsIn),
        avgBpsOut: unwrap(networkInfo == null ? void 0 : networkInfo.avgBpsOut),
    };
}
function trNodeInfo_Node(node) {
    var _a;
    const status = node.consensusStatus;
    switch (status.oneofKind) {
        case 'active':
            return {
                tag: 'active',
                bakerId: unwrap((_a = status.active.bakerId) == null ? void 0 : _a.value),
                status: trBakerConsensusInfoStatus(status.active),
            };
        case 'notRunning':
            return {
                tag: 'notRunning',
            };
        case 'passive':
            return {
                tag: 'passive',
            };
        case void 0:
            throw Error('Error translating nodeinfo: unexpected undefined');
    }
}
function nodeInfo(nodeInfo2) {
    let details;
    if (nodeInfo2.details.oneofKind === 'bootstrapper') {
        details = {
            tag: 'bootstrapper',
        };
    } else if (nodeInfo2.details.oneofKind === 'node') {
        details = {
            tag: 'node',
            consensusStatus: trNodeInfo_Node(nodeInfo2.details.node),
        };
    } else {
        throw Error('Invalid nodeinfo');
    }
    return {
        peerVersion: nodeInfo2.peerVersion,
        localTime: fromProto13(unwrap(nodeInfo2.localTime)),
        peerUptime: fromProto14(unwrap(nodeInfo2.peerUptime)),
        networkInfo: trNetworkInfo(nodeInfo2.networkInfo),
        details,
    };
}
function trCatchupStatus(catchupStatus) {
    const CatchupStatus = PeersInfo_Peer_CatchupStatus;
    switch (catchupStatus) {
        case CatchupStatus.CATCHINGUP:
            return NodeCatchupStatus.CatchingUp;
        case CatchupStatus.PENDING:
            return NodeCatchupStatus.Pending;
        case CatchupStatus.UPTODATE:
            return NodeCatchupStatus.UpToDate;
    }
}
function trPeerNetworkStats(networkStats) {
    return {
        packetsSent: unwrap(networkStats == null ? void 0 : networkStats.packetsSent),
        packetsReceived: unwrap(networkStats == null ? void 0 : networkStats.packetsReceived),
        latency: unwrap(networkStats == null ? void 0 : networkStats.latency),
    };
}
function peerInfo(peerInfo2) {
    var _a, _b, _c, _d, _e;
    let consensusInfo2;
    if (peerInfo2.consensusInfo.oneofKind === 'bootstrapper') {
        consensusInfo2 = {
            tag: 'bootstrapper',
        };
    } else if (peerInfo2.consensusInfo.oneofKind === 'nodeCatchupStatus') {
        consensusInfo2 = {
            tag: 'nodeCatchupStatus',
            catchupStatus: trCatchupStatus(peerInfo2.consensusInfo.nodeCatchupStatus),
        };
    } else {
        throw Error('Error translating peerInfo: unexpected undefined');
    }
    return {
        peerId: unwrap((_a = peerInfo2.peerId) == null ? void 0 : _a.value),
        ip: unwrap((_c = (_b = peerInfo2.socketAddress) == null ? void 0 : _b.ip) == null ? void 0 : _c.value),
        port: unwrap((_e = (_d = peerInfo2.socketAddress) == null ? void 0 : _d.port) == null ? void 0 : _e.value),
        networkStats: trPeerNetworkStats(peerInfo2.networkStats),
        consensusInfo: consensusInfo2,
    };
}
function trAccountAmount(accountAmount) {
    return {
        account: fromProto(unwrap(accountAmount.account)),
        amount: fromProto2(unwrap(accountAmount.amount)),
    };
}
function blockSpecialEvent(specialEvent) {
    var _a, _b, _c;
    const event = specialEvent.event;
    switch (event.oneofKind) {
        case 'bakingRewards': {
            return {
                tag: 'bakingRewards',
                bakingRewards: unwrap(event.bakingRewards.bakerRewards).entries.map(trAccountAmount),
                remainder: fromProto2(unwrap(event.bakingRewards.remainder)),
            };
        }
        case 'mint': {
            return {
                tag: 'mint',
                mintBakingReward: fromProto2(unwrap(event.mint.mintBakingReward)),
                mintFinalizationReward: fromProto2(unwrap(event.mint.mintFinalizationReward)),
                mintPlatformDevelopmentCharge: fromProto2(unwrap(event.mint.mintPlatformDevelopmentCharge)),
                foundationAccount: fromProto(unwrap(event.mint.foundationAccount)),
            };
        }
        case 'finalizationRewards': {
            return {
                tag: 'finalizationRewards',
                finalizationRewards:
                    (_a = event.finalizationRewards.finalizationRewards) == null
                        ? void 0
                        : _a.entries.map(trAccountAmount),
                remainder: fromProto2(unwrap(event.finalizationRewards.remainder)),
            };
        }
        case 'blockReward': {
            return {
                tag: 'blockReward',
                transactionFees: fromProto2(unwrap(event.blockReward.transactionFees)),
                oldGasAccount: fromProto2(unwrap(event.blockReward.oldGasAccount)),
                newGasAccount: fromProto2(unwrap(event.blockReward.newGasAccount)),
                bakerReward: fromProto2(unwrap(event.blockReward.bakerReward)),
                foundationCharge: fromProto2(unwrap(event.blockReward.foundationCharge)),
                baker: fromProto(unwrap(event.blockReward.baker)),
                foundationAccount: fromProto(unwrap(event.blockReward.baker)),
            };
        }
        case 'paydayFoundationReward': {
            return {
                tag: 'paydayFoundationReward',
                foundationAccount: fromProto(unwrap(event.paydayFoundationReward.foundationAccount)),
                developmentCharge: fromProto2(unwrap(event.paydayFoundationReward.developmentCharge)),
            };
        }
        case 'paydayAccountReward': {
            return {
                tag: 'paydayAccountReward',
                account: fromProto(unwrap(event.paydayAccountReward.account)),
                transactionFees: fromProto2(unwrap(event.paydayAccountReward.transactionFees)),
                bakerReward: fromProto2(unwrap(event.paydayAccountReward.bakerReward)),
                finalizationReward: fromProto2(unwrap(event.paydayAccountReward.finalizationReward)),
            };
        }
        case 'blockAccrueReward': {
            return {
                tag: 'blockAccrueReward',
                transactionFees: fromProto2(unwrap(event.blockAccrueReward.transactionFees)),
                oldGasAccount: fromProto2(unwrap(event.blockAccrueReward.oldGasAccount)),
                newGasAccount: fromProto2(unwrap(event.blockAccrueReward.newGasAccount)),
                bakerReward: fromProto2(unwrap(event.blockAccrueReward.bakerReward)),
                passiveReward: fromProto2(unwrap(event.blockAccrueReward.passiveReward)),
                foundationCharge: fromProto2(unwrap(event.blockAccrueReward.foundationCharge)),
                baker: unwrap((_b = event.blockAccrueReward.baker) == null ? void 0 : _b.value),
            };
        }
        case 'paydayPoolReward': {
            const poolOwner = (_c = event.paydayPoolReward.poolOwner) == null ? void 0 : _c.value;
            return {
                tag: 'paydayPoolReward',
                transactionFees: fromProto2(unwrap(event.paydayPoolReward.transactionFees)),
                bakerReward: fromProto2(unwrap(event.paydayPoolReward.bakerReward)),
                finalizationReward: fromProto2(unwrap(event.paydayPoolReward.finalizationReward)),
                ...(poolOwner !== void 0 && { poolOwner }),
            };
        }
        case void 0: {
            throw Error('Error translating BlockSpecialEvent: unexpected undefined');
        }
    }
}
function trFinalizationSummaryParty(party) {
    var _a;
    return {
        baker: unwrap((_a = party.baker) == null ? void 0 : _a.value),
        weight: party.weight,
        signed: party.signed,
    };
}
function trFinalizationSummary(summary) {
    var _a, _b;
    return {
        block: fromProto11(unwrap(summary.block)),
        index: unwrap((_a = summary.index) == null ? void 0 : _a.value),
        delay: unwrap((_b = summary.delay) == null ? void 0 : _b.value),
        finalizers: summary.finalizers.map(trFinalizationSummaryParty),
    };
}
function blockFinalizationSummary(finalizationSummary) {
    const summary = finalizationSummary.summary;
    if (summary.oneofKind === 'none') {
        return {
            tag: 'none',
        };
    } else if (summary.oneofKind === 'record') {
        return {
            tag: 'record',
            record: trFinalizationSummary(summary.record),
        };
    } else {
        throw Error('Error translating BlockFinalizationSummary: unexpected undefined');
    }
}
function blockCertificates(certs) {
    return {
        ...(certs.quorumCertificate !== void 0 && {
            quorumCertificate: quorumCertificate(certs.quorumCertificate),
        }),
        ...(certs.timeoutCertificate !== void 0 && {
            timeoutCertificate: timeoutCertificate(certs.timeoutCertificate),
        }),
        ...(certs.epochFinalizationEntry !== void 0 && {
            epochFinalizationEntry: epochFinalizationEntry(certs.epochFinalizationEntry),
        }),
    };
}
function quorumCertificate(cert) {
    var _a, _b;
    return {
        blockHash: unwrapValToHex(cert.blockHash),
        round: unwrap((_a = cert.round) == null ? void 0 : _a.value),
        epoch: unwrap((_b = cert.epoch) == null ? void 0 : _b.value),
        aggregateSignature: unwrapValToHex(cert.aggregateSignature),
        signatories: cert.signatories.map((x) => unwrap(x.value)),
    };
}
function timeoutCertificate(cert) {
    var _a, _b;
    return {
        round: unwrap((_a = cert.round) == null ? void 0 : _a.value),
        minEpoch: unwrap((_b = cert.minEpoch) == null ? void 0 : _b.value),
        qcRoundsFirstEpoch: cert.qcRoundsFirstEpoch.map(finalizerRound),
        qcRoundsSecondEpoch: cert.qcRoundsSecondEpoch.map(finalizerRound),
        aggregateSignature: unwrapValToHex(cert.aggregateSignature),
    };
}
function epochFinalizationEntry(cert) {
    return {
        finalizedQc: quorumCertificate(unwrap(cert.finalizedQc)),
        successorQc: quorumCertificate(unwrap(cert.successorQc)),
        successorProof: unwrapValToHex(cert.successorProof),
    };
}
function finalizerRound(round2) {
    var _a;
    return {
        round: unwrap((_a = round2.round) == null ? void 0 : _a.value),
        finalizers: round2.finalizers.map((x) => x.value),
    };
}
function bakerRewardPeriodInfo(bakerRewardPeriod) {
    var _a, _b, _c;
    return {
        baker: bakerInfo(unwrap(bakerRewardPeriod.baker)),
        effectiveStake: fromMicroCcd(unwrap((_a = bakerRewardPeriod.effectiveStake) == null ? void 0 : _a.value)),
        commissionRates: trCommissionRates(bakerRewardPeriod.commissionRates),
        equityCapital: fromMicroCcd(unwrap((_b = bakerRewardPeriod.equityCapital) == null ? void 0 : _b.value)),
        delegatedCapital: fromMicroCcd(unwrap((_c = bakerRewardPeriod.delegatedCapital) == null ? void 0 : _c.value)),
        isFinalizer: bakerRewardPeriod.isFinalizer,
    };
}
function bakerInfo(bakerInfo2) {
    var _a;
    return {
        bakerId: unwrap((_a = bakerInfo2.bakerId) == null ? void 0 : _a.value),
        electionKey: unwrapValToHex(bakerInfo2.electionKey),
        signatureKey: unwrapValToHex(bakerInfo2.signatureKey),
        aggregationKey: unwrapValToHex(bakerInfo2.aggregationKey),
    };
}
function winningBaker(winningBaker2) {
    var _a, _b;
    return {
        round: unwrap((_a = winningBaker2.round) == null ? void 0 : _a.value),
        winner: unwrap((_b = winningBaker2.winner) == null ? void 0 : _b.value),
        present: winningBaker2.present,
    };
}
function accountTransactionSignatureToV2(signature) {
    function trSig(a) {
        return { value: import_buffer25.Buffer.from(a, 'hex') };
    }
    function trCredSig(a) {
        return { signatures: mapRecord(a, trSig) };
    }
    return { signatures: mapRecord(signature, trCredSig) };
}
function BlocksAtHeightRequestToV2(request) {
    if (typeof request === 'bigint') {
        return {
            blocksAtHeight: {
                oneofKind: 'absolute',
                absolute: { height: { value: request } },
            },
        };
    } else {
        return {
            blocksAtHeight: {
                oneofKind: 'relative',
                relative: {
                    genesisIndex: { value: request.genesisIndex },
                    height: { value: request.height },
                    restrict: request.restrict,
                },
            },
        };
    }
}

// node_modules/@concordium/web-sdk/lib/esm/constants.js
var DEFAULT_INVOKE_ENERGY = create2(1000000n);

// node_modules/@concordium/web-sdk/lib/esm/grpc/GRPCClient.js
var ConcordiumGRPCClient = class {
    /**
     * Initialize a gRPC client for a specific concordium node.
     * @param transport RpcTransport to send communication over
     */
    constructor(transport) {
        this.client = new QueriesClient(transport);
        this.healthClient = new HealthClient(transport);
    }
    /**
     * Retrieves the next account nonce for the given account. The account nonce is
     * used in all account transactions as part of their header.
     *
     * {@codeblock ~~:nodejs/client/getNextAccountSequenceNumber.ts#documentation-snippet}
     *
     * @param accountAddress base58 account address to get the next account nonce for.
     *
     * @returns the next account nonce, and a boolean indicating if the nonce is reliable.
     */
    async getNextAccountNonce(accountAddress) {
        const address = {
            value: toBuffer2(accountAddress),
        };
        const response = await this.client.getNextAccountSequenceNumber(address).response;
        return nextAccountSequenceNumber(response);
    }
    /**
     * Retrieves the consensus status information from the node. Note that the optional
     * fields will only be unavailable for a newly started node that has not processed
     * enough data yet.
     *
     * {@codeblock ~~:nodejs/client/getCryptographicParameters.ts#documentation-snippet}
     *
     * @param blockHash optional block hash to get the cryptographic parameters at, otherwise retrieves from last finalized block.
     * @returns the global cryptographic parameters at the given block, or undefined it the block does not exist.
     */
    async getCryptographicParameters(blockHash) {
        const blockHashInput = getBlockHashInput(blockHash);
        const response = await this.client.getCryptographicParameters(blockHashInput).response;
        return cryptographicParameters(response);
    }
    /**
     * Retrieves the account info for the given account. If the provided block
     * hash is in a block prior to the finalization of the account, then the account
     * information will not be available.
     * A credential registration id can also be provided, instead of an address. In this case
     * the node will return the account info of the account, which the corresponding credential
     * is (or was) deployed to. An account index can also be provided.
     *
     * {@codeblock ~~:nodejs/client/getAccountInfo.ts#documentation-snippet}
     *
     * @param accountIdentifier base58 account address, or a credential registration id or account index to get the account info for
     * @param blockHash optional block hash to get the account info at, otherwise retrieves from last finalized block
     *
     * @returns the account info for the provided account address.
     * @throws An error of type `RpcError` if not found in the block.
     */
    async getAccountInfo(accountIdentifier, blockHash) {
        const accountInfoRequest = {
            blockHash: getBlockHashInput(blockHash),
            accountIdentifier: getAccountIdentifierInput(accountIdentifier),
        };
        const response = await this.client.getAccountInfo(accountInfoRequest).response;
        return accountInfo(response);
    }
    /**
     * Retrieves a status for the given transaction/block item.
     *
     * {@codeblock ~~:nodejs/client/getBlockItemStatus.ts#documentation-snippet}
     *
     * @param transactionHash the transaction/block item to get a status for.
     *
     * @returns the status for the given transaction/block item, or undefined if it does not exist.
     */
    async getBlockItemStatus(transactionHash) {
        const transactionHashV2 = {
            value: toBuffer5(transactionHash),
        };
        const response = await this.client.getBlockItemStatus(transactionHashV2).response;
        return blockItemStatus(response);
    }
    /**
     * Retrieves the consensus status information from the node. Note that the optional
     * fields will only be unavailable for a newly started node that has not processed
     * enough data yet.
     *
     * {@codeblock ~~:nodejs/client/getConsensusStatus.ts#documentation-snippet}
     */
    async getConsensusStatus() {
        const response = await this.client.getConsensusInfo(Empty).response;
        return consensusInfo(response);
    }
    /**
     * Retrieves the source of the given module at the provided block.
     *
     * {@codeblock ~~:nodejs/client/getModuleSource.ts#documentation-snippet}
     *
     * @param moduleRef the module's reference, represented by the ModuleReference class.
     * @param blockHash optional block hash to get the module source at, otherwise retrieves from last finalized block
     *
     * @returns the source of the module as raw bytes.
     * @throws An error of type `RpcError` if not found in the block.
     */
    async getModuleSource(moduleRef, blockHash) {
        const moduleSourceRequest = {
            blockHash: getBlockHashInput(blockHash),
            moduleRef: { value: moduleRef.decodedModuleRef },
        };
        const response = await this.client.getModuleSource(moduleSourceRequest).response;
        if (response.module.oneofKind === 'v0') {
            return {
                version: 0,
                source: import_buffer26.Buffer.from(response.module.v0.value),
            };
        } else if (response.module.oneofKind === 'v1') {
            return {
                version: 1,
                source: import_buffer26.Buffer.from(response.module.v1.value),
            };
        } else {
            throw Error('Invalid ModuleSource response received!');
        }
    }
    /**
     * Retrieves the embedded schema of the given module at the provided block.
     *
     * {@codeblock ~~:nodejs/client/getEmbeddedSchema.ts#documentation-snippet}
     *
     * @param moduleRef the module's reference, represented by the ModuleReference class.
     * @param blockHash optional block hash to get the module embedded schema at, otherwise retrieves from last finalized block
     *
     * @returns the module schema as a buffer.
     * @throws An error of type `RpcError` if not found in the block.
     * @throws If the module or schema cannot be parsed
     */
    async getEmbeddedSchema(moduleRef, blockHash) {
        const versionedSource = await this.getModuleSource(moduleRef, blockHash);
        return wasmToSchema(versionedSource.source);
    }
    /**
     * Retrieve information about a given smart contract instance.
     *
     * {@codeblock ~~:nodejs/client/getInstanceInfo.ts#documentation-snippet}
     *
     * @param contractAddress the address of the smart contract.
     * @param blockHash optional block hash to get the smart contact instances at, otherwise retrieves from last finalized block
     *
     * @returns An object with information about the contract instance.
     * @throws An error of type `RpcError` if not found in the block.
     */
    async getInstanceInfo(contractAddress, blockHash) {
        const instanceInfoRequest = {
            blockHash: getBlockHashInput(blockHash),
            address: toProto9(contractAddress),
        };
        const response = await this.client.getInstanceInfo(instanceInfoRequest).response;
        return instanceInfo(response);
    }
    /**
     * Invokes a smart contract.
     *
     * {@codeblock ~~:nodejs/client/invokeContract.ts#documentation-snippet}
     *
     * @param context.contract The address of the smart contract that shall be evoked.
     * @param context.amount The amount of microCCD to invoke the contract with.
     * @param context.method The entrypoint (receive function) that shall be invoked.
     * @param context.parameter The serialized parameters that the contract will be invoked with.
     * @param context.energy The maximum amount of energy to allow for execution.
     * @param context.invoker The address of the invoker, if undefined uses the zero account address.
     * @param blockHash the block hash at which the contract should be invoked at. The contract is invoked in the state at the end of this block.
     *
     * @returns If the node was able to invoke, then a object describing the outcome is returned.
     * The outcome is determined by the `tag` field, which is either `success` or `failure`.
     * The `usedEnergy` field will always be present, and is the amount of NRG was used during the execution.
     * If the tag is `success`, then an `events` field is present, and it contains the events that would have been generated.
     * If invoking a V1 contract and it produces a return value, it will be present in the `returnValue` field.
     * If the tag is `failure`, then a `reason` field is present, and it contains the reason the update would have been rejected.
     * If either the block does not exist, or then node fails to parse of any of the inputs, then undefined is returned.
     */
    async invokeContract(context, blockHash) {
        var _a;
        const blockHashInput = getBlockHashInput(blockHash);
        const invokeInstanceRequest = {
            blockHash: blockHashInput,
            invoker: getInvokerInput(context.invoker),
            instance: context.contract,
            amount: { value: ((_a = context.amount) == null ? void 0 : _a.microCcdAmount) || 0n },
            entrypoint: toProto3(context.method),
            parameter: toProto4(context.parameter ?? empty()),
            energy: toProto5(context.energy ?? DEFAULT_INVOKE_ENERGY),
        };
        const response = await this.client.invokeInstance(invokeInstanceRequest).response;
        return invokeInstanceResponse(response);
    }
    /**
     * Serializes and sends an account transaction to the node to be
     * put in a block on the chain.
     *
     * Note that a transaction can still fail even if it was accepted by the node.
     * To keep track of the transaction use getTransactionStatus.
     *
     * {@codeblock ~~:nodejs/common/simpleTransfer.ts#documentation-snippet}
     *
     * @param transaction the transaction to send to the node
     * @param signature the signatures on the signing digest of the transaction
     * @returns The transaction hash as a hex-encoded string
     */
    async sendAccountTransaction(transaction, signature) {
        const accountTransactionHandler = getAccountTransactionHandler(transaction.type);
        const rawPayload = serializeAccountTransactionPayload(transaction);
        const baseEnergyCost = accountTransactionHandler.getBaseEnergyCost(transaction.payload);
        const energyCost = calculateEnergyCost(countSignatures(signature), BigInt(rawPayload.length), baseEnergyCost);
        return this.sendRawAccountTransaction(transaction.header, energyCost, rawPayload, signature);
    }
    /**
     * Sends an account transaction, with an already serialized payload, to the node to be
     * put in a block on the chain.
     *
     * Note that a transaction can still fail even if it was accepted by the node.
     * To keep track of the transaction use getTransactionStatus.
     *
     * In general, { @link ConcordiumGRPCClient.sendAccountTransaction } is the recommended
     * method to send account transactions, as this does not require the caller to serialize the payload themselves.
     *
     * @param header the transactionheader to send to the node
     * @param energyAmount the amount of energy allotted for the transaction
     * @param payload the payload serialized to a buffer
     * @param signature the signatures on the signing digest of the transaction
     * @returns The transaction hash as a byte array
     */
    async sendRawAccountTransaction(header, energyAmount, payload, signature) {
        const transactionSignature = accountTransactionSignatureToV2(signature);
        if (toDate(header.expiry) < /* @__PURE__ */ new Date()) {
            throw new Error('A transaction expiry is not allowed to be in the past: ' + toDate(header.expiry));
        }
        const convertedHeader = {
            sender: toProto(header.sender),
            sequenceNumber: toProto7(header.nonce),
            energyAmount: toProto5(energyAmount),
            expiry: toProto8(header.expiry),
        };
        const accountTransaction = {
            signature: transactionSignature,
            header: convertedHeader,
            payload: {
                payload: { oneofKind: 'rawPayload', rawPayload: payload },
            },
        };
        const sendBlockItemRequest = {
            blockItem: {
                oneofKind: 'accountTransaction',
                accountTransaction,
            },
        };
        const response = await this.client.sendBlockItem(sendBlockItemRequest).response;
        return fromProto10(response);
    }
    /**
     * Sends a credential deployment transaction, for creating a new account,
     * to the node to be put in a block on the chain.
     *
     * Note that a transaction can still fail even if it was accepted by the node.
     * To keep track of the transaction use getTransactionStatus.
     *
     * See [this](git:docs/account-creation.md) document for how this function can be used.
     *
     * @param rawPayload the serialized payload, consisting of the {@link v1.CredentialDeploymentTransaction}
     * along with corresponding signatures. This can be serialized by utilizing the `serializeCredentialDeploymentPayload` function.
     * @param expiry the expiry of the transaction
     * @returns The transaction hash
     */
    async sendCredentialDeploymentTransaction(rawPayload, expiry) {
        const credentialDeployment = {
            messageExpiry: toProto8(expiry),
            payload: {
                oneofKind: 'rawPayload',
                rawPayload,
            },
        };
        const sendBlockItemRequest = {
            blockItem: {
                oneofKind: 'credentialDeployment',
                credentialDeployment,
            },
        };
        const response = await this.client.sendBlockItem(sendBlockItemRequest).response;
        return fromProto10(response);
    }
    /**
     * Sends an update instruction transaction for updating a chain parameter
     * to the node to be put in a block on the chain.
     *
     * @param updateInstructionTransaction the update instruction transaction to send to the node
     * @param signatures map of the signatures on the hash of the serialized unsigned update instruction, with the key index as map key
     * @returns The transaction hash
     */
    async sendUpdateInstruction(updateInstructionTransaction, signatures) {
        const header = updateInstructionTransaction.header;
        const updateInstruction = {
            header: {
                sequenceNumber: {
                    value: header.sequenceNumber,
                },
                effectiveTime: {
                    value: header.effectiveTime,
                },
                timeout: {
                    value: header.timeout,
                },
            },
            payload: {
                payload: {
                    oneofKind: 'rawPayload',
                    rawPayload: import_buffer26.Buffer.from(updateInstructionTransaction.payload, 'hex'),
                },
            },
            signatures: {
                signatures: mapRecord(signatures, (x) => ({
                    value: import_buffer26.Buffer.from(x, 'hex'),
                })),
            },
        };
        const sendBlockItemRequest = {
            blockItem: {
                oneofKind: 'updateInstruction',
                updateInstruction,
            },
        };
        const response = await this.client.sendBlockItem(sendBlockItemRequest).response;
        return fromProto10(response);
    }
    /**
     * Retrieves the status of the block chain parameters at the given blockHash.
     *
     * {@codeblock ~~:nodejs/client/getBlockChainParameters.ts#documentation-snippet}
     *
     * @param blockHash the block hash of the block to get the information from.
     * @returns Info on all of the block chain parameters.
     */
    async getBlockChainParameters(blockHash) {
        const blockHashInput = getBlockHashInput(blockHash);
        const response = await this.client.getBlockChainParameters(blockHashInput).response;
        return blockChainParameters(response);
    }
    /**
     * Retrieves information on the baker pool of the given bakerId.
     *
     * {@codeblock ~~:nodejs/client/getPoolInfo.ts#documentation-snippet}
     *
     * @param blockHash the block hash of the block to get the information from.
     * @param bakerId the ID of the baker to get the status for.
     * @returns The status of the corresponding baker pool.
     */
    async getPoolInfo(bakerId, blockHash) {
        const input = {
            blockHash: getBlockHashInput(blockHash),
            baker: {
                value: bakerId,
            },
        };
        const response = await this.client.getPoolInfo(input).response;
        return bakerPoolInfo(response);
    }
    /**
     * Retrieves information on the passive delegators.
     *
     * {@codeblock ~~:nodejs/client/getPassiveDelegationInfo.ts#documentation-snippet}
     *
     * @param blockHash the block hash of the block to get the information from.
     * @returns The status of the passive delegators.
     */
    async getPassiveDelegationInfo(blockHash) {
        const input = getBlockHashInput(blockHash);
        const response = await this.client.getPassiveDelegationInfo(input).response;
        return passiveDelegationInfo(response);
    }
    /**
     * Retrieves the reward status at the given blockHash
     *
     * {@codeblock ~~:nodejs/client/getTokenomicsInfo.ts#documentation-snippet}
     *
     * @param blockHash optional block hash to get the reward status at, otherwise retrieves from last finalized block
     * @returns the reward status at the given block, or undefined it the block does not exist.
     */
    async getTokenomicsInfo(blockHash) {
        const blockHashInput = getBlockHashInput(blockHash);
        const response = await this.client.getTokenomicsInfo(blockHashInput).response;
        return tokenomicsInfo(response);
    }
    /**
     * Gets a stream of finalized blocks.
     *
     * {@codeblock ~~:nodejs/client/getFinalizedBlocks.ts#documentation-snippet}
     *
     * @param abortSignal an AbortSignal to close the stream. Note that the
     * stream does not close itself as it is infinite, so usually you'd want
     * to provide this parameter.
     * @returns An AsyncIterator stream of finalized blocks.
     */
    getFinalizedBlocks(abortSignal) {
        const opts = { abort: abortSignal };
        const blocks = this.client.getFinalizedBlocks(Empty, opts).responses;
        return mapStream(blocks, commonBlockInfo);
    }
    /**
     * Gets a stream of blocks. To get a stream of only finalized blocks
     * use `getFinalizedBlocks()` instead.
     *
     * {@codeblock ~~:nodejs/client/getBlocks.ts#documentation-snippet}
     *
     * @param abortSignal an AbortSignal to close the stream. Note that the
     * stream does not close itself as it is infinite, so usually you'd want
     * to provide this parameter.
     * @returns An AsyncIterator stream of blocks.
     */
    getBlocks(abortSignal) {
        const opts = { abort: abortSignal };
        const blocks = this.client.getBlocks(Empty, opts).responses;
        return mapStream(blocks, commonBlockInfo);
    }
    /**
     * Waits until given transaction is finalized.
     *
     * {@codeblock ~~:nodejs/common/simpleTransfer.ts#documentation-snippet}
     *
     * @param transactionHash a transaction hash as a bytearray.
     * @param timeoutTime the number of milliseconds until the function throws error.
     * @returns BlockItemSummary of the transaction.
     */
    async waitForTransactionFinalization(transactionHash, timeoutTime) {
        return new Promise(async (resolve, reject) => {
            const abortController = new AbortController();
            if (timeoutTime) {
                setTimeout(() => {
                    abortController.abort();
                    reject(new Error('Function timed out.'));
                }, timeoutTime);
            }
            try {
                const blockStream = this.getFinalizedBlocks(abortController.signal);
                const response = await this.getBlockItemStatus(transactionHash);
                if (response.status === 'finalized') {
                    setTimeout(() => abortController.abort(), 0);
                    return resolve(response.outcome);
                }
                for await (const _ of blockStream) {
                    const response2 = await this.getBlockItemStatus(transactionHash);
                    if (response2.status === 'finalized') {
                        setTimeout(() => abortController.abort(), 0);
                        return resolve(response2.outcome);
                    }
                }
                if (!abortController.signal.aborted) {
                    return reject(new Error('Unexpected end of stream.'));
                }
            } catch (error) {
                return reject(error);
            }
        });
    }
    /**
     * Retrieve a stream of accounts that exist at the end of the given block.
     *
     * {@codeblock ~~:nodejs/client/getAccountList.ts#documentation-snippet}
     *
     * @param blockHash an optional block hash to get the accounts at, otherwise retrieves from last finalized block.
     * @param abortSignal an optional AbortSignal to close the stream.
     * @returns an async iterable of account addresses.
     */
    getAccountList(blockHash, abortSignal) {
        const opts = { abort: abortSignal };
        const hash3 = getBlockHashInput(blockHash);
        const asyncIter = this.client.getAccountList(hash3, opts).responses;
        return mapStream(asyncIter, fromProto);
    }
    /**
     * Get a stream of all smart contract modules' references. The stream will end
     * when all modules that exist in the state at the end of the given
     * block have been returned.
     *
     * {@codeblock ~~:nodejs/client/getModuleList.ts#documentation-snippet}
     *
     * @param blockHash an optional block hash to get the contract modules at, otherwise retrieves from last finalized block.
     * @param abortSignal an optional AbortSignal to close the stream.
     * @returns an async iterable of contract module references.
     */
    getModuleList(blockHash, abortSignal) {
        const opts = { abort: abortSignal };
        const hash3 = getBlockHashInput(blockHash);
        const asyncIter = this.client.getModuleList(hash3, opts).responses;
        return mapStream(asyncIter, fromProto6);
    }
    /**
     * Get a stream of ancestors for the provided block.
     * Starting with the provided block itself, moving backwards until no more
     * ancestors or the requested number of ancestors has been returned.
     *
     * {@codeblock ~~:nodejs/client/getAncestors.ts#documentation-snippet}
     *
     * @param maxAmountOfAncestors the maximum amount of ancestors as a bigint.
     * @param blockHash a optional block hash to get the ancestors at, otherwise retrieves from last finalized block.
     * @param abortSignal an optional AbortSignal to close the stream.
     * @returns an async iterable of ancestors' block hashes.
     */
    getAncestors(maxAmountOfAncestors, blockHash, abortSignal) {
        const opts = { abort: abortSignal };
        const request = {
            blockHash: getBlockHashInput(blockHash),
            amount: maxAmountOfAncestors,
        };
        const asyncIter = this.client.getAncestors(request, opts).responses;
        return mapStream(asyncIter, fromProto11);
    }
    /**
     * Get the exact state of a specific contract instance, streamed as a list of
     * key-value pairs. The list is streamed in lexicographic order of keys.
     *
     * {@codeblock ~~:nodejs/client/getInstanceState.ts#documentation-snippet}
     *
     * @param contractAddress the contract to get the state of.
     * @param blockHash a optional block hash to get the instance states at, otherwise retrieves from last finalized block.
     * @param abortSignal an optional AbortSignal to close the stream.
     * @returns an async iterable of instance states as key-value pairs of hex strings.
     */
    getInstanceState(contractAddress, blockHash, abortSignal) {
        const opts = { abort: abortSignal };
        const request = {
            blockHash: getBlockHashInput(blockHash),
            address: toProto9(contractAddress),
        };
        const asyncIter = this.client.getInstanceState(request, opts).responses;
        return mapStream(asyncIter, instanceStateKVPair);
    }
    /**
     * Get the value at a specific key of a contract state. In contrast to
     * `GetInstanceState` this is more efficient, but requires the user to know
     * the specific key to look for.
     *
     * {@codeblock ~~:nodejs/client/instanceStateLookup.ts#documentation-snippet}
     *
     * @param contractAddress the contract to get the state of.
     * @param key the key of the desired contract state.
     * @param blockHash a optional block hash to get the instance states at, otherwise retrieves from last finalized block.
     * @returns the state of the contract at the given key as a hex string.
     */
    async instanceStateLookup(contractAddress, key, blockHash) {
        assertValidHex(key);
        const request = {
            address: toProto9(contractAddress),
            key: import_buffer26.Buffer.from(key, 'hex'),
            blockHash: getBlockHashInput(blockHash),
        };
        const response = await this.client.instanceStateLookup(request).response;
        return unwrapValToHex(response);
    }
    /**
     * Get the identity providers registered as of the end of a given block.
     * The stream will end when all the identity providers have been returned,
     * or an abort signal is called.
     *
     * {@codeblock ~~:nodejs/client/getIdentityProviders.ts#documentation-snippet}
     *
     * @param blockHash an optional block hash to get the providers at, otherwise retrieves from last finalized block.
     * @param abortSignal an optional AbortSignal to close the stream.
     * @returns an async iterable of identity provider info objects.
     */
    getIdentityProviders(blockHash, abortSignal) {
        const opts = { abort: abortSignal };
        const block = getBlockHashInput(blockHash);
        const ips = this.client.getIdentityProviders(block, opts).responses;
        return mapStream(ips, ipInfo);
    }
    /**
     * Get the anonymity revokers registered as of the end of a given block.
     * The stream will end when all the anonymity revokers have been returned,
     * or an abort signal is called.
     *
     * {@codeblock ~~:nodejs/client/getAnonymityRevokers.ts#documentation-snippet}
     *
     * @param blockHash an optional block hash to get the anonymity revokers at, otherwise retrieves from last finalized block.
     * @param abortSignal an optional AbortSignal to close the stream.
     * @returns an async iterable of identity provider info objects.
     */
    getAnonymityRevokers(blockHash, abortSignal) {
        const opts = { abort: abortSignal };
        const block = getBlockHashInput(blockHash);
        const ars = this.client.getAnonymityRevokers(block, opts).responses;
        return mapStream(ars, arInfo);
    }
    /**
     * Get a list of live blocks at a given height.
     *
     * {@codeblock ~~:nodejs/client/getBlocksAtHeightAbsolute.ts#documentation-snippet}
     *
     * @param blockHeightRequest Either an absolute block height request or a relative block height request
     * @returns A list of block hashes as hex strings
     */
    async getBlocksAtHeight(blockHeightRequest) {
        const requestV2 = BlocksAtHeightRequestToV2(blockHeightRequest);
        const blocks = await this.client.getBlocksAtHeight(requestV2).response;
        return blocks.blocks.map(fromProto11);
    }
    /**
     * Get information, such as height, timings, and transaction counts for the given block.
     *
     * {@codeblock ~~:nodejs/client/getBlockInfo.ts#documentation-snippet}
     *
     * @param blockHash an optional block hash to get the info from, otherwise retrieves from last finalized block.
     * @returns information on a block.
     */
    async getBlockInfo(blockHash) {
        const block = getBlockHashInput(blockHash);
        const blockInfo2 = await this.client.getBlockInfo(block).response;
        return blockInfo(blockInfo2);
    }
    /**
     * Get all the bakers at the end of the given block.
     *
     * {@codeblock ~~:nodejs/client/getBakerList.ts#documentation-snippet}
     *
     * @param blockHash an optional block hash to get the baker list at, otherwise retrieves from last finalized block.
     * @param abortSignal an optional AbortSignal to close the stream.
     * @returns an async iterable of BakerIds.
     */
    getBakerList(blockHash, abortSignal) {
        const opts = { abort: abortSignal };
        const block = getBlockHashInput(blockHash);
        const bakers = this.client.getBakerList(block, opts).responses;
        return mapStream(bakers, (x) => x.value);
    }
    /**
     * Get the registered delegators of a given pool at the end of a given block.
     * In contrast to the `GetPoolDelegatorsRewardPeriod` which returns delegators
     * that are fixed for the reward period of the block, this endpoint returns the
     * list of delegators that are registered in the block. Any changes to delegators
     * are immediately visible in this list.
     * The stream will end when all the delegators has been returned.
     *
     * {@codeblock ~~:nodejs/client/getPoolDelegators.ts#documentation-snippet}
     *
     * @param baker The BakerId of the pool owner
     * @param blockHash an optional block hash to get the delegators at, otherwise retrieves from last finalized block.
     * @param abortSignal an optional AbortSignal to close the stream.
     * @returns a stream of DelegatorInfo
     */
    getPoolDelegators(baker, blockHash, abortSignal) {
        const request = {
            blockHash: getBlockHashInput(blockHash),
            baker: { value: baker },
        };
        const delegatorInfo2 = this.client.getPoolDelegators(request, {
            abort: abortSignal,
        }).responses;
        return mapStream(delegatorInfo2, delegatorInfo);
    }
    /**
     * Get the fixed delegators of a given pool for the reward period of the given block.
     * In contracts to the `GetPoolDelegators` which returns delegators registered
     * for the given block, this endpoint returns the fixed delegators contributing
     * stake in the reward period containing the given block.
     * The stream will end when all the delegators has been returned.
     *
     * {@codeblock ~~:nodejs/client/getPoolDelegatorsRewardPeriod.ts#documentation-snippet}
     *
     * @param baker The BakerId of the pool owner
     * @param blockHash an optional block hash to get the delegators at, otherwise retrieves from last finalized block.
     * @param abortSignal an optional AbortSignal to close the stream.
     * @returns a stream of DelegatorRewardPeriodInfo
     */
    getPoolDelegatorsRewardPeriod(baker, blockHash, abortSignal) {
        const request = {
            blockHash: getBlockHashInput(blockHash),
            baker: { value: baker },
        };
        const delegatorInfo2 = this.client.getPoolDelegatorsRewardPeriod(request, { abort: abortSignal }).responses;
        return mapStream(delegatorInfo2, delegatorInfo);
    }
    /**
     * Get the registered passive delegators at the end of a given block.
     * In contrast to the `GetPassiveDelegatorsRewardPeriod` which returns delegators
     * that are fixed for the reward period of the block, this endpoint returns the
     * list of delegators that are registered in the block. Any changes to delegators
     * are immediately visible in this list.
     * The stream will end when all the delegators has been returned.
     *
     * {@codeblock ~~:nodejs/client/getPassiveDelegators.ts#documentation-snippet}
     *
     * @param blockHash an optional block hash to get the delegators at, otherwise retrieves from last finalized block.
     * @param abortSignal an optional AbortSignal to close the stream.
     * @returns a stream of DelegatorInfo
     */
    getPassiveDelegators(blockHash, abortSignal) {
        const delegatorInfo2 = this.client.getPassiveDelegators(getBlockHashInput(blockHash), {
            abort: abortSignal,
        }).responses;
        return mapStream(delegatorInfo2, delegatorInfo);
    }
    /**
     * Get the fixed passive delegators for the reward period of the given block.
     * In contracts to the `GetPassiveDelegators` which returns delegators registered
     * for the given block, this endpoint returns the fixed delegators contributing
     * stake in the reward period containing the given block.
     * The stream will end when all the delegators has been returned.
     *
     * {@codeblock ~~:nodejs/client/getPassiveDelegatorsRewardPeriod.ts#documentation-snippet}
     *
     * @param blockHash an optional block hash to get the delegators at, otherwise retrieves from last finalized block.
     * @param abortSignal an optional AbortSignal to close the stream.
     * @returns a stream of DelegatorRewardPeriodInfo
     */
    getPassiveDelegatorsRewardPeriod(blockHash, abortSignal) {
        const delegatorInfo2 = this.client.getPassiveDelegatorsRewardPeriod(getBlockHashInput(blockHash), {
            abort: abortSignal,
        }).responses;
        return mapStream(delegatorInfo2, delegatorInfo);
    }
    /**
     * Get the current branches of blocks starting from and including the last finalized block.
     *
     * {@codeblock ~~:nodejs/client/getBranches.ts#documentation-snippet}
     *
     * @returns a branch with a block hash and a list of branch-children
     */
    async getBranches() {
        const branch2 = await this.client.getBranches(Empty).response;
        return branch(branch2);
    }
    /**
     * Get information related to the baker election for a particular block.
     *
     * @param blockHash an optional block hash to get the election info at, otherwise retrieves from last finalized block.
     * @returns election info for the given block
     */
    async getElectionInfo(blockHash) {
        const blockHashInput = getBlockHashInput(blockHash);
        const electionInfo2 = await this.client.getElectionInfo(blockHashInput).response;
        return electionInfo(electionInfo2);
    }
    /**
     * Get a list of non-finalized transaction hashes for a given account. This
     * endpoint is not expected to return a large amount of data in most cases,
     * but in bad network conditions it might. The stream will end when all the
     * non-finalized transaction hashes have been returned.
     *
     * {@codeblock ~~:nodejs/client/getAccountNonFinalizedTransactions.ts#documentation-snippet}
     *
     * @param accountAddress The address of the account that you wish to query.
     * @returns a stream of transaction hashes.
     */
    getAccountNonFinalizedTransactions(accountAddress, abortSignal) {
        const transactions = this.client.getAccountNonFinalizedTransactions(
            { value: toBuffer2(accountAddress) },
            { abort: abortSignal }
        ).responses;
        return mapStream(transactions, fromProto10);
    }
    /**
     * Get a list of transaction events in a given block.
     * The stream will end when all the transaction events for a given block have been returned.
     *
     * {@codeblock ~~:nodejs/client/getBlockTransactionEvents.ts#documentation-snippet}
     *
     * @param blockHash an optional block hash to get the transaction events at, otherwise retrieves from last finalized block.
     * @param abortSignal an optional AbortSignal to close the stream.
     * @returns a stream of block item summaries
     */
    getBlockTransactionEvents(blockHash, abortSignal) {
        const blockItemSummaries = this.client.getBlockTransactionEvents(getBlockHashInput(blockHash), {
            abort: abortSignal,
        }).responses;
        return mapStream(blockItemSummaries, blockItemSummary);
    }
    /**
     * Get next available sequence numbers for updating chain parameters after a given block.
     *
     * {@codeblock ~~:nodejs/client/getNextUpdateSequenceNumbers.ts#documentation-snippet}
     *
     * @param blockHash an optional block hash to get the sequence numbers at, otherwise retrieves from last finalized block.
     * @return a NextUpdateSequenceNumbers object
     */
    async getNextUpdateSequenceNumbers(blockHash) {
        const sequenceNumbers = await this.client.getNextUpdateSequenceNumbers(getBlockHashInput(blockHash)).response;
        return nextUpdateSequenceNumbers(sequenceNumbers);
    }
    /**
     * Shut down the node.
     * Return a GRPC error if the shutdown failed.
     *
     * {@codeblock ~~:nodejs/client/shutdown.ts#documentation-snippet}
     */
    async shutdown() {
        await this.client.shutdown(Empty);
    }
    /**
     * Suggest to a peer to connect to the submitted peer details.
     * This, if successful, adds the peer to the list of given addresses.
     * Otherwise return a GRPC error.
     * Note. The peer might not be connected to instantly, in that case
     * the node will try to establish the connection in near future. This
     * function returns a GRPC status 'Ok' in this case.
     *
     * {@codeblock ~~:nodejs/client/peerConnect.ts#documentation-snippet}
     *
     * @param ip The ip address to connect to. Must be a valid ip address.
     * @param port The port to connect to. Must be between 0 and 65535.
     */
    async peerConnect(ip, port) {
        assertValidIp(ip);
        assertValidPort(port);
        const request = {
            ip: { value: ip },
            port: { value: port },
        };
        await this.client.peerConnect(request);
    }
    /**
     * Disconnect from the peer and remove them from the given addresses list
     * if they are on it. Return if the request was processed successfully.
     * Otherwise return a GRPC error.
     *
     * {@codeblock ~~:nodejs/client/peerDisconnect.ts#documentation-snippet}
     *
     * @param ip The ip address to connect to. Must be a valid ip address.
     * @param port The port to connect to. Must be between 0 and 65535.
     */
    async peerDisconnect(ip, port) {
        assertValidIp(ip);
        assertValidPort(port);
        const request = {
            ip: { value: ip },
            port: { value: port },
        };
        await this.client.peerDisconnect(request);
    }
    /**
     * Get a list of banned peers.
     *
     * {@codeblock ~~:nodejs/client/getBannedPeers.ts#documentation-snippet}
     *
     * @return A list of the ip's of banned peers.
     */
    async getBannedPeers() {
        const bannedPeers = await this.client.getBannedPeers(Empty).response;
        return bannedPeers.peers.map((x) => {
            var _a;
            return unwrap((_a = x.ipAddress) == null ? void 0 : _a.value);
        });
    }
    /**
     * Ban the given peer.
     * Rejects if the action fails.
     *
     * {@codeblock ~~:nodejs/client/banPeer.ts#documentation-snippet}
     *
     * @param ip The ip address of the peer to ban. Must be a valid ip address.
     */
    async banPeer(ip) {
        assertValidIp(ip);
        const request = {
            ipAddress: { value: ip },
        };
        await this.client.banPeer(request);
    }
    /**
     * Unbans the given peer.
     * Rejects if the action fails.
     *
     * {@codeblock ~~:nodejs/client/unbanPeer.ts#documentation-snippet}
     *
     * @param ip The ip address of the peer to unban. Must be a valid ip address.
     */
    async unbanPeer(ip) {
        assertValidIp(ip);
        const request = {
            ipAddress: { value: ip },
        };
        await this.client.unbanPeer(request);
    }
    /**
     * Start dumping packages into the specified file.
     * Only enabled if the node was built with the `network_dump` feature.
     * Rejects if the network dump failed to start.
     *
     * {@codeblock ~~:nodejs/client/dumpStart.ts#documentation-snippet}
     *
     * @param filePath Which file to dump the packages into. Requires a valid path.
     * @param raw Whether the node should dump raw packages.
     */
    async dumpStart(filePath, raw) {
        const request = {
            file: filePath,
            raw,
        };
        await this.client.dumpStart(request);
    }
    /**
     * Stop dumping packages.
     * Only enabled if the node was built with the `network_dump` feature.
     * Rejects if the network dump failed to be stopped.
     *
     * {@codeblock ~~:nodejs/client/dumpStop.ts#documentation-snippet}
     */
    async dumpStop() {
        await this.client.dumpStop(Empty);
    }
    /**
     * Get information about the node.
     * The `NodeInfo` includes information of
     * * Meta information such as the, version of the node, type of the node, uptime and the local time of the node.
     * * NetworkInfo which yields data such as the node id, packets sent/received,
     *   average bytes per second sent/received.
     * * ConsensusInfo. The `ConsensusInfo` returned depends on if the node supports
     *   the protocol on chain and whether the node is configured as a baker or not.
     *
     * {@codeblock ~~:nodejs/client/getNodeInfo.ts#documentation-snippet}
     *
     * @returns Info about the node
     */
    async getNodeInfo() {
        const nodeInfo2 = await this.client.getNodeInfo(Empty).response;
        return nodeInfo(nodeInfo2);
    }
    /**
     * Get a list of the peers that the node is connected to
     * and associated network related information for each peer.
     *
     * {@codeblock ~~:nodejs/client/getPeersInfo.ts#documentation-snippet}
     *
     * @returns a list containing info on each peer of the node.
     */
    async getPeersInfo() {
        const peersInfo = await this.client.getPeersInfo(Empty).response;
        return peersInfo.peers.map(peerInfo);
    }
    /**
     * Get a list of special events in a given block. These are events generated
     * by the protocol, such as minting and reward payouts. They are not directly
     * generated by any transaction. The stream will end when all the special
     * events for a given block have been returned.
     *
     * {@codeblock ~~:nodejs/client/getBlockSpecialEvents.ts#documentation-snippet}
     *
     * @param blockHash an optional block hash to get the special events at, otherwise retrieves from last finalized block.
     * @param abortSignal an optional AbortSignal to close the stream.
     * @returns a stream of block item summaries
     */
    getBlockSpecialEvents(blockHash, abortSignal) {
        const blockSpecialEvents = this.client.getBlockSpecialEvents(getBlockHashInput(blockHash), {
            abort: abortSignal,
        }).responses;
        return mapStream(blockSpecialEvents, blockSpecialEvent);
    }
    /**
     * Get the pending updates to chain parameters at the end of a given block.
     * The stream will end when all the pending updates for a given block have been returned.
     *
     * {@codeblock ~~:nodejs/client/getBlockPendingUpdates.ts#documentation-snippet}
     *
     * @param blockHash an optional block hash to get the pending updates at, otherwise retrieves from last finalized block.
     * @param abortSignal an optional AbortSignal to close the stream.
     * @returns a stream of pending updates
     */
    getBlockPendingUpdates(blockHash, abortSignal) {
        const pendingUpdates = this.client.getBlockPendingUpdates(getBlockHashInput(blockHash), {
            abort: abortSignal,
        }).responses;
        return mapStream(pendingUpdates, pendingUpdate);
    }
    /**
     * Get the summary of the finalization data in a given block.
     *
     * {@codeblock ~~:nodejs/client/getBlockFinalizationSummary.ts#documentation-snippet}
     *
     * @param blockHash an optional block hash to get the finalization summaries at, otherwise retrieves from last finalized block.
     * @returns a finalization summary
     */
    async getBlockFinalizationSummary(blockHash) {
        const finalizationSummary = await this.client.getBlockFinalizationSummary(getBlockHashInput(blockHash))
            .response;
        return blockFinalizationSummary(finalizationSummary);
    }
    getFinalizedBlocksFrom(startHeight = 0n, end) {
        let height = startHeight;
        let finHeight;
        const abortController = new AbortController();
        const abortSignal = end instanceof AbortSignal ? end : abortController.signal;
        const newBlocks = this.getFinalizedBlocks(abortSignal);
        const endSignal = {
            done: true,
            value: void 0,
        };
        let searchKnown = true;
        const nextKnown = async () => {
            if (height > finHeight) {
                finHeight = await this.getConsensusHeight();
            }
            if (height > finHeight) {
                searchKnown = false;
                return void 0;
            }
            const [hash3] = (await this.getBlocksAtHeight(height)).reverse();
            const bi = { hash: hash3, height };
            height += 1n;
            return bi;
        };
        const nextNew = async () => {
            for await (const block of newBlocks) {
                if (block.height < height) {
                    continue;
                }
                return block;
            }
        };
        const next = async () => {
            if (abortSignal.aborted) {
                return endSignal;
            }
            if (finHeight === void 0) {
                finHeight = await this.getConsensusHeight();
            }
            let bi;
            if (searchKnown) {
                bi = (await nextKnown()) ?? (await nextNew());
            } else {
                bi = await nextNew();
            }
            if (bi === void 0) {
                return endSignal;
            }
            if (typeof end === 'bigint' && bi.height >= end) {
                abortController.abort();
            }
            return {
                done: false,
                value: bi,
            };
        };
        return {
            [Symbol.asyncIterator]: () => ({ next }),
        };
    }
    /**
     * Find a block with lowest possible height where the predicate holds.
     * Note that this function uses binary search and is only intended to work for monotone predicates.
     *
     * @template R
     * @param {(bi: v1.FinalizedBlockInfo) => Promise<R | undefined>} predicate - A predicate function resolving with value of type {@link R} if the predicate holds, and undefined if not.
     * The precondition for this method is that the function is monotone, i.e., if block at height `h` satisfies the test then also a block at height `h+1` does.
     * If this precondition does not hold then the return value from this method is unspecified.
     * @param {bigint} [from=0n] - An optional lower bound of the range of blocks to search. Defaults to 0n.
     * @param {bigint} [to] - An optional upper bound of the range of blocks to search. Defaults to latest finalized block.
     *
     * @returns {Promise<R | undefined>} The value returned from `predicate` at the lowest block (in terms of height) where the predicate holds.
     */
    async findEarliestFinalized(predicate, from = 0n, to) {
        let lower = from;
        let upper = to ?? (await this.getConsensusHeight());
        if (lower > upper) {
            throw new Error('Please specify a "to" value greater than the specified "from" value');
        }
        let result;
        while (lower <= upper) {
            const mid = lower + (upper - lower) / 2n;
            const [hash3] = await this.getBlocksAtHeight(mid);
            const res = await predicate({ hash: hash3, height: mid });
            if (upper === mid) {
                result = res;
                break;
            } else if (res !== void 0) {
                result = res;
                upper = mid;
            } else {
                lower = mid + 1n;
            }
        }
        return result;
    }
    /**
     * Find the block where a smart contract instance was created. This is a specialized form of {@link findEarliestFinalized}.
     *
     * @param {ContractAddress} address - The contract address to search for.
     * @param {bigint} [from=0n] - An optional lower bound of the range of blocks to search. Defaults to 0n.
     * @param {bigint} [to] - An optional upper bound of the range of blocks to search. Defaults to latest finalized block.
     *
     * @returns {FindInstanceCreationReponse} Information about the block and the contract instance, or undefined if not found.
     */
    async findInstanceCreation(address, from, to) {
        return this.findEarliestFinalized(
            async ({ hash: hash3, height }) => {
                try {
                    const instanceInfo2 = await this.getInstanceInfo(address, hash3);
                    return { hash: hash3, height, instanceInfo: instanceInfo2 };
                } catch (e) {
                    if (isRpcError(e) && e.code === 'NOT_FOUND') {
                        return void 0;
                    }
                    throw e;
                }
            },
            from,
            to
        );
    }
    /**
     * Find the first block finalized after a given time.
     *
     * @param {Date} time - The time to find first block after
     * @param {bigint} [from=0n] - An optional lower bound of the range of blocks to search. Defaults to 0n.
     * @param {bigint} [to] - An optional upper bound of the range of blocks to search. Defaults to latest finalized block.
     *
     * @returns {v1.BlockInfo} Information about the block found, or undefined if no block was found.
     */
    async findFirstFinalizedBlockNoLaterThan(time, from, to) {
        return this.findEarliestFinalized(
            async ({ hash: hash3 }) => {
                const bi = await this.getBlockInfo(hash3);
                return bi.blockSlotTime >= time ? bi : void 0;
            },
            from,
            to
        );
    }
    /**
     * Get the projected earliest time at which a particular baker will be required to bake a block.
     *
     * If the baker is not a baker for the current reward period, this returns a timestamp at the
     * start of the next reward period. If the baker is a baker for the current reward period, the
     * earliest win time is projected from the current round forward, assuming that each round after
     * the last finalized round will take the minimum block time. (If blocks take longer, or timeouts
     * occur, the actual time may be later, and the reported time in subsequent queries may reflect
     * this.) At the end of an epoch (or if the baker is not projected to bake before the end of the
     * epoch) the earliest win time for a (current) baker will be projected as the start of the next
     * epoch. This is because the seed for the leader election is updated at the epoch boundary, and
     * so the winners cannot be predicted beyond that. Note that in some circumstances the returned
     * timestamp can be in the past, especially at the end of an epoch.
     *
     * @throws an `UNAVAILABLE` RPC error if the current consensus version is 0 (prior to protocol version 6), as the endpoint is only supported from consensus version 1 (from protocol version 6).
     *
     * @param {v1.BakerId} baker - The baker that should be queried for.
     *
     * @returns {Timestamp.Type} The projected earliest time at which a particular baker will be required to bake a block, as a unix timestamp in milliseconds.
     */
    async getBakerEarliestWinTime(baker) {
        const bakerId = {
            value: baker,
        };
        const winTime = await this.client.getBakerEarliestWinTime(bakerId).response;
        return fromMillis(winTime.value);
    }
    /**
     * For a non-genesis block, this returns the quorum certificate, a timeout
     * certificate (if present) and epoch finalization entry (if present).
     *
     * @throws an `UNIMPLEMENTED` RPC error if the endpoint is not enabled by the node.
     * @throws an `INVALID_ARGUMENT` if the block being pointed to is not a product of ConcordiumBFT
     *
     * @param blockHash optional block hash to get the cryptographic parameters at, otherwise retrieves from last finalized block.
     *
     * @returns the requested block certificates.
     */
    async getBlockCertificates(blockHash) {
        const blockHashInput = getBlockHashInput(blockHash);
        const blockCertificates2 = await this.client.getBlockCertificates(blockHashInput).response;
        return blockCertificates(blockCertificates2);
    }
    /**
     * Get all bakers in the reward period of a block.
     * This endpoint is only supported for protocol version 6 and onwards.
     *
     * @throws an `IllegalArgument` RPC error if the protocol does not support the endpoint.
     *
     * @param blockHash optional block hash to get the cryptographic parameters at, otherwise retrieves from last finalized block.
     *
     * @returns All bakers in the reward period of a block
     */
    getBakersRewardPeriod(blockHash) {
        const blockHashInput = getBlockHashInput(blockHash);
        const bakersRewardPeriod = this.client.getBakersRewardPeriod(blockHashInput).responses;
        return mapStream(bakersRewardPeriod, bakerRewardPeriodInfo);
    }
    /**
     * Get the list of bakers that won the lottery in a particular historical epoch (i.e. the
     * last finalized block is in a later epoch). This lists the winners for each round in the
     * epoch, starting from the round after the last block in the previous epoch, running to
     * the round before the first block in the next epoch. It also indicates if a block in each
     * round was included in the finalized chain.
     *
     * The following error cases are possible:
     * @throws a `NOT_FOUND` RPC error if the query specifies an unknown block.
     * @throws an `UNAVAILABLE` RPC error if the query is for an epoch that is not finalized in the current genesis index, or is for a future genesis index.
     * @throws an `INVALID_ARGUMENT` RPC error if the query is for an epoch that is not finalized for a past genesis index.
     * @throws an `INVALID_ARGUMENT` RPC error if the query is for a genesis index at consensus version 0.
     * @throws an `INVALID_ARGUMENT` RPC error if the input `EpochRequest` is malformed.
     * @throws an `UNAVAILABLE` RPC error if the endpoint is disabled on the node.
     *
     * @param {BlockHash.Type | v1.RelativeEpochRequest } epochRequest - Consists of either a block hash or a relative epoch request consisting of a genesis index and an epoch. If none is passed, it queries the last finalized block.
     *
     * @returns {v1.WinningBaker} A stream of winning bakers for a given epoch.
     */
    getWinningBakersEpoch(epochRequest) {
        const req = getEpochRequest(epochRequest);
        const winningBakers = this.client.getWinningBakersEpoch(req).responses;
        return mapStream(winningBakers, winningBaker);
    }
    /**
     * Get the block hash of the first finalized block in a specified epoch.
     *
     * The following error cases are possible:
     * @throws - a `NOT_FOUND` RPC error if the query specifies an unknown block.
     * @throws - an `UNAVAILABLE` RPC error if the query is for an epoch that is not finalized in the current genesis index, or is for a future genesis index.
     * @throws - an `INVALID_ARGUMENT` RPC error if the query is for an epoch with no finalized blocks for a past genesis index.
     * @throws - an `INVALID_ARGUMENT` RPC error if the input `EpochRequest` is malformed.
     * @throws - an `UNAVAILABLE` RPC error if the endpoint is disabled on the node.
     *
     * @param {BlockHash.Type | v1.RelativeEpochRequest } epochRequest - Consists of either a block hash or a relative epoch request consisting of a genesis index and an epoch. If none is passed, it queries the last finalized block.
     *
     * @returns {HexString} The block hash as a hex encoded string.
     */
    async getFirstBlockEpoch(epochRequest) {
        const req = getEpochRequest(epochRequest);
        const blockHash = await this.client.getFirstBlockEpoch(req).response;
        return fromProto11(blockHash);
    }
    async getConsensusHeight() {
        return (await this.getConsensusStatus()).lastFinalizedBlockHeight;
    }
    /**
     * Queries the node to check its health
     *
     * {@codeblock ~~:nodejs/client/healthCheck.ts#documentation-snippet}
     *
     * @returns a HealthCheck indicating whether the node is healthy or not and provides the message from the client, if not healthy.
     */
    async healthCheck() {
        try {
            await this.healthClient.check({});
            return { isHealthy: true };
        } catch (e) {
            return { isHealthy: false, message: e.message };
        }
    }
};
function getBlockHashInput(blockHash) {
    if (blockHash) {
        return {
            blockHashInput: {
                oneofKind: 'given',
                given: toProto11(blockHash),
            },
        };
    } else {
        return {
            blockHashInput: {
                oneofKind: 'lastFinal',
                lastFinal: Empty,
            },
        };
    }
}
function getAccountIdentifierInput(accountIdentifier) {
    let returnIdentifier;
    if (instanceOf(accountIdentifier)) {
        returnIdentifier = {
            oneofKind: 'address',
            address: toProto(accountIdentifier),
        };
    } else if (instanceOf17(accountIdentifier)) {
        returnIdentifier = {
            oneofKind: 'credId',
            credId: {
                value: toBuffer7(accountIdentifier),
            },
        };
    } else if (typeof accountIdentifier === 'bigint') {
        returnIdentifier = {
            oneofKind: 'accountIndex',
            accountIndex: { value: accountIdentifier },
        };
    } else {
        throw new Error(`Unsupported account identifier: ${accountIdentifier}.`);
    }
    return { accountIdentifierInput: returnIdentifier };
}
var ConcordiumGRPCWebClient = class extends ConcordiumGRPCClient {
    constructor(address, port, options) {
        const transport = new GrpcWebFetchTransport({
            baseUrl: `${address}:${port}`,
            ...options,
        });
        super(transport);
    }
};
function getInvokerInput(invoker) {
    if (!invoker) {
        return void 0;
    } else if (instanceOf(invoker)) {
        return {
            type: {
                oneofKind: 'account',
                account: toProto(invoker),
            },
        };
    } else if (instanceOf11(invoker)) {
        return {
            type: {
                oneofKind: 'contract',
                contract: toProto9(invoker),
            },
        };
    } else {
        throw new Error('Unexpected input to build invoker');
    }
}
function getEpochRequest(epochRequest) {
    if (instanceOf15(epochRequest) || typeof epochRequest === 'undefined') {
        return {
            epochRequestInput: {
                oneofKind: 'blockHash',
                blockHash: getBlockHashInput(epochRequest),
            },
        };
    } else {
        return {
            epochRequestInput: {
                oneofKind: 'relativeEpoch',
                relativeEpoch: {
                    genesisIndex: { value: epochRequest.genesisIndex },
                    epoch: { value: epochRequest.epoch },
                },
            },
        };
    }
}
function assertValidIp(ip) {
    if (!isValidIp(ip)) {
        throw new Error('The input was not a valid ip: ' + ip);
    }
}
function assertValidPort(port) {
    if (port > 65535 || port < 0) {
        throw new Error('The input was not a valid port, must be between 0 and 65535: ' + port);
    }
}
function assertValidHex(hex2) {
    if (!isHex(hex2)) {
        throw new Error('The input was not a valid hex: ' + hex2);
    }
}

// node_modules/@concordium/web-sdk/lib/esm/cis0.js
var import_buffer27 = __toESM(require_buffer(), 1);
var import_json_bigint7 = __toESM(require_json_bigint(), 1);
var CIS0;
(function (CIS02) {
    let SupportType;
    (function (SupportType2) {
        SupportType2[(SupportType2['NoSupport'] = 0)] = 'NoSupport';
        SupportType2[(SupportType2['Support'] = 1)] = 'Support';
        SupportType2[(SupportType2['SupportBy'] = 2)] = 'SupportBy';
    })((SupportType = CIS02.SupportType || (CIS02.SupportType = {})));
})(CIS0 || (CIS0 = {}));
function serializeSupportIdentifier(id) {
    const buf = import_buffer27.Buffer.from(id, 'ascii');
    return packBufferWithWord8Length(buf);
}
function serializeSupportIdentifiers(ids) {
    const n = encodeWord16(ids.length, true);
    return import_buffer27.Buffer.concat([n, ...ids.map(serializeSupportIdentifier)]);
}
var deserializeSupportResult = makeDeserializeListResponse((cursor) => {
    const type = cursor.read(1).readUInt8(0);
    if (type > 2) {
        throw new Error('Unsupported support result type');
    }
    if (type !== CIS0.SupportType.SupportBy) {
        return { type };
    }
    const numAddresses = cursor.read(1).readUInt8(0);
    const addresses = [];
    for (let i = 0; i < numAddresses; i++) {
        const index = cursor.read(8).readBigUInt64LE(0).valueOf();
        const subindex = cursor.read(8).readBigUInt64LE(0).valueOf();
        addresses.push(create4(index, subindex));
    }
    return {
        type,
        addresses,
    };
});
async function cis0Supports(grpcClient, contractAddress, standardIds, blockHash) {
    const instanceInfo2 = await grpcClient.getInstanceInfo(contractAddress).catch((e) => {
        throw new Error(
            `Could not get contract instance info for contract at address ${(0, import_json_bigint7.stringify)(contractAddress)}: ${e.message ?? e}`
        );
    });
    const contractName = fromInitName(instanceInfo2.name);
    const supportReceiveName = create(contractName, fromStringUnchecked2('supports'));
    if (!instanceInfo2.methods.some((methods) => equals3(methods, supportReceiveName))) {
        return void 0;
    }
    const parameter = fromBuffer2(makeDynamicFunction(serializeSupportIdentifiers)(standardIds));
    const response = await grpcClient.invokeContract(
        {
            contract: contractAddress,
            parameter,
            method: supportReceiveName,
        },
        blockHash
    );
    if (response === void 0 || response.tag === 'failure' || response.returnValue === void 0) {
        throw new Error(
            `Failed to invoke support for contract at ${(0, import_json_bigint7.stringify)(contractAddress)}${response.tag === 'failure' && ` with error ${(0, import_json_bigint7.stringify)(response.reason)}`}`
        );
    }
    const results = deserializeSupportResult(toHexString3(response.returnValue));
    const isListInput = Array.isArray(standardIds);
    const expectedValuesLength = isListInput ? standardIds.length : 1;
    if (results.length !== expectedValuesLength) {
        throw new Error('Mismatch between length of queries in request and values in response.');
    }
    if (isListInput) {
        return results;
    } else {
        return results[0];
    }
}

// node_modules/@concordium/web-sdk/lib/esm/cis2/util.js
var import_bs58check3 = __toESM(require_bs58check(), 1);
var import_buffer28 = __toESM(require_buffer(), 1);
var TOKEN_ID_MAX_LENGTH = 255;
var TOKEN_AMOUNT_MAX_LENGTH = 37;
var TOKEN_RECEIVE_HOOK_MAX_LENGTH = 100;
function serializeCIS2TokenId(tokenId) {
    const serialized = import_buffer28.Buffer.from(tokenId, 'hex');
    if (serialized.length > TOKEN_ID_MAX_LENGTH) {
        throw new Error(`Token ID exceeds maximum size of ${TOKEN_ID_MAX_LENGTH} bytes`);
    }
    return packBufferWithWord8Length(serialized);
}
function deserializeCIS2TokenId(buffer) {
    if (buffer.length > TOKEN_ID_MAX_LENGTH) {
        throw Error(`Token ID exceeds maximum size of ${TOKEN_ID_MAX_LENGTH} bytes`);
    }
    return import_buffer28.Buffer.from(buffer).toString('hex');
}
function serializeTokenAmount(amount) {
    if (amount < 0) {
        throw new Error('Negative token amount is not allowed');
    }
    const serialized = uleb128Encode(amount);
    if (serialized.length > TOKEN_AMOUNT_MAX_LENGTH) {
        throw new Error(`Token amount exceeds maximum size of ${TOKEN_AMOUNT_MAX_LENGTH} bytes`);
    }
    return serialized;
}
function serializeAccountAddress(address) {
    return toBuffer2(address);
}
function serializeContractAddress(address) {
    const index = encodeWord64(address.index, true);
    const subindex = encodeWord64(address.subindex, true);
    return import_buffer28.Buffer.concat([index, subindex]);
}
function serializeAddress(address) {
    return import_buffer28.Buffer.concat(
        instanceOf11(address)
            ? [encodeWord8(1), serializeContractAddress(address)]
            : [encodeWord8(0), serializeAccountAddress(address)]
    );
}
function serializeReceiveHookName(hook) {
    const serialized = import_buffer28.Buffer.from(toString3(hook), 'ascii');
    if (serialized.length > TOKEN_RECEIVE_HOOK_MAX_LENGTH) {
        throw new Error(`Token receive hook name exceeds maximum size of ${TOKEN_RECEIVE_HOOK_MAX_LENGTH} bytes`);
    }
    return packBufferWithWord16Length(serialized, true);
}
function serializeContractReceiver(receiver) {
    const address = serializeContractAddress(receiver.address);
    const hook = serializeReceiveHookName(receiver.hookName);
    return import_buffer28.Buffer.concat([address, hook]);
}
function serializeReceiver(receiver) {
    return import_buffer28.Buffer.concat(
        instanceOf(receiver)
            ? [encodeWord8(0), toBuffer2(receiver)]
            : [encodeWord8(1), serializeContractReceiver(receiver)]
    );
}
function serializeAdditionalData(data) {
    const serialized = import_buffer28.Buffer.from(data, 'hex');
    return packBufferWithWord16Length(serialized, true);
}
var makeSerializeList = (serialize) => (input) => {
    const n = encodeWord16(input.length, true);
    return import_buffer28.Buffer.concat([n, ...input.map(serialize)]);
};
function serializeCIS2Transfer(transfer) {
    const id = serializeCIS2TokenId(transfer.tokenId);
    const amount = serializeTokenAmount(transfer.tokenAmount);
    const from = serializeAddress(transfer.from);
    const to = serializeReceiver(transfer.to);
    const data = serializeAdditionalData(transfer.data ?? '');
    return import_buffer28.Buffer.concat([id, amount, from, to, data]);
}
var serializeCIS2Transfers = makeSerializeList(serializeCIS2Transfer);
function serializeCIS2UpdateOperator(update) {
    const type = encodeWord8(update.type === 'add' ? 1 : 0);
    const address = serializeAddress(update.address);
    return import_buffer28.Buffer.concat([type, address]);
}
var serializeCIS2UpdateOperators = makeSerializeList(serializeCIS2UpdateOperator);
function serializeCIS2BalanceOfQuery(query) {
    const token = serializeCIS2TokenId(query.tokenId);
    const address = serializeAddress(query.address);
    return import_buffer28.Buffer.concat([token, address]);
}
var serializeCIS2BalanceOfQueries = makeSerializeList(serializeCIS2BalanceOfQuery);
var deserializeCIS2BalanceOfResponse = makeDeserializeListResponse((cursor) => {
    const end = cursor.remainingBytes.findIndex((b) => b < 2 ** 7) + 1;
    if (end === 0) {
        throw new Error('Could not find leb128 end');
    }
    const leb128Slice = cursor.read(end);
    if (leb128Slice.length > TOKEN_AMOUNT_MAX_LENGTH) {
        throw new Error(`Found token amount with size exceeding the maximum allowed of ${TOKEN_AMOUNT_MAX_LENGTH}`);
    }
    const value = uleb128Decode(import_buffer28.Buffer.from(leb128Slice));
    return value;
});
var serializeCIS2TokenIds = makeSerializeList(serializeCIS2TokenId);
function serializeCIS2MetadataUrl({ url, hash: hash3 }) {
    const bUrl = packBufferWithWord16Length(import_buffer28.Buffer.from(url, 'utf8'), true);
    const bHash = makeSerializeOptional((h) => import_buffer28.Buffer.from(h, 'hex'))(hash3);
    return import_buffer28.Buffer.concat([bUrl, bHash]);
}
function deserializeCIS2MetadataUrl(value) {
    const cursor = typeof value === 'string' ? Cursor.fromHex(value) : value;
    const length = cursor.read(2).readUInt16LE(0);
    const url = cursor.read(length).toString('utf8');
    const hasChecksum = cursor.read(1).readUInt8(0);
    let metadataUrl;
    if (hasChecksum === 1) {
        const hash3 = cursor.read(32).toString('hex');
        metadataUrl = { url, hash: hash3 };
    } else if (hasChecksum === 0) {
        metadataUrl = { url };
    } else {
        throw new Error('Deserialization failed: boolean value had an unexpected value');
    }
    return metadataUrl;
}
var deserializeCIS2TokenMetadataResponse = makeDeserializeListResponse(deserializeCIS2MetadataUrl);
function serializeCIS2OperatorOfQuery(query) {
    const owner = serializeAddress(query.owner);
    const address = serializeAddress(query.address);
    return import_buffer28.Buffer.concat([owner, address]);
}
function tokenAddressFromBase58(str2) {
    const bytes2 = new import_buffer28.Buffer(import_bs58check3.default.decode(str2));
    const firstByte = bytes2[0];
    const [index, i] = uleb128DecodeWithIndex(bytes2, 1);
    const [subindex, j] = uleb128DecodeWithIndex(bytes2, i);
    const tokenIdBytes = new import_buffer28.Buffer(bytes2.subarray(j));
    if (firstByte !== 2) {
        throw Error('Invalid token address: The Base58Check version byte is expected to be 2');
    }
    const contract = create4(index, subindex);
    const id = deserializeCIS2TokenId(tokenIdBytes);
    return {
        contract,
        id,
    };
}
function tokenAddressToBase58(tokenAddress) {
    const firstByte = import_buffer28.Buffer.from('02', 'hex');
    const indexBytes = uleb128Encode(tokenAddress.contract.index);
    const subindexBytes = uleb128Encode(tokenAddress.contract.subindex);
    const tokenBytes = import_buffer28.Buffer.from(tokenAddress.id, 'hex');
    const bytes2 = import_buffer28.Buffer.concat([firstByte, indexBytes, subindexBytes, tokenBytes]);
    return import_bs58check3.default.encode(bytes2);
}
var serializeCIS2OperatorOfQueries = makeSerializeList(serializeCIS2OperatorOfQuery);
var deserializeCIS2OperatorOfResponse = makeDeserializeListResponse((cursor) => {
    const value = Boolean(cursor.read(1).readUInt8(0));
    return value;
});
function formatCIS2UpdateOperator(input) {
    return {
        update: input.type === 'add' ? { Add: {} } : { Remove: {} },
        operator: instanceOf11(input.address)
            ? {
                  Contract: [
                      {
                          index: Number(input.address.index),
                          subindex: Number(input.address.subindex),
                      },
                  ],
              }
            : { Account: [toBase58(input.address)] },
    };
}
function formatCIS2Transfer(input) {
    const from = instanceOf11(input.from)
        ? {
              Contract: [
                  {
                      index: Number(input.from.index),
                      subindex: Number(input.from.subindex),
                  },
              ],
          }
        : { Account: [toBase58(input.from)] };
    let to;
    if (instanceOf(input.to)) {
        to = { Account: [toBase58(input.to)] };
    } else {
        to = {
            Contract: [
                {
                    index: Number(input.to.address.index),
                    subindex: Number(input.to.address.subindex),
                },
                toString3(input.to.hookName),
            ],
        };
    }
    return {
        token_id: input.tokenId,
        amount: input.tokenAmount.toString(),
        from,
        to,
        data: input.data ?? '',
    };
}

// node_modules/@concordium/web-sdk/lib/esm/cis2/CIS2Contract.js
var import_json_bigint8 = __toESM(require_json_bigint(), 1);
var ensureMatchesInput = (input, deserializer) => (value) => {
    const result = deserializer(value);
    const expectList = Array.isArray(input);
    const expectLength = expectList ? input.length : 1;
    if (result.length !== expectLength) {
        throw new Error(
            `Expected list with length ${expectLength} when deserializing response, received list with length ${result.length}`
        );
    }
    if (expectList) {
        return result;
    }
    return result[0];
};
var CIS2DryRun = class extends ContractDryRun {
    transfer(sender, transfers, blockHash) {
        const serialize = makeDynamicFunction(serializeCIS2Transfers);
        return this.invokeMethod(fromStringUnchecked2('transfer'), sender, serialize, transfers, blockHash);
    }
    updateOperator(owner, updates, blockHash) {
        const serialize = makeDynamicFunction(serializeCIS2UpdateOperators);
        return this.invokeMethod(fromStringUnchecked2('updateOperator'), owner, serialize, updates, blockHash);
    }
};
var CIS2Contract = class _CIS2Contract extends CISContract {
    constructor() {
        super(...arguments);
        this.schema = {
            /** Base64 encoded schema for CIS-2.transfer parameter */
            transfer:
                'EAEUAAUAAAAIAAAAdG9rZW5faWQdAAYAAABhbW91bnQbJQAAAAQAAABmcm9tFQIAAAAHAAAAQWNjb3VudAEBAAAACwgAAABDb250cmFjdAEBAAAADAIAAAB0bxUCAAAABwAAAEFjY291bnQBAQAAAAsIAAAAQ29udHJhY3QBAgAAAAwWAQQAAABkYXRhHQE',
            /** Base64 encoded schema for CIS-2.updateOperator parameter */
            updateOperator:
                'EAEUAAIAAAAGAAAAdXBkYXRlFQIAAAAGAAAAUmVtb3ZlAgMAAABBZGQCCAAAAG9wZXJhdG9yFQIAAAAHAAAAQWNjb3VudAEBAAAACwgAAABDb250cmFjdAEBAAAADA',
        };
    }
    makeDryRunInstance(grpcClient, contractAddress, contractName) {
        return new CIS2DryRun(grpcClient, contractAddress, contractName);
    }
    /**
     * Creates a new `CIS2Contract` instance by querying the node for the necessary information through the supplied `grpcClient`.
     *
     * @param {ConcordiumGRPCClient} grpcClient - The client used for contract invocations and updates.
     * @param {ContractAddress.Type} contractAddress - Address of the contract instance.
     *
     * @throws If `InstanceInfo` could not be received for the contract, if the contract does not support the CIS-2 standard,
     * or if the contract name could not be parsed from the information received from the node.
     */
    static async create(grpcClient, contractAddress) {
        const contractName = await super.getContractName(grpcClient, contractAddress);
        const result = await cis0Supports(grpcClient, contractAddress, 'CIS-2');
        if ((result == null ? void 0 : result.type) !== CIS0.SupportType.Support) {
            throw new Error(
                `The CIS-2 standard is not supported by the contract at address ${(0, import_json_bigint8.stringify)(contractAddress)}`
            );
        }
        return new _CIS2Contract(grpcClient, contractAddress, contractName);
    }
    createTransfer(metadata, transfers) {
        const serialize = makeDynamicFunction(serializeCIS2Transfers);
        const format = makeDynamicFunction((us) => us.map(formatCIS2Transfer));
        return this.createUpdateTransaction(fromStringUnchecked2('transfer'), serialize, metadata, transfers, format);
    }
    transfer(metadata, transfers, signer) {
        const transaction = this.createTransfer(metadata, transfers);
        return this.sendUpdateTransaction(transaction, metadata, signer);
    }
    createUpdateOperator(metadata, updates) {
        const serialize = makeDynamicFunction(serializeCIS2UpdateOperators);
        const format = makeDynamicFunction((us) => us.map(formatCIS2UpdateOperator));
        return this.createUpdateTransaction(
            fromStringUnchecked2('updateOperator'),
            serialize,
            metadata,
            updates,
            format
        );
    }
    updateOperator(metadata, updates, signer) {
        const transaction = this.createUpdateOperator(metadata, updates);
        return this.sendUpdateTransaction(transaction, metadata, signer);
    }
    async balanceOf(queries, blockHash) {
        const serialize = makeDynamicFunction(serializeCIS2BalanceOfQueries);
        const deserialize = ensureMatchesInput(queries, deserializeCIS2BalanceOfResponse);
        return this.invokeView(fromStringUnchecked2('balanceOf'), serialize, deserialize, queries, blockHash);
    }
    operatorOf(queries, blockHash) {
        const serialize = makeDynamicFunction(serializeCIS2OperatorOfQueries);
        const deserialize = ensureMatchesInput(queries, deserializeCIS2OperatorOfResponse);
        return this.invokeView(fromStringUnchecked2('operatorOf'), serialize, deserialize, queries, blockHash);
    }
    tokenMetadata(tokenIds, blockHash) {
        const serialize = makeDynamicFunction(serializeCIS2TokenIds);
        const deserialize = ensureMatchesInput(tokenIds, deserializeCIS2TokenMetadataResponse);
        return this.invokeView(fromStringUnchecked2('tokenMetadata'), serialize, deserialize, tokenIds, blockHash);
    }
};

// node_modules/@concordium/web-sdk/lib/esm/cis4/util.js
var import_buffer29 = __toESM(require_buffer(), 1);
var CIS4;
(function (CIS42) {
    let CredentialStatus;
    (function (CredentialStatus2) {
        CredentialStatus2[(CredentialStatus2['Active'] = 0)] = 'Active';
        CredentialStatus2[(CredentialStatus2['Revoked'] = 1)] = 'Revoked';
        CredentialStatus2[(CredentialStatus2['Expired'] = 2)] = 'Expired';
        CredentialStatus2[(CredentialStatus2['NotActivated'] = 3)] = 'NotActivated';
    })((CredentialStatus = CIS42.CredentialStatus || (CIS42.CredentialStatus = {})));
})(CIS4 || (CIS4 = {}));
var Web3IdSigner = class _Web3IdSigner {
    /**
     * Builds a `Web3IdSigner` from ed25519 keypair
     *
     * @param {HexString} privateKey - the ed25519 private key used for signing
     * @param {HexString} publicKey - the ed25519 public key used for verifcation of signature
     */
    constructor(privateKey, publicKey) {
        this.privateKey = privateKey;
        this.publicKey = publicKey;
    }
    /**
     * Builds a `Web3IdSigner` from ed25519 private key
     *
     * @param {HexString} privateKey - the ed25519 private key used for signing
     *
     * @returns {Web3IdSigner} signer structure.
     */
    static async from(privateKey) {
        const publicKey = import_buffer29.Buffer.from(
            await getPublicKeyAsync(import_buffer29.Buffer.from(privateKey, 'hex'))
        ).toString('hex');
        return new _Web3IdSigner(privateKey, publicKey);
    }
    /** Public key of signer */
    get pubKey() {
        return this.publicKey;
    }
    /**
     * Signs the message given
     *
     * @param {ArrayBuffer} message - the message to sign
     *
     * @returns {Buffer} the signature on `message`
     */
    async sign(message) {
        return getSignature(message, this.privateKey);
    }
};
var REVOKE_DOMAIN = import_buffer29.Buffer.from('WEB3ID:REVOKE', 'utf8');
var deserializeOptional = (cursor, fun) => {
    const hasValue = cursor.read(1).readUInt8(0);
    if (!hasValue) {
        return void 0;
    }
    return fun(cursor);
};
function serializeDate(date) {
    return encodeWord64(BigInt(date.value), true);
}
function deserializeDate(cursor) {
    const value = cursor.read(8).readBigInt64LE(0);
    return fromMillis(Number(value));
}
function deserializeEd25519PublicKey(cursor) {
    return cursor.read(32).toString('hex');
}
function serializeCIS4CredentialInfo(credInfo) {
    const holderPubKey = import_buffer29.Buffer.from(credInfo.holderPubKey, 'hex');
    const holderRevocable = encodeBool(credInfo.holderRevocable);
    const validFrom = serializeDate(credInfo.validFrom);
    const validUntil = makeSerializeOptional(serializeDate)(credInfo.validUntil);
    const metadataUrl = serializeCIS2MetadataUrl(credInfo.metadataUrl);
    return import_buffer29.Buffer.concat([holderPubKey, holderRevocable, validFrom, validUntil, metadataUrl]);
}
function serializeAdditionalData2(data) {
    return packBufferWithWord16Length(import_buffer29.Buffer.from(data, 'hex'), true);
}
function serializeCIS4RegisterCredentialParam(param) {
    const credInfo = serializeCIS4CredentialInfo(param.credInfo);
    const additionalData = serializeAdditionalData2(param.additionalData);
    return import_buffer29.Buffer.concat([credInfo, additionalData]);
}
function deserializeCIS4CredentialInfo(cursor) {
    const holderPubKey = deserializeEd25519PublicKey(cursor);
    const holderRevocable = cursor.read(1).readUInt8(0) === 1;
    const validFrom = deserializeDate(cursor);
    const validUntil = deserializeOptional(cursor, deserializeDate);
    const metadataUrl = deserializeCIS2MetadataUrl(cursor);
    return {
        holderPubKey,
        holderRevocable,
        validFrom,
        validUntil,
        metadataUrl,
    };
}
function deserializeCIS4CredentialEntry(value) {
    const cursor = Cursor.fromHex(value);
    const credentialInfo = deserializeCIS4CredentialInfo(cursor);
    const schemaRef = deserializeCIS2MetadataUrl(cursor);
    const revocationNonce = cursor.read(8).readBigInt64LE(0).valueOf();
    return {
        credentialInfo,
        schemaRef,
        revocationNonce,
    };
}
function deserializeCIS4CredentialStatus(value) {
    const b = import_buffer29.Buffer.from(value, 'hex');
    return b.readUInt8(0);
}
function deserializeCIS4RevocationKey(cursor) {
    const key = deserializeEd25519PublicKey(cursor);
    const nonce = cursor.read(8).readBigInt64LE(0).valueOf();
    return {
        key,
        nonce,
    };
}
var deserializeCIS4RevocationKeys = makeDeserializeListResponse(deserializeCIS4RevocationKey);
function formatAdditionalData(data) {
    return import_buffer29.Buffer.from(data, 'hex').toJSON().data;
}
function formatCIS4RegisterCredential({ credInfo, additionalData }) {
    return {
        credential_info: {
            holder_id: credInfo.holderPubKey,
            holder_revocable: credInfo.holderRevocable,
            valid_from: toSchemaValue6(credInfo.validFrom),
            valid_until: toOptionJson(credInfo.validUntil === void 0 ? void 0 : toSchemaValue6(credInfo.validUntil)),
            metadata_url: {
                url: credInfo.metadataUrl.url,
                hash: toOptionJson(credInfo.metadataUrl.hash),
            },
        },
        auxiliary_data: formatAdditionalData(additionalData),
    };
}
function serializeReason(reason) {
    const b = import_buffer29.Buffer.from(reason);
    return packBufferWithWord8Length(b);
}
function serializeCIS4RevokeCredentialIssuerParam(param) {
    const credHolderPubKey = import_buffer29.Buffer.from(param.credHolderPubKey, 'hex');
    const reason = makeSerializeOptional(serializeReason)(param.reason);
    const additionalData = serializeAdditionalData2(param.additionalData);
    return import_buffer29.Buffer.concat([credHolderPubKey, reason, additionalData]);
}
function formatCIS4RevokeCredentialIssuer({ credHolderPubKey, reason, additionalData }) {
    return {
        credential_id: credHolderPubKey,
        reason: toOptionJson(reason ? { reason } : void 0),
        auxiliary_data: formatAdditionalData(additionalData),
    };
}
function serializeCIS4RevocationDataHolder(data) {
    const credentialPubKey = import_buffer29.Buffer.from(data.credentialPubKey, 'hex');
    const contractAddress = serializeContractAddress(data.signingData.contractAddress);
    const entrypoint = serializeReceiveHookName(data.signingData.entrypoint);
    const nonce = encodeWord64(data.signingData.nonce);
    const timestamp = serializeDate(data.signingData.timestamp);
    const reason = makeSerializeOptional(serializeReason)(data.reason);
    return import_buffer29.Buffer.concat([credentialPubKey, contractAddress, entrypoint, nonce, timestamp, reason]);
}
function formatCIS4RevokeCredentialHolder({ signature, data }) {
    const reason = data.reason;
    return {
        signature,
        data: {
            credential_id: data.credentialPubKey,
            signing_data: {
                contract_address: {
                    index: Number(data.signingData.contractAddress.index),
                    subindex: Number(data.signingData.contractAddress.subindex),
                },
                entry_point: toString3(data.signingData.entrypoint),
                nonce: Number(data.signingData.nonce),
                timestamp: toSchemaValue6(data.signingData.timestamp),
            },
            reason: toOptionJson(reason ? { reason } : void 0),
        },
    };
}
function serializeCIS4RevocationDataOther(data) {
    const credentialPubKey = import_buffer29.Buffer.from(data.credentialPubKey, 'hex');
    const contractAddress = serializeContractAddress(data.signingData.contractAddress);
    const entrypoint = serializeReceiveHookName(data.signingData.entrypoint);
    const nonce = encodeWord64(data.signingData.nonce);
    const timestamp = serializeDate(data.signingData.timestamp);
    const revocationPubKey = import_buffer29.Buffer.from(data.revocationPubKey, 'hex');
    const reason = makeSerializeOptional(serializeReason)(data.reason);
    return import_buffer29.Buffer.concat([
        credentialPubKey,
        contractAddress,
        entrypoint,
        nonce,
        timestamp,
        revocationPubKey,
        reason,
    ]);
}
function formatCIS4RevokeCredentialOther({ signature, data }) {
    const reason = data.reason;
    return {
        signature,
        data: {
            credential_id: data.credentialPubKey,
            signing_data: {
                contract_address: {
                    index: Number(data.signingData.contractAddress.index),
                    subindex: Number(data.signingData.contractAddress.subindex),
                },
                entry_point: toString3(data.signingData.entrypoint),
                nonce: Number(data.signingData.nonce),
                timestamp: toSchemaValue6(data.signingData.timestamp),
            },
            revocation_key: data.revocationPubKey,
            reason: toOptionJson(reason ? { reason } : void 0),
        },
    };
}
function serializeCIS4UpdateRevocationKeysParam(param) {
    const ks = param.keys.map((k) => import_buffer29.Buffer.from(k, 'hex'));
    const numKeys = encodeWord16(ks.length, true);
    const additionalData = serializeAdditionalData2(param.additionalData);
    return import_buffer29.Buffer.concat([numKeys, ...ks, additionalData]);
}
function deserializeCredentialType(cursor) {
    const len = cursor.read(1).readUInt8(0);
    return cursor.read(len).toString('utf8');
}
function formatCIS4UpdateRevocationKeys({ keys, additionalData }) {
    return { keys, auxiliary_data: formatAdditionalData(additionalData) };
}
function deserializeCIS4MetadataResponse(value) {
    const cursor = Cursor.fromHex(value);
    const issuerMetadata = deserializeCIS2MetadataUrl(cursor);
    const credentialType = deserializeCredentialType(cursor);
    const credentialSchema = deserializeCIS2MetadataUrl(cursor);
    return { issuerMetadata, credentialType, credentialSchema };
}

// node_modules/@concordium/web-sdk/lib/esm/cis4/CIS4Contract.js
var import_buffer30 = __toESM(require_buffer(), 1);
var CIS4DryRun = class extends ContractDryRun {
    /**
     * Performs a dry-run invocation of "CIS4.registerCredential"
     *
     * @param {AccountAddress.Type | ContractAddress.Type} sender - Address of the sender of the transfer.
     * @param {CIS4.CredentialInfo} credInfo - the credential info to register
     * @param {HexString} [additionalData] - any additional data to include
     * @param {BlockHash.Type} [blockHash] - The hash of the block to perform the invocation of. Defaults to the latest finalized block on chain.
     *
     * @returns {InvokeContractResult} the contract invocation result, which includes whether or not the invocation succeeded along with the energy spent.
     */
    registerCredential(sender, credInfo, additionalData = '', blockHash) {
        return this.invokeMethod(
            fromStringUnchecked2('registerCredential'),
            sender,
            serializeCIS4RegisterCredentialParam,
            { credInfo, additionalData },
            blockHash
        );
    }
    /**
     * Performs a dry-run invocation of "CIS4.revokeCredentialIssuer"
     *
     * @param {AccountAddress.Type | ContractAddress.Type} sender - Address of the sender of the transfer.
     * @param {HexString} credHolderPubKey - the public key of the credential holder (hex encoded)
     * @param {string} [reason] - the reason for the revocation
     * @param {HexString} [additionalData] - any additional data to include
     * @param {BlockHash.Type} [blockHash] - The hash of the block to perform the invocation of. Defaults to the latest finalized block on chain.
     *
     * @returns {InvokeContractResult} the contract invocation result, which includes whether or not the invocation succeeded along with the energy spent.
     */
    revokeCredentialAsIssuer(sender, credHolderPubKey, reason, additionalData = '', blockHash) {
        return this.invokeMethod(
            fromStringUnchecked2('revokeCredentialIssuer'),
            sender,
            serializeCIS4RevokeCredentialIssuerParam,
            { credHolderPubKey, reason, additionalData },
            blockHash
        );
    }
    /**
     * Performs a dry-run invocation of "CIS4.revokeCredentialHolder"
     *
     * @param {AccountAddress.Type | ContractAddress.Type} sender - Address of the sender of the transfer.
     * @param {Web3IdSigner} credHolderSigner - A signer structure for the credential holder
     * @param {bigint} nonce - the nonce of the owner inside the contract
     * @param {Date} expiry - Expiry time of the revocation message
     * @param {string} [reason] - the reason for the revocation
     * @param {BlockHash.Type} [blockHash] - The hash of the block to perform the invocation of. Defaults to the latest finalized block on chain.
     *
     * @returns {InvokeContractResult} the contract invocation result, which includes whether or not the invocation succeeded along with the energy spent.
     */
    async revokeCredentialAsHolder(sender, credHolderSigner, nonce, expiry, reason, blockHash) {
        const credentialPubKey = credHolderSigner.pubKey;
        const entrypoint = fromStringUnchecked2('revokeCredentialHolder');
        const signingData = {
            contractAddress: this.contractAddress,
            entrypoint,
            nonce,
            timestamp: fromDate2(expiry),
        };
        const serializedData = serializeCIS4RevocationDataHolder({
            credentialPubKey,
            signingData,
            reason,
        });
        const digest = import_buffer30.Buffer.concat([REVOKE_DOMAIN, serializedData]);
        const signature = await credHolderSigner.sign(digest);
        return this.invokeMethod(
            entrypoint,
            sender,
            () => import_buffer30.Buffer.concat([signature, serializedData]),
            // Reuse existing serialization
            void 0,
            blockHash
        );
    }
    /**
     * Performs a dry-run invocation of "CIS4.revokeCredentialOther"
     *
     * @param {AccountAddress.Type | ContractAddress.Type} sender - Address of the sender of the transfer.
     * @param {Web3IdSigner} revokerSigner - A signer structure for the credential holder
     * @param {HexString} credentialPubKey - the public key (hex encoded) for the credential to revoke
     * @param {bigint} nonce - the nonce of the owner inside the contract
     * @param {Date} expiry - Expiry time of the revocation message
     * @param {string} [reason] - the reason for the revocation
     * @param {BlockHash.Type} [blockHash] - The hash of the block to perform the invocation of. Defaults to the latest finalized block on chain.
     *
     * @returns {InvokeContractResult} the contract invocation result, which includes whether or not the invocation succeeded along with the energy spent.
     */
    async revokeCredentialAsOther(sender, revokerSigner, credentialPubKey, nonce, expiry, reason, blockHash) {
        const revocationPubKey = revokerSigner.pubKey;
        const entrypoint = fromStringUnchecked2('revokeCredentialOther');
        const signingData = {
            contractAddress: this.contractAddress,
            entrypoint,
            nonce,
            timestamp: fromDate2(expiry),
        };
        const serializedData = serializeCIS4RevocationDataOther({
            credentialPubKey,
            signingData,
            revocationPubKey,
            reason,
        });
        const digest = import_buffer30.Buffer.concat([REVOKE_DOMAIN, serializedData]);
        const signature = await revokerSigner.sign(digest);
        return this.invokeMethod(
            entrypoint,
            sender,
            () => import_buffer30.Buffer.concat([signature, serializedData]),
            // Reuse existing serialization
            void 0,
            blockHash
        );
    }
    /**
     * Performs a dry-run invocation of "CIS4.registerRevocationKeys"
     *
     * @param {AccountAddress.Type | ContractAddress.Type} sender - Address of the sender of the transfer.
     * @param {HexString | HexString[]} keys - a single or list of hex encoded public keys to be used for revocation
     * @param {HexString} [additionalData] - any additional data to include
     * @param {BlockHash.Type} [blockHash] - The hash of the block to perform the invocation of. Defaults to the latest finalized block on chain.
     *
     * @returns {InvokeContractResult} the contract invocation result, which includes whether or not the invocation succeeded along with the energy spent.
     */
    registerRevocationKeys(sender, keys, additionalData = '', blockHash) {
        const ks = Array.isArray(keys) ? keys : [keys];
        return this.invokeMethod(
            fromStringUnchecked2('registerRevocationKeys'),
            sender,
            serializeCIS4UpdateRevocationKeysParam,
            { additionalData, keys: ks },
            blockHash
        );
    }
    /**
     * Performs a dry-run invocation of "CIS4.removeRevocationKeys"
     *
     * @param {AccountAddress.Type | ContractAddress.Type} sender - Address of the sender of the transfer.
     * @param {HexString | HexString[]} keys - a single or list of hex encoded public keys to be removed
     * @param {HexString} [additionalData] - any additional data to include
     * @param {BlockHash.Type} [blockHash] - The hash of the block to perform the invocation of. Defaults to the latest finalized block on chain.
     *
     * @returns {InvokeContractResult} the contract invocation result, which includes whether or not the invocation succeeded along with the energy spent.
     */
    removeRevocationKeys(sender, keys, additionalData = '', blockHash) {
        const ks = Array.isArray(keys) ? keys : [keys];
        return this.invokeMethod(
            fromStringUnchecked2('removeRevocationKeys'),
            sender,
            serializeCIS4UpdateRevocationKeysParam,
            { additionalData, keys: ks },
            blockHash
        );
    }
};
var CIS4Contract = class _CIS4Contract extends CISContract {
    constructor() {
        super(...arguments);
        this.schema = {
            /** Parameter schema for `registerCredential` entrypoint */
            registerCredential:
                'FAACAAAADwAAAGNyZWRlbnRpYWxfaW5mbxQABQAAAAkAAABob2xkZXJfaWQeIAAAABAAAABob2xkZXJfcmV2b2NhYmxlAQoAAAB2YWxpZF9mcm9tDQsAAAB2YWxpZF91bnRpbBUCAAAABAAAAE5vbmUCBAAAAFNvbWUBAQAAAA0MAAAAbWV0YWRhdGFfdXJsFAACAAAAAwAAAHVybBYBBAAAAGhhc2gVAgAAAAQAAABOb25lAgQAAABTb21lAQEAAAAeIAAAAA4AAABhdXhpbGlhcnlfZGF0YRABAg',
            /** Parameter schema for `revokeCredentialHolder` entrypoint */
            revokeCredentialHolder:
                'FAACAAAACQAAAHNpZ25hdHVyZR5AAAAABAAAAGRhdGEUAAMAAAANAAAAY3JlZGVudGlhbF9pZB4gAAAADAAAAHNpZ25pbmdfZGF0YRQABAAAABAAAABjb250cmFjdF9hZGRyZXNzDAsAAABlbnRyeV9wb2ludBYBBQAAAG5vbmNlBQkAAAB0aW1lc3RhbXANBgAAAHJlYXNvbhUCAAAABAAAAE5vbmUCBAAAAFNvbWUBAQAAABQAAQAAAAYAAAByZWFzb24WAA',
            /** Parameter schema for `revokeCredentialIssuer` entrypoint */
            revokeCredentialIssuer:
                'FAADAAAADQAAAGNyZWRlbnRpYWxfaWQeIAAAAAYAAAByZWFzb24VAgAAAAQAAABOb25lAgQAAABTb21lAQEAAAAUAAEAAAAGAAAAcmVhc29uFgAOAAAAYXV4aWxpYXJ5X2RhdGEQAQI',
            /** Parameter schema for `revokeCredentialOther` entrypoint */
            revokeCredentialOther:
                'FAACAAAACQAAAHNpZ25hdHVyZR5AAAAABAAAAGRhdGEUAAQAAAANAAAAY3JlZGVudGlhbF9pZB4gAAAADAAAAHNpZ25pbmdfZGF0YRQABAAAABAAAABjb250cmFjdF9hZGRyZXNzDAsAAABlbnRyeV9wb2ludBYBBQAAAG5vbmNlBQkAAAB0aW1lc3RhbXANDgAAAHJldm9jYXRpb25fa2V5HiAAAAAGAAAAcmVhc29uFQIAAAAEAAAATm9uZQIEAAAAU29tZQEBAAAAFAABAAAABgAAAHJlYXNvbhYA',
            /** Parameter schema for `registerRevocationKeys` entrypoint */
            registerRevocationKeys: 'FAACAAAABAAAAGtleXMQAR4gAAAADgAAAGF1eGlsaWFyeV9kYXRhEAEC',
            /** Parameter schema for `removeRevocationKeys` entrypoint */
            removeRevocationKeys: 'FAACAAAABAAAAGtleXMQAR4gAAAADgAAAGF1eGlsaWFyeV9kYXRhEAEC',
        };
    }
    /**
     * Creates a new `CIS4Contract` instance by querying the node for the necessary information through the supplied `grpcClient`.
     *
     * @param {ConcordiumGRPCClient} grpcClient - The client used for contract invocations and updates.
     * @param {ContractAddress} contractAddress - Address of the contract instance.
     *
     * @throws If `InstanceInfo` could not be received for the contract,
     * or if the contract name could not be parsed from the information received from the node.
     */
    static async create(grpcClient, contractAddress) {
        const contractName = await super.getContractName(grpcClient, contractAddress);
        return new _CIS4Contract(grpcClient, contractAddress, contractName);
    }
    makeDryRunInstance(grpcClient, contractAddress, contractName) {
        return new CIS4DryRun(grpcClient, contractAddress, contractName);
    }
    /**
     * Look up an entry in the registry by the public key of its holder.
     *
     * @param {HexString} credHolderPubKey - public key identifying the credential holder
     * @param {BlockHash.Type} [blockHash] - block to perform query at.
     *
     * @returns {CIS4.CredentialEntry} a corresponding credential entry.
     */
    credentialEntry(credHolderPubKey, blockHash) {
        return this.invokeView(
            fromStringUnchecked2('credentialEntry'),
            (k) => import_buffer30.Buffer.from(k, 'hex'),
            deserializeCIS4CredentialEntry,
            credHolderPubKey,
            blockHash
        );
    }
    /**
     * Look up the status of a credential by the public key of its holder.
     *
     * @param {HexString} credHolderPubKey - public key identifying the credential holder
     * @param {BlockHash.Type} [blockHash] - block to perform query at.
     *
     * @returns {CIS4.CredentialStatus} a corresponding credential status.
     */
    credentialStatus(credHolderPubKey, blockHash) {
        return this.invokeView(
            fromStringUnchecked2('credentialStatus'),
            (k) => import_buffer30.Buffer.from(k, 'hex'),
            deserializeCIS4CredentialStatus,
            credHolderPubKey,
            blockHash
        );
    }
    /**
     * Get list of all revocation keys and their corresponding nonces.
     *
     * @param {BlockHash.Type} [blockHash] - block to perform query at.
     *
     * @returns {CIS4.RevocationKeyWithNonce[]} the revocation keys wityh corresponding nonces.
     */
    revocationKeys(blockHash) {
        return this.invokeView(
            fromStringUnchecked2('revocationKeys'),
            () => import_buffer30.Buffer.alloc(0),
            deserializeCIS4RevocationKeys,
            void 0,
            blockHash
        );
    }
    /**
     * Get the registry metadata.
     *
     * @param {BlockHash.Type} [blockHash] - block to perform query at.
     *
     * @returns {CIS4.MetadataUrl} a metadata URL.
     */
    registryMetadata(blockHash) {
        return this.invokeView(
            fromStringUnchecked2('registryMetadata'),
            () => import_buffer30.Buffer.alloc(0),
            deserializeCIS4MetadataResponse,
            void 0,
            blockHash
        );
    }
    /**
     * Get the {@link AccountAddress} public key of the issuer.
     *
     * @param {BlockHash.Type} [blockHash] - block to perform query at.
     *
     * @returns {HexString} a hex encoded public key.
     */
    issuer(blockHash) {
        return this.invokeView(
            fromStringUnchecked2('issuer'),
            () => import_buffer30.Buffer.alloc(0),
            (value) => value,
            void 0,
            blockHash
        );
    }
    /**
     * Create the details necessary to submit a CIS4.registerCredential update transaction.
     *
     * @param {CreateContractTransactionMetadata} metadata - transaction metadata
     * @param {CIS4.CredentialInfo} credInfo - the credential info to register
     * @param {HexString} [additionalData] - any additional data to include
     *
     * @returns {ContractUpdateTransactionWithSchema} Transaction data for a CIS4.registerCredential update.
     */
    createRegisterCredential(metadata, credInfo, additionalData = '') {
        return this.createUpdateTransaction(
            fromStringUnchecked2('registerCredential'),
            serializeCIS4RegisterCredentialParam,
            metadata,
            { credInfo, additionalData },
            formatCIS4RegisterCredential
        );
    }
    /**
     * Submit CIS4.registerCredential update transaction.
     *
     * @param {AccountSigner} signer - to be used for signing the transaction sent to the node.
     * @param {ContractTransactionMetadata} metadata - transaction metadata
     * @param {CIS4.CredentialInfo} credInfo - the credential info to register
     * @param {HexString} [additionalData] - any additional data to include
     *
     * @returns {TransactionHash.Type} The hash of the submitted transaction
     */
    registerCredential(signer, metadata, credInfo, additionalData = '') {
        const transaction = this.createRegisterCredential(metadata, credInfo, additionalData);
        return this.sendUpdateTransaction(transaction, metadata, signer);
    }
    /**
     * Create the details necessary to submit a CIS4.revokeCredentialIssuer update transaction.
     *
     * @param {CreateContractTransactionMetadata} metadata - transaction metadata
     * @param {HexString} credHolderPubKey - the public key of the credential holder (hex encoded)
     * @param {string} [reason] - the reason for the revocation
     * @param {HexString} [additionalData] - any additional data to include
     *
     * @returns {ContractUpdateTransactionWithSchema} Transaction data for a CIS4.revokeCredentialIssuer update.
     */
    createRevokeCredentialAsIssuer(metadata, credHolderPubKey, reason, additionalData = '') {
        return this.createUpdateTransaction(
            fromStringUnchecked2('revokeCredentialIssuer'),
            serializeCIS4RevokeCredentialIssuerParam,
            metadata,
            { credHolderPubKey, reason, additionalData },
            formatCIS4RevokeCredentialIssuer
        );
    }
    /**
     * Submit CIS4.revokeCredentialIssuer update transaction.
     *
     * @param {AccountSigner} signer - to be used for signing the transaction sent to the node.
     * @param {ContractTransactionMetadata} metadata - transaction metadata
     * @param {HexString} credHolderPubKey - the public key of the credential holder (hex encoded)
     * @param {string} [reason] - the reason for the revocation
     * @param {HexString} [additionalData] - any additional data to include
     *
     * @returns {TransactionHash.Type} The hash of the submitted transaction
     */
    revokeCredentialAsIssuer(signer, metadata, credHolderPubKey, reason, additionalData = '') {
        const transaction = this.createRevokeCredentialAsIssuer(metadata, credHolderPubKey, reason, additionalData);
        return this.sendUpdateTransaction(transaction, metadata, signer);
    }
    /**
     * Create the details necessary to submit a CIS4.revokeCredentialHolder update transaction.
     *
     * @param {CreateContractTransactionMetadata} metadata - transaction metadata
     * @param {Web3IdSigner} credHolderSigner - A signer structure for the credential holder
     * @param {bigint} nonce - the nonce of the owner inside the contract
     * @param {Date} expiry - Expiry time of the revocation message
     * @param {string} [reason] - the reason for the revocation
     *
     * @returns {ContractUpdateTransactionWithSchema} Transaction data for a CIS4.revokeCredentialHolder update.
     */
    async createRevokeCredentialAsHolder(metadata, credHolderSigner, nonce, expiry, reason) {
        const credentialPubKey = credHolderSigner.pubKey;
        const entrypoint = fromStringUnchecked2('revokeCredentialHolder');
        const signingData = {
            contractAddress: this.contractAddress,
            entrypoint,
            nonce,
            timestamp: fromDate2(expiry),
        };
        const serializedData = serializeCIS4RevocationDataHolder({
            credentialPubKey,
            signingData,
            reason,
        });
        const digest = import_buffer30.Buffer.concat([REVOKE_DOMAIN, serializedData]);
        const signature = await credHolderSigner.sign(digest);
        return this.createUpdateTransaction(
            entrypoint,
            () => import_buffer30.Buffer.concat([signature, serializedData]),
            // Reuse existing serialization
            metadata,
            {
                signature: signature.toString('hex'),
                data: { credentialPubKey, signingData, reason },
            },
            formatCIS4RevokeCredentialHolder
        );
    }
    /**
     * Submit CIS4.revokeCredentialHolder update transaction.
     * The revocation message is set to expire at the same time as the transaction (from `metadata.expiry`)
     *
     * @param {AccountSigner} signer - to be used for signing the transaction sent to the node.
     * @param {ContractTransactionMetadata} metadata - transaction metadata
     * @param {Web3IdSigner} credHolderSigner - A signer structure for the credential holder
     * @param {bigint} nonce - the nonce of the owner inside the contract
     * @param {string} [reason] - the reason for the revocation
     *
     * @returns {TransactionHash.Type} The hash of the submitted transaction
     */
    async revokeCredentialAsHolder(signer, metadata, credHolderSigner, nonce, reason) {
        const transaction = await this.createRevokeCredentialAsHolder(
            metadata,
            credHolderSigner,
            nonce,
            toDate(metadata.expiry ?? getContractUpdateDefaultExpiryDate()),
            reason
        );
        return this.sendUpdateTransaction(transaction, metadata, signer);
    }
    /**
     * Create the details necessary to submit a CIS4.revokeCredentialOther update transaction.
     *
     * @param {CreateContractTransactionMetadata} metadata - transaction metadata
     * @param {Web3IdSigner} revokerSigner - A signer structure for the revoker
     * @param {HexString} credentialPubKey - the public key (hex encoded) for the credential to revoke
     * @param {bigint} nonce - the nonce of the owner inside the contract
     * @param {Date} expiry - Expiry time of the revocation message
     * @param {string} [reason] - the reason for the revocation
     *
     * @returns {ContractUpdateTransactionWithSchema} Transaction data for a CIS4.revokeCredentialOther update.
     */
    async createRevokeCredentialAsOther(metadata, revokerSigner, credentialPubKey, nonce, expiry, reason) {
        const revocationPubKey = revokerSigner.pubKey;
        const entrypoint = fromStringUnchecked2('revokeCredentialOther');
        const signingData = {
            contractAddress: this.contractAddress,
            entrypoint,
            nonce,
            timestamp: fromDate2(expiry),
        };
        const serializedData = serializeCIS4RevocationDataOther({
            credentialPubKey,
            revocationPubKey,
            signingData,
            reason,
        });
        const digest = import_buffer30.Buffer.concat([REVOKE_DOMAIN, serializedData]);
        const signature = await revokerSigner.sign(digest);
        return this.createUpdateTransaction(
            entrypoint,
            () => import_buffer30.Buffer.concat([signature, serializedData]),
            // Reuse existing serialization
            metadata,
            {
                signature: signature.toString('hex'),
                data: {
                    credentialPubKey,
                    signingData,
                    revocationPubKey,
                    reason,
                },
            },
            formatCIS4RevokeCredentialOther
        );
    }
    /**
     * Submit CIS4.revokeCredentialOther update transaction.
     * The revocation message is set to expire at the same time as the transaction (from `metadata.expiry`)
     *
     * @param {AccountSigner} signer - to be used for signing the transaction sent to the node.
     * @param {ContractTransactionMetadata} metadata - transaction metadata
     * @param {Web3IdSigner} revokerSigner - A signer structure for the credential holder
     * @param {HexString} credentialPubKey - the public key (hex encoded) for the credential to revoke
     * @param {bigint} nonce - the nonce of the owner inside the contract
     * @param {string} [reason] - the reason for the revocation
     *
     * @returns {TransactionHash.Type} The hash of the submitted transaction
     */
    async revokeCredentialAsOther(signer, metadata, revokerSigner, credentialPubKey, nonce, reason) {
        const transaction = await this.createRevokeCredentialAsOther(
            metadata,
            revokerSigner,
            credentialPubKey,
            nonce,
            toDate(metadata.expiry ?? getContractUpdateDefaultExpiryDate()),
            reason
        );
        return this.sendUpdateTransaction(transaction, metadata, signer);
    }
    /**
     * Create the details necessary to submit a CIS4.registerRevicationKeys update transaction.
     *
     * @param {CreateContractTransactionMetadata} metadata - transaction metadata
     * @param {HexString | HexString[]} keys - a single or list of hex encoded public keys to be used for revocation
     * @param {HexString} [additionalData] - any additional data to include
     *
     * @returns {ContractUpdateTransactionWithSchema} Transaction data for a CIS4.registerRevicationKeys update.
     */
    createRegisterRevocationKeys(metadata, keys, additionalData = '') {
        const ks = Array.isArray(keys) ? keys : [keys];
        return this.createUpdateTransaction(
            fromStringUnchecked2('registerRevocationKeys'),
            serializeCIS4UpdateRevocationKeysParam,
            metadata,
            { additionalData, keys: ks },
            formatCIS4UpdateRevocationKeys
        );
    }
    /**
     * Submit CIS4.registerRevocationKeys update transaction.
     *
     * @param {AccountSigner} signer - to be used for signing the transaction sent to the node.
     * @param {ContractTransactionMetadata} metadata - transaction metadata
     * @param {HexString | HexString[]} keys - a single or list of hex encoded public keys to be used for revocation
     * @param {HexString} [additionalData] - any additional data to include
     *
     * @returns {TransactionHash.Type} The hash of the submitted transaction
     */
    registerRevocationKeys(signer, metadata, keys, additionalData = '') {
        const transaction = this.createRegisterRevocationKeys(metadata, keys, additionalData);
        return this.sendUpdateTransaction(transaction, metadata, signer);
    }
    /**
     * Create the details necessary to submit a CIS4.removeRevicationKeys update transaction.
     *
     * @param {CreateContractTransactionMetadata} metadata - transaction metadata
     * @param {HexString | HexString[]} keys - a single or list of hex encoded public keys to be removed
     * @param {HexString} [additionalData] - any additional data to include
     *
     * @returns {ContractUpdateTransactionWithSchema} Transaction data for a CIS4.removeRevicationKeys update.
     */
    createRemoveRevocationKeys(metadata, keys, additionalData = '') {
        const ks = Array.isArray(keys) ? keys : [keys];
        return this.createUpdateTransaction(
            fromStringUnchecked2('removeRevocationKeys'),
            serializeCIS4UpdateRevocationKeysParam,
            metadata,
            { additionalData, keys: ks },
            formatCIS4UpdateRevocationKeys
        );
    }
    /**
     * Submit CIS4.removeRevocationKeys update transaction.
     *
     * @param {AccountSigner} signer - to be used for signing the transaction sent to the node.
     * @param {ContractTransactionMetadata} metadata - transaction metadata
     * @param {HexString | HexString[]} keys - a single or list of hex encoded public keys to be removed
     * @param {HexString} [additionalData] - any additional data to include
     *
     * @returns {TransactionHash.Type} The hash of the submitted transaction
     */
    removeRevocationKeys(signer, metadata, keys, additionalData = '') {
        const transaction = this.createRemoveRevocationKeys(metadata, keys, additionalData);
        return this.sendUpdateTransaction(transaction, metadata, signer);
    }
};

// node_modules/@concordium/web-sdk/lib/esm/web3-id/web3IdProofTypes.js
function isTimestampAttribute(attribute) {
    return attribute.type === 'date-time' && typeof attribute.timestamp === 'string';
}
var IDENTITY_SUBJECT_SCHEMA = {
    type: 'object',
    properties: {
        id: {
            title: 'id',
            type: 'string',
            description: 'Credential subject identifier',
        },
        attributes: {
            type: 'object',
            properties: {
                firstName: {
                    title: 'First name',
                    type: 'string',
                },
                lastName: {
                    title: 'Last name',
                    type: 'string',
                },
                sex: {
                    title: 'Sex',
                    type: 'string',
                },
                dob: {
                    title: 'Date of birth',
                    type: 'string',
                },
                countryOfResidence: {
                    title: 'Country of residence',
                    type: 'string',
                },
                nationality: {
                    title: 'Nationality',
                    type: 'string',
                },
                idDocType: {
                    title: 'ID Document Type',
                    type: 'string',
                },
                idDocNo: {
                    title: 'ID Document Number',
                    type: 'string',
                },
                idDocIssuer: {
                    title: 'ID Document Issuer',
                    type: 'string',
                },
                idDocIssuedAt: {
                    title: 'ID Document Issued At',
                    type: 'string',
                },
                idDocExpiresAt: {
                    title: 'ID Document Expires At',
                    type: 'string',
                },
                nationalIdNo: {
                    title: 'National ID Number',
                    type: 'string',
                },
                taxIdNo: {
                    title: 'Tax ID Number',
                    type: 'string',
                },
            },
            required: [],
        },
    },
    required: [],
};
function isAccountCredentialStatement(statement) {
    return statement.idQualifier.type === 'cred';
}
function isVerifiableCredentialStatement(statement) {
    return statement.idQualifier.type === 'sci';
}
function isVerifiableCredentialRequestStatement(statement) {
    return Boolean(statement.type);
}

// node_modules/@concordium/web-sdk/lib/esm/web3-id/web3IdProofs.js
var import_buffer31 = __toESM(require_buffer(), 1);

// node_modules/@concordium/web-sdk/lib/esm/web3-id/web3IdHelpers.js
function compareStringAttributes(a, b) {
    const encoder = new TextEncoder();
    const aBytes = encoder.encode(a);
    const bBytes = encoder.encode(b);
    if (aBytes.length < bBytes.length) return -1;
    if (aBytes.length > bBytes.length) return 1;
    for (const [i, aByte] of aBytes.entries()) {
        const bByte = bBytes[i];
        if (aByte === bBytes[i]) continue;
        return aByte < bByte ? -1 : 1;
    }
    return 0;
}
function isStringAttributeInRange(value, lower, upper) {
    const lowCmp = compareStringAttributes(value, lower);
    if (lowCmp < 0) {
        return false;
    }
    const upCmp = compareStringAttributes(value, upper);
    return upCmp < 0;
}
function timestampToDate(attribute) {
    return new Date(Date.parse(attribute.timestamp));
}
function dateToTimestampAttribute(value) {
    return {
        type: 'date-time',
        timestamp: value.toISOString(),
    };
}
function statementAttributeTypeToAttributeType(statementAttribute) {
    if (statementAttribute instanceof Date) {
        return dateToTimestampAttribute(statementAttribute);
    }
    return statementAttribute;
}

// node_modules/@concordium/web-sdk/lib/esm/web3-id/web3IdProofs.js
var MAX_STRING_BYTE_LENGTH = 31;
var MAX_U64 = 18446744073709551615n;
var MIN_DATE_ISO = '-262144-01-01T00:00:00Z';
var MAX_DATE_ISO = '+262143-12-31T23:59:59.999999999Z';
var MIN_DATE_TIMESTAMP = Date.parse(MIN_DATE_ISO);
var MAX_DATE_TIMESTAMP = Date.parse(MAX_DATE_ISO);
var TIMESTAMP_VALID_VALUES = MIN_DATE_ISO + 'to ' + MAX_DATE_ISO;
var STRING_VALID_VALUES = '0 to ' + MAX_STRING_BYTE_LENGTH + ' bytes as UTF-8';
var INTEGER_VALID_VALUES = '0 to ' + MAX_U64;
var throwRangeError = (title, property, end, mustBe, validRange) => {
    throw new Error(
        title +
            ' is a ' +
            property +
            ' property and therefore the ' +
            end +
            ' end of a range statement must be a ' +
            mustBe +
            ' in the range of ' +
            validRange
    );
};
var throwSetError = (title, property, mustBe, validRange) => {
    throw new Error(
        title +
            ' is a ' +
            property +
            ' property and therefore the members of a set statement must be ' +
            mustBe +
            ' in the range of ' +
            validRange
    );
};
function isTimestampAttributeSchemaProperty(properties) {
    return properties && properties.type === 'object' && properties.properties.type.const === 'date-time';
}
function isValidStringAttribute(attributeValue) {
    return import_buffer31.Buffer.from(attributeValue, 'utf-8').length <= MAX_STRING_BYTE_LENGTH;
}
function isValidIntegerAttribute(attributeValue) {
    return attributeValue >= 0 && attributeValue <= MAX_U64;
}
function isValidTimestampAttribute(attributeValue) {
    return attributeValue.getTime() >= MIN_DATE_TIMESTAMP && attributeValue.getTime() <= MAX_DATE_TIMESTAMP;
}
function validateTimestampAttribute(value) {
    return isTimestampAttribute(value) && isValidTimestampAttribute(timestampToDate(value));
}
function validateStringAttribute(value) {
    return typeof value === 'string' && isValidStringAttribute(value);
}
function validateIntegerAttribute(value) {
    return typeof value === 'bigint' && isValidIntegerAttribute(value);
}
function verifyRangeStatement2(statement, properties) {
    if (statement.lower === void 0) {
        throw new Error('Range statements must contain a lower field');
    }
    if (statement.upper === void 0) {
        throw new Error('Range statements must contain an upper field');
    }
    if (properties) {
        const checkRange = (typeName, validate, typeString, validRange) => {
            if (!validate(statement.lower)) {
                throwRangeError(properties.title, typeName, 'lower', typeString, validRange);
            }
            if (!validate(statement.upper)) {
                throwRangeError(properties.title, typeName, 'upper', typeString, validRange);
            }
        };
        if (isTimestampAttributeSchemaProperty(properties)) {
            checkRange('timestamp', validateTimestampAttribute, 'Date', TIMESTAMP_VALID_VALUES);
        } else if (properties.type === 'string') {
            checkRange('string', validateStringAttribute, 'string', STRING_VALID_VALUES);
        } else if (properties.type === 'integer') {
            checkRange('integer', validateIntegerAttribute, 'bigint', INTEGER_VALID_VALUES);
        }
    }
    if (
        ((properties == null ? void 0 : properties.type) === 'integer' && statement.upper < statement.lower) ||
        (isTimestampAttributeSchemaProperty(properties) &&
            isTimestampAttribute(statement.lower) &&
            isTimestampAttribute(statement.upper) &&
            timestampToDate(statement.upper).getTime() < timestampToDate(statement.lower).getTime()) ||
        ((properties == null ? void 0 : properties.type) === 'string' &&
            compareStringAttributes(statement.lower, statement.upper) > 0)
    ) {
        throw new Error('Upper bound must be greater than lower bound');
    }
}
function verifySetStatement2(statement, statementTypeName, properties) {
    if (statement.set === void 0) {
        throw new Error(statementTypeName + 'statements must contain a set field');
    }
    if (statement.set.length === 0) {
        throw new Error(statementTypeName + ' statements may not use empty sets');
    }
    if (properties) {
        const checkSet = (typeName, validate, typeString, validValues) => {
            if (!statement.set.every(validate)) {
                throwSetError(properties.title, typeName, typeString, validValues);
            }
        };
        if (isTimestampAttributeSchemaProperty(properties)) {
            checkSet('date-time', validateTimestampAttribute, 'Date', TIMESTAMP_VALID_VALUES);
        } else if (properties.type === 'string') {
            checkSet('string', validateStringAttribute, 'string', STRING_VALID_VALUES);
        } else if (properties.type === 'integer') {
            checkSet('integer', validateIntegerAttribute, 'bigint', INTEGER_VALID_VALUES);
        }
    }
}
function verifyAtomicStatement2(statement, schema) {
    if (statement.type === void 0) {
        throw new Error('Statements must contain a type field');
    }
    if (statement.attributeTag === void 0) {
        throw new Error('Statements must contain an attributeTag field');
    }
    if (schema && !Object.keys(schema.properties.attributes.properties).includes(statement.attributeTag)) {
        throw new Error('Unknown attributeTag: ' + statement.attributeTag);
    }
    const property = schema && schema.properties.attributes.properties[statement.attributeTag];
    switch (statement.type) {
        case StatementTypes.AttributeInRange:
            return verifyRangeStatement2(statement, property);
        case StatementTypes.AttributeInSet:
            return verifySetStatement2(statement, 'membership', property);
        case StatementTypes.AttributeNotInSet:
            return verifySetStatement2(statement, 'non-membership', property);
        case StatementTypes.RevealAttribute:
            return;
        default:
            throw new Error(
                // eslint-disable-next-line @typescript-eslint/no-explicit-any
                'Unknown statement type: ' + statement.type
            );
    }
}
function verifyAtomicStatementInContext(statement, existingStatements, schema) {
    verifyAtomicStatement2(statement, schema);
    if (existingStatements.some((v) => v.attributeTag === statement.attributeTag)) {
        throw new Error('Only 1 statement is allowed for each attribute');
    }
}
function verifyAtomicStatements(statements, schema) {
    if (statements.length === 0) {
        throw new Error('Empty statements are not allowed');
    }
    const checkedStatements = [];
    for (const s of statements) {
        verifyAtomicStatementInContext(s, checkedStatements, schema);
        checkedStatements.push(s);
    }
    return true;
}
function getWeb3IdCredentialQualifier(validContractAddresses) {
    return {
        type: 'sci',
        issuers: validContractAddresses,
    };
}
function getAccountCredentialQualifier(validIdentityProviders) {
    return {
        type: 'cred',
        issuers: validIdentityProviders,
    };
}
var AtomicStatementBuilder = class {
    constructor(schema) {
        this.statements = [];
        this.schema = schema;
    }
    /**
     * Outputs the built statement.
     */
    getStatement() {
        return this.statements;
    }
    /**
     * This checks whether the given statement may be added to the statement being built.
     * If the statement breaks any rules, this will throw an error.
     */
    check(statement) {
        if (this.schema) {
            verifyAtomicStatementInContext(statement, this.statements, this.schema);
        }
    }
    /**
     * Add to the statement, that the given attribute should be in the given range, i.e. that lower <= attribute < upper.
     * @param attribute the attribute that should be checked
     * @param lower: the lower end of the range, inclusive.
     * @param upper: the upper end of the range, exclusive.
     * @returns the updated builder
     */
    addRange(attribute, lower, upper) {
        const statement = {
            type: StatementTypes.AttributeInRange,
            attributeTag: attribute,
            lower: statementAttributeTypeToAttributeType(lower),
            upper: statementAttributeTypeToAttributeType(upper),
        };
        this.check(statement);
        this.statements.push(statement);
        return this;
    }
    /**
     * Add to the statement, that the given attribute should be one of the values in the given set.
     * @param attribute the attribute that should be checked
     * @param set: the set of values that the attribute must be included in.
     * @returns the updated builder
     */
    addMembership(attribute, set) {
        const statement = {
            type: StatementTypes.AttributeInSet,
            attributeTag: attribute,
            set: set.map(statementAttributeTypeToAttributeType),
        };
        this.check(statement);
        this.statements.push(statement);
        return this;
    }
    /**
     * Add to the statement, that the given attribute should _not_ be one of the values in the given set.
     * @param attribute the attribute that should be checked
     * @param set: the set of values that the attribute must be included in.
     * @returns the updated builder
     */
    addNonMembership(attribute, set) {
        const statement = {
            type: StatementTypes.AttributeNotInSet,
            attributeTag: attribute,
            set: set.map(statementAttributeTypeToAttributeType),
        };
        this.check(statement);
        this.statements.push(statement);
        return this;
    }
    /**
     * Add to the statement, that the given attribute should be revealed.
     * The proof will contain the value.
     * @param attribute the attribute that should be revealed
     * @returns the updated builder
     */
    revealAttribute(attribute) {
        const statement = {
            type: StatementTypes.RevealAttribute,
            attributeTag: attribute,
        };
        this.check(statement);
        this.statements.push(statement);
        return this;
    }
};
var AccountStatementBuild = class extends AtomicStatementBuilder {
    /**
     * Add to the statement that the age is at minimum the given value.
     * This adds a range statement that the date of birth is between 1st of january 1800 and <age> years ago.
     * @param age: the minimum age allowed.
     * @returns the updated builder
     */
    addMinimumAge(age) {
        return this.addRange(AttributeKeyString.dob, MIN_DATE, getPastDate(age, 1));
    }
    /**
     * Add to the statement that the age is at maximum the given value.
     * This adds a range statement that the date of birth is between <age + 1> years ago and 1st of january 9999.
     * @param age: the maximum age allowed.
     * @returns the updated builder
     */
    addMaximumAge(age) {
        return this.addRange(AttributeKeyString.dob, getPastDate(age + 1, 1), MAX_DATE);
    }
    /**
     * Add to the statement that the age is between two given ages.
     * This adds a range statement that the date of birth is between <maxAge> years ago and <minAge> years ago.
     * @param minAge: the maximum age allowed.
     * @param maxAge: the maximum age allowed.
     * @returns the updated builder
     */
    addAgeInRange(minAge, maxAge) {
        return this.addRange(AttributeKeyString.dob, getPastDate(maxAge + 1, 1), getPastDate(minAge));
    }
    /**
     * Add to the statement that the user's document expiry is atleast the given date.
     * This adds a range statement that the idDocExpiresAt is between the given date and 1st of january 9999 .
     * @param earliestDate: the earliest the document is allow to be expired at, should be a string in YYYYMMDD format.
     * @returns the updated builder
     */
    documentExpiryNoEarlierThan(earliestDate) {
        return this.addRange(AttributeKeyString.idDocExpiresAt, earliestDate, MAX_DATE);
    }
    /**
     * Add to the statement that the country of residence is one of the EU countries
     * @returns the updated builder
     */
    addEUResidency() {
        return this.addMembership(AttributeKeyString.countryOfResidence, EU_MEMBERS);
    }
    /**
     * Add to the statement that the nationality is one of the EU countries
     * @returns the updated builder
     */
    addEUNationality() {
        return this.addMembership(AttributeKeyString.nationality, EU_MEMBERS);
    }
};
var Web3StatementBuilder = class {
    constructor() {
        this.statements = [];
    }
    add(idQualifier, builderCallback, schema) {
        const builder = new AtomicStatementBuilder(schema);
        builderCallback(builder);
        this.statements.push({
            idQualifier,
            statement: builder.getStatement(),
        });
        return this;
    }
    addForVerifiableCredentials(validContractAddresses, builderCallback, schema) {
        return this.add(getWeb3IdCredentialQualifier(validContractAddresses), builderCallback, schema);
    }
    addForIdentityCredentials(validIdentityProviders, builderCallback) {
        return this.add(
            getAccountCredentialQualifier(validIdentityProviders),
            builderCallback,
            IDENTITY_SUBJECT_SCHEMA
        );
    }
    getStatements() {
        return this.statements;
    }
};
function createWeb3IdDID(network, publicKey, index, subindex) {
    return (
        'did:ccd:' +
        network.toLowerCase() +
        ':sci:' +
        index.toString() +
        ':' +
        subindex.toString() +
        '/credentialEntry/' +
        publicKey
    );
}
function createAccountDID(network, credId) {
    return 'did:ccd:' + network.toLowerCase() + ':cred:' + credId;
}
function createAccountCommitmentInput(statements, identityProvider, attributes, randomness) {
    return {
        type: 'account',
        issuer: identityProvider,
        values: statements.reduce((acc, x) => {
            const attr = attributes.chosenAttributes[x.attributeTag];
            if (attr !== void 0) {
                acc[x.attributeTag] = attr;
            }
            return acc;
        }, {}),
        randomness,
    };
}
function createAccountCommitmentInputWithHdWallet(
    statements,
    identityProvider,
    attributes,
    wallet,
    identityIndex,
    credIndex
) {
    const randomness = statements.reduce((acc, x) => {
        acc[x.attributeTag] = wallet
            .getAttributeCommitmentRandomness(
                identityProvider,
                identityIndex,
                credIndex,
                AttributesKeys[x.attributeTag]
            )
            .toString('hex');
        return acc;
    }, {});
    return createAccountCommitmentInput(statements, identityProvider, attributes, randomness);
}
function createWeb3CommitmentInput(verifiableCredentialPrivateKey, credentialSubject, randomness, signature) {
    return {
        type: 'web3Issuer',
        signer: verifiableCredentialPrivateKey,
        values: credentialSubject.attributes,
        randomness,
        signature,
    };
}
function createWeb3CommitmentInputWithHdWallet(
    wallet,
    issuer,
    credentialIndex,
    credentialSubject,
    randomness,
    signature
) {
    return createWeb3CommitmentInput(
        wallet.getVerifiableCredentialSigningKey(issuer, credentialIndex).toString('hex'),
        credentialSubject,
        randomness,
        signature
    );
}
function isInRange(value, lower, upper) {
    if (typeof value === 'string' && typeof lower === 'string' && typeof upper === 'string') {
        return isStringAttributeInRange(value, lower, upper);
    }
    if (typeof value === 'bigint' && typeof lower === 'bigint' && typeof upper === 'bigint') {
        return lower <= value && upper > value;
    }
    if (isTimestampAttribute(value) && isTimestampAttribute(lower) && isTimestampAttribute(upper)) {
        return (
            timestampToDate(lower).getTime() <= timestampToDate(value).getTime() &&
            timestampToDate(upper).getTime() > timestampToDate(value).getTime()
        );
    }
    return false;
}
function isInSet(value, set) {
    if (typeof value === 'string' || typeof value === 'bigint') {
        return set.includes(value);
    }
    if (isTimestampAttribute(value)) {
        return set
            .map((timestamp) => (isTimestampAttribute(timestamp) ? timestampToDate(timestamp).getTime() : void 0))
            .includes(timestampToDate(value).getTime());
    }
    return false;
}
function canProveAtomicStatement(statement, attributes) {
    const attribute = attributes[statement.attributeTag];
    if (attribute === void 0) {
        return false;
    }
    switch (statement.type) {
        case StatementTypes.AttributeInRange:
            return isInRange(attribute, statement.lower, statement.upper);
        case StatementTypes.AttributeInSet:
            return isInSet(attribute, statement.set);
        case StatementTypes.AttributeNotInSet:
            return !isInSet(attribute, statement.set);
        case StatementTypes.RevealAttribute:
            return attribute !== void 0;
        default:
            throw new Error('Statement type of ' + statement.type + ' is not supported');
    }
}
function canProveCredentialStatement(credentialStatement, attributes) {
    return credentialStatement.statement.every((statement) => canProveAtomicStatement(statement, attributes));
}

export {
    PassiveCommitteeInfo,
    NodeCatchupStatus,
    TransactionEventTag,
    isHex,
    wasmToSchema,
    unwrap,
    streamToList,
    toBuffer,
    TypedJsonParseErrorCode,
    TypedJsonParseError,
    AccountAddress_exports,
    TransactionKindString,
    getTransactionKindString,
    isInitContractSummary,
    isUpdateContractSummary,
    isTransferLikeSummary,
    isRejectTransaction,
    isSuccessTransaction,
    getTransactionRejectReason,
    getReceiverAccount,
    affectedContracts,
    affectedAccounts,
    getSummaryContractUpdateLogs,
    UpdateType,
    KeyUpdateEntryStatus,
    HigherLevelKeyUpdateType,
    AuthorizationKeysUpdateType,
    RejectReasonTag,
    specialEventAffectedAccounts,
    RpcError,
    isRpcError,
    AttributesKeys,
    AttributeKeyString,
    Sex,
    IdDocType,
    TransactionStatusEnum,
    TransactionSummaryType,
    StakePendingChangeType,
    OpenStatus,
    OpenStatusText,
    BakerPoolPendingChangeType,
    PoolStatusType,
    DelegationTargetType,
    AccountInfoType,
    BlockItemKind,
    AccountTransactionType,
    isAccountTransactionType,
    ContractVersion,
    SchemaVersion,
    encodeHexString,
    DataBlob,
    CcdAmount_exports,
    ContractName_exports,
    EntrypointName_exports,
    ReceiveName_exports,
    toOptionJson,
    parseRawModuleSchema,
    deserializeVersionedSchemaModule,
    deserializeUnversionedSchemaModule,
    deserializeSchemaType,
    serializeSchemaType,
    getInitContractParameterSchema2 as getInitContractParameterSchema,
    getUpdateContractParameterSchema,
    displayTypeSchemaTemplate2 as displayTypeSchemaTemplate,
    serializeInitContractParameters2 as serializeInitContractParameters,
    serializeUpdateContractParameters,
    serializeTypeValue2 as serializeTypeValue,
    deserializeContractState,
    deserializeReceiveReturnValue2 as deserializeReceiveReturnValue,
    deserializeReceiveError2 as deserializeReceiveError,
    deserializeInitError2 as deserializeInitError,
    deserializeTypeValue2 as deserializeTypeValue,
    Parameter_exports,
    SimpleTransferHandler,
    SimpleTransferWithMemoHandler,
    DeployModuleHandler,
    InitContractHandler,
    UpdateContractHandler,
    UpdateCredentialsHandler,
    RegisterDataHandler,
    ConfigureBakerHandler,
    ConfigureDelegationHandler,
    getAccountTransactionHandler,
    Energy_exports,
    constantA,
    constantB,
    calculateEnergyCost,
    getEnergyCost,
    getExchangeRate,
    convertEnergyToMicroCcd,
    sha256,
    serializeAccountTransaction,
    serializeAccountTransactionPayload,
    getAccountTransactionHash,
    getAccountTransactionSignDigest,
    serializeAccountTransactionForSubmission,
    getCredentialForExistingAccountSignDigest,
    getCredentialDeploymentSignDigest,
    ModuleReference_exports,
    versionedModuleSourceFromBuffer,
    versionedModuleSourceToBuffer,
    calculateModuleReference,
    parseModuleInterface,
    getEmbeddedModuleSchema,
    replaceDateWithTimeStampAttribute,
    reviveDateFromTimeStampAttribute,
    VerifiablePresentation,
    SequenceNumber_exports,
    TransactionExpiry_exports,
    deserializeAccountTransaction,
    parseWallet,
    getSignature,
    buildBasicAccountSigner,
    buildAccountSigner,
    signTransaction,
    signMessage,
    verifyMessageSignature,
    isAuthorizationsV1,
    isChainParametersV0,
    isChainParametersV1,
    isChainParametersV2,
    isBlockInfoV0,
    isBlockInfoV1,
    isConsensusStatusV0,
    isConsensusStatusV1,
    isElectionInfoV0,
    isElectionInfoV1,
    isInstanceInfoV1,
    isInstanceInfoV0,
    isRewardStatusV1,
    isDelegatorAccount,
    isBakerAccount,
    isReduceStakePendingChange,
    isRemovalPendingChange,
    MIN_DATE,
    MAX_DATE,
    EU_MEMBERS,
    StatementTypes,
    uleb128Decode,
    uleb128DecodeWithIndex,
    uleb128Encode,
    ContractAddress_exports,
    ReturnValue_exports,
    ContractDryRun,
    Contract,
    ModuleClient_exports,
    TransactionHash_exports,
    BlockHash_exports,
    InitName_exports,
    CredentialRegistrationId_exports,
    Timestamp_exports,
    Duration_exports,
    ContractEvent_exports,
    jsonParse,
    jsonStringify,
    jsonUnwrapStringify,
    getCredentialDeploymentTransactionHash,
    serializeCredentialDeploymentTransactionForSubmission,
    serializeCredentialDeploymentPayload2 as serializeCredentialDeploymentPayload,
    deserializeTransaction,
    generateBakerKeys2 as generateBakerKeys,
    ConcordiumHdWallet,
    createIdentityRequestWithKeys,
    createIdentityRequest,
    createIdentityRecoveryRequest2 as createIdentityRecoveryRequest,
    createIdentityRecoveryRequestWithKeys,
    getIdProof,
    createCredentialDeploymentTransaction,
    createUnsignedCredentialForExistingAccount,
    buildSignedCredentialForExistingAccount,
    getAccountAddress,
    createCredentialTransaction,
    createCredentialTransactionNoSeed,
    signCredentialTransaction,
    verifyWeb3IdCredentialSignature2 as verifyWeb3IdCredentialSignature,
    getVerifiablePresentation,
    getPastDate,
    verifyIdstatement,
    IdStatementBuilder,
    attributesWithRange,
    attributesWithSet,
    GrpcWebFetchTransport,
    ConcordiumGRPCClient,
    getBlockHashInput,
    getAccountIdentifierInput,
    ConcordiumGRPCWebClient,
    CIS0,
    cis0Supports,
    tokenAddressFromBase58,
    tokenAddressToBase58,
    CIS2Contract,
    CIS4,
    Web3IdSigner,
    CIS4Contract,
    isTimestampAttribute,
    IDENTITY_SUBJECT_SCHEMA,
    isAccountCredentialStatement,
    isVerifiableCredentialStatement,
    isVerifiableCredentialRequestStatement,
    compareStringAttributes,
    isStringAttributeInRange,
    timestampToDate,
    dateToTimestampAttribute,
    statementAttributeTypeToAttributeType,
    MAX_STRING_BYTE_LENGTH,
    MAX_U64,
    MIN_DATE_ISO,
    MAX_DATE_ISO,
    MIN_DATE_TIMESTAMP,
    MAX_DATE_TIMESTAMP,
    verifyAtomicStatements,
    AtomicStatementBuilder,
    AccountStatementBuild,
    Web3StatementBuilder,
    createWeb3IdDID,
    createAccountDID,
    createAccountCommitmentInput,
    createAccountCommitmentInputWithHdWallet,
    createWeb3CommitmentInput,
    createWeb3CommitmentInputWithHdWallet,
    canProveAtomicStatement,
    canProveCredentialStatement,
};
/*! Bundled license information:

@noble/hashes/utils.js:
  (*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) *)

@concordium/rust-bindings/lib/dapp/web/umd/index.min.js:
  (*! For license information please see index.min.js.LICENSE.txt *)

@concordium/rust-bindings/lib/wallet/web/umd/index.min.js:
  (*! For license information please see index.min.js.LICENSE.txt *)

@noble/ed25519/index.js:
  (*! noble-ed25519 - MIT License (c) 2019 Paul Miller (paulmillr.com) *)

@noble/hashes/esm/utils.js:
  (*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) *)

@scure/base/lib/esm/index.js:
  (*! scure-base - MIT License (c) 2022 Paul Miller (paulmillr.com) *)

@scure/bip39/esm/index.js:
  (*! scure-bip39 - MIT License (c) 2022 Patricio Palladino, Paul Miller (paulmillr.com) *)
*/
//# sourceMappingURL=chunk-UJRN4I3W.js.map
