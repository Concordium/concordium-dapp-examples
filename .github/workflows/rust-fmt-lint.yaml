name: Fmt and Clippy

# This job runs rustfmt and clippy linting,

on:
  push:
    branches: main

  pull_request:
    branches: main

  workflow_dispatch: # allows manual trigger

env:
  RUST_FMT_VERSION: nightly-2023-04-01-x86_64-unknown-linux-gnu
  CARGO_CONCORDIUM_VERSION: "4.2.0"

jobs:
  rust_fmt:
    name: Running rust fmt for formatting
    # TODO: add conditional back once finished testing
    # Don't run on draft pull requests
    # if: ${{ !github.event.pull_request.draft }}
    runs-on: ubuntu-latest  

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Run cargo fmt
        run: |
          rustup show
          rustc -V
          rustup +${{ env.RUST_FMT_VERSION }} component add rustfmt
          cargo +${{ env.RUST_FMT_VERSION }} fmt --check

  clippy:
    name: Running Clippy for linting and dependency validation
    needs: rust_fmt
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install and run Clippy
        run: |
          rustup component add clippy
          # TODO: I removed `-D warnings` temporarily, let's fix feature / deprecation errors and put it back.
          cargo clippy --locked --all-targets --all-features --no-deps --

  build:
    name: Build Rust project

    needs: clippy
    # TODO: add conditional back once finished testing
    # Don't run on draft pull requests
    # if: ${{ !github.event.pull_request.draft }}
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        id: checkout
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Run cargo build
        run: cargo build --all --locked

  test:
    name: Running cargo-concordium tests
    needs: build
    # TODO: add conditional back once finished testing
    # Don't run on draft pull requests
    # if: ${{ !github.event.pull_request.draft }}
    runs-on: ubuntu-latest

    steps:
      - name: Checkout sources
        uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install Wasm target
        run: | 
          rustup set profile minimal
          rustup target add x86_64-unknown-linux-gnu
          rustup target install wasm32-unknown-unknown
          rustup show 
    
      - name: Download and install Cargo Concordium
        run: |
          curl -L https://github.com/Concordium/concordium-smart-contract-tools/releases/download/releases/cargo-concordium/${CARGO_CONCORDIUM_VERSION}/cargo-concordium-linux-amd64 -o /tmp/cargo-concordium
          chmod +x /tmp/cargo-concordium
          sudo mv /tmp/cargo-concordium /usr/bin/cargo-concordium

      - name: Run cargo concordium test against low-code-nft-marketplace cis2-market  
        run: cargo concordium test --out "low-code-nft-marketplace/cis2-market/concordium-out/module.wasm.v1" -- --manifest-path "low-code-nft-marketplace/cis2-market/Cargo.toml"

      - name: Run cargo concordium test against low-code-nft-marketplace cis2-market  
        run: cargo concordium test --out "trackAndTrace/smart-contract/concordium-out/module.wasm.v1" -- --manifest-path "trackAndTrace/smart-contract/Cargo.toml"